[
{
  "pk": 10,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "There's more than one way to consume the web, especially for people of different abilities. Discover ways to make your website more accessible here. ",
    "slug": "make-it-accessible",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Make it Accessible",
    "content": "<narrative-text>\r\n  <p>Integrating accessibility into the design of your website starts with thinking about how you want your users to experience your website. The thing about disabilities like low vision or limited motor skills is that they can affect user at any point in their life. Making websites accessible to people in all circumstances just creates more opportunities for people to use the Internet, and that's never a bad thing.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>You&#39;ll need to get started</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Thank you, HTML gods\">\r\n  <p>Some users with limited vision use screen readers\u2014devices that\r\n  read aloud the contents of the screen, which could take ages if\r\n  it reads out the menu bar and footer sections. To avoid this\r\n  issue (and to help you structure and organize your content more\r\n  efficiently), the HTML gods have graced us with tags like\r\n  <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>,\r\n  <code>&lt;nav&gt;</code> and more. Try to use them in your code\r\n  as far as possible so more people can experience your work. Check\r\n  out <a href=\r\n  \"http://www.w3schools.com/html/html5_semantic_elements.asp\"\r\n  target=\"new\">this list</a> of all the new tag possiblities.</p>\r\n\r\n  <p>Similarly, screen readers don\u2019t read aloud CSS styles on text,\r\n  so if your text is bold, italicized or underlined using CSS, the\r\n  users who need screen readers won\u2019t be able to tell the\r\n  difference. Luckily, we also have <code>&lt;strong&gt;</code>,\r\n  <code>&lt;em&gt;</code> and <code>&lt;u&gt;</code> tags to make\r\n  your text <strong>look</strong> <em>like</em> <span style=\r\n  \"text-decoration: underline\">this</span>.</p>\r\n</step-block>\r\n\r\n<step-block header=\"Alt tags\">\r\n  <p>Colorful images and photos can really make your website stand\r\n  out from the rest, but screen readers aren\u2019t smart enough (yet)\r\n  to describe them to users with limited vision. That\u2019s where the\r\n  <code>alt</code> attribute comes in. Giving your images\r\n  descriptive <code>alt</code> text tells users exactly what\u2019s\r\n  being displayed onscreen, and they\u2019re also pretty useful if your\r\n  image doesn\u2019t load or if there\u2019s an error in your\r\n  <code>src</code> code.</p>\r\n  <code-block>\r\n&lt;img src=&quot;photo.jpeg&quot; alt=&quot;photo of a mountain range&quot;&gt;\r\n \r\n</code-block>\r\n\r\n  <p style=\"font-weight: bold\">INSERT SCREENSHOT OF EXAMPLE\r\n  HERE</p>\r\n\r\n  <p>Keep in mind that <code>alt</code> text only needs to be used\r\n  for images that provide information to the user. If your webpage\r\n  is about different kinds of dogs then the images of dogs that\r\n  accompany the text should have <code>alt</code> text. Same thing\r\n  for images of charts, bar graphs and the like. But decorative\r\n  images like logos and background photos don\u2019t really need to be\r\n  described to the user, so they can be left blank, or \u201cnull\u201d. And\r\n  never, ever use an image of text when you can style the text\r\n  using CSS. That\u2019s just like, the rules of <span style=\r\n  \"text-decoration: line-through\">feminism</span> web design.</p>\r\n</step-block>\r\n\r\n<step-block header=\"Link it to me\">\r\n  <p>Some screen readers give their users the option of reading out\r\n  only hyperlinks to help navigate a website. That can be an issue\r\n  if your webpage looks like this ...</p>\r\n  <code-block>\r\n&lt;p&gt;&lt;a href=&quot;portfolio.html&quot;&gt;Click here &lt;/a&gt;to see my portfolio and &lt;a href=&quot;resume.html&quot;&gt;here&lt;/a&gt; so see my resume!&lt;/p&gt;\r\n&lt;p&gt;Or, just &lt;a href=&quot;about-me.html&quot;&gt;read more &lt;/a&gt;about me.&lt;/p&gt;\r\n  \r\n</code-block>\r\n\r\n  <p>... because anyone using a screen reader on navigation mode will\r\n  just hear, \u201cClick here \u2026 Here \u2026 Read more.\u201d While this would be a\r\n  useful way to hide cryptic messages in your website, it\u2019s better\r\n  to give your links more descriptive names, like so:</p>\r\n  <code-block>\r\n&lt;p&gt;Take a look at my &lt;a href=&quot;portfolio.html&quot;&gt;portfolio&lt;/a&gt; and my &lt;a href=&quot;resume.html&quot;&gt;resume!&lt;/a&gt;&lt;/p&gt;\r\n&lt;p&gt;Or, just read more &lt;a href=&quot;about-me.html&quot;&gt;about me.&lt;/a&gt;&lt;/p&gt;\r\n  \r\n</code-block>\r\n</step-block>\r\n\r\n<step-block header=\"Space out\">\r\n  <p>Ever heard someone complain about \u201cfat fingers\u201d when using a\r\n  smartphone? Chances are they\u2019re not really talking about the\r\n  width of their fingers, but how difficult a certain application\r\n  or website is to use. When elements such as buttons are small and\r\n  close together they can be difficult to use, especially for those\r\n  with limited motor skills. Grouping related elements together\r\n  makes a webpage easier to understand, but not at the expense of\r\n  the \u201cfat finger\u201d issue.</p>\r\n\r\n  <p style=\"font-weight: bold\">SCREENSHOT EXAMPLE HERE</p>\r\n</step-block>\r\n\r\n<step-block header=\"Bored of hover\">\r\n  <p>Hover menus are bad if people have difficulty using a mouse,\r\n  or if they&#39;re using a keyboard or any other navigation device\r\n  to use your website. Until mobile technology develops heat or\r\n  motion sensors, they&#39;re useless on those devices too. Instead, try to use a navigation system that displays all the possible links in one go with just one click.</p>\r\n</step-block>\r\n\r\n<step-block header=\"Tools for accessiblity testing\">\r\n  <p>It&#39;s difficult to test for all kinds of accessibility\r\n  yourself, so here's a few useful tools to help you.</p>\r\n\r\n  <ol>\r\n    <li>\r\n      <a href=\"http://wave.webaim.org/\">WebAIM\u2019s Web Accessibility\r\n      Evaluation Tool</a> for overall accessibility\r\n    </li>\r\n\r\n    <li>\r\n      <a href=\r\n      \"http://webaim.org/articles/screenreader_testing/\">How to\r\n      test with screen readers</a> and <a href=\r\n      \"http://www.chromevox.com/\">Chrome Vox</a> to hear what a\r\n      screen reader sounds like\r\n    </li>\r\n\r\n    <li>\r\n      <a href=\"http://colororacle.org/\">Color Oracle</a> to see\r\n      what color blindness looks like\r\n    </li>\r\n\r\n    <li>WebAIM\u2019s <a href=\r\n    \"http://webaim.org/resources/contrastchecker/\">Color Contrast\r\n    Checker</a>\r\n    </li>\r\n  </ol>\r\n</step-block>\r\n\r\n<step-block header=\"We are all Internet Explorers\">\r\n  <p>No matter how much you may prefer one browser over another,\r\n  users will visit your websites from all kinds of devices and browsers. To make sure your website adjusts to each kind of browser,\r\n  test your site for compatibility. You don&#39;t have to manually test it with every single existing browser using every single operating\r\n  system out there. Instead, use some of <a href=\r\n  \"https://www.unleashed-technologies.com/blog/2013/10/14/our-favorite-cross-browser-testing-tools-free-subscription-ensure-website\">\r\n  these tools.</a></p>\r\n</step-block>\r\n",
    "status": "draft"
  }
},
{
  "pk": 6,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "One of the biggest things you\u2019ll be using CSS for is your webpage\u2019s layout, so you can control where those elements go and how they are positioned in relation to each other. This is where the box model comes in handy.",
    "slug": "box-model",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "The Box Model",
    "content": "<narrative-text>\r\n  <p>So you&#39;ve mastered coloring, size and styling, but\r\n  there&#39;s still one thing your website is missing: a layout.\r\n  Organization and positioning are key in CSS and, lucky for you,\r\n  the box model breaks it all down to a simple structure. In this\r\n  lesson, you&#39;ll learn the basics of margins, padding and\r\n  borders and how to get elements on your page to look organized\r\n  and clean.</p>\r\n</narrative-text>\r\n\r\n<step-block header=\"Making room\">\r\n  <!--insert picture of the box model here-->\r\n\r\n  <p>So this is it. The box model. Seems pretty clear cut, right?\r\n  No? Okay, we&#39;ll break it down even further for you.</p>\r\n\r\n  <info-block emoji=\"&#x2757;\" header=\"Padding and borders and margins, oh my!\">\r\n    <p><strong>Padding</strong> is the transparent area right\r\n    outside the actual content.</p>\r\n\r\n    <p><strong>Borders</strong> go right outside of the padding and\r\n    the content. The border is visible and can be modified, so it\r\n    can look like anything from a thick solid line to a thin dotted\r\n    one.</p>\r\n\r\n    <p><strong>Margins</strong> are outside everything else. They\r\n    define the space beyond the element\u2019s border and is also\r\n    transparent, like the padding.</p>\r\n  </info-block>\r\n\r\n  <p>You may be wondering why padding and margins are necessary if\r\n  they are transparent. Imagine a box with text in it\u2014would it look\r\n  good if the text was right along the edges of the box? Probably\r\n  not (unless you\u2019re going for a very specific aesthetic choice),\r\n  which is why padding is necessary. Margins become especially\r\n  useful when you have multiple elements around each other. And for\r\n  that, we will need to get into positioning.</p>\r\n</step-block>\r\n\r\n<step-block header=\"Laying things out\">\r\n  <p>The first and arguably most important property in organizing\r\n  your page is the <code>display</code> property. As its name\r\n  suggests, the display property tells an element how it will\r\n  appear on the page. By default, elements on your page will sit\r\n  next to each other and take up the full width of the browser.\r\n  You\u2019re probably going to want to change that, and you can by\r\n  giving the display property one of four different values:\r\n  <code>block</code>, <code>inline-block</code>,\r\n  <code>inline</code> or <code>none</code>.</p>\r\n  <code-block lang=\"css\">\r\ndiv {\r\n  display: block/inline-block/inline/none;\r\n}\r\n                                       \r\n</code-block>\r\n\r\n  <info-block emoji=\"&#x2757;\" header=\"Display types\">\r\n    <p>The <strong>block</strong> property will turn an element\r\n    into a block box that takes up the entire width of the page. It\r\n    prefers to be alone and won\u2019t let any other elements sit next\r\n    to it.</p>\r\n\r\n    <p><strong>Inline-block</strong> is more sociable and allows\r\n    other elements to sit on the same line as it but still take up\r\n    the whole width.</p>\r\n\r\n    <p><strong>Inline</strong> is sociable like inline-block, but\r\n    doesn\u2019t take up the whole expanse of the window. It only takes\r\n    up as much space as it needs. How courteous!</p>\r\n\r\n    <p><strong>None</strong> makes an element disappear from the\r\n    page entirely. Poof! Gone.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Float on\">\r\n  <p>Another way to position your elements is to tell them to\r\n  <code>float</code>. Floating an element tells the webpage that\r\n  you\u2019re putting the element in the flow with everything else. If\r\n  all of your elements float, then they won\u2019t stack on top of each\r\n  other. You can float an element to the left or right, like\r\n  so:</p>\r\n  <code-block lang=\"css\">\r\ndiv {\r\n  float: right;\r\n  /* also available: \r\n  float: left;\r\n  */\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <p>However, mistakes do happen. You may end up with elements that\r\n  stack on top of each other because you mixed up some floating\r\n  elements with non-floating elements. In this case, you can use\r\n  the <code>clear</code> property to set things straight. Like the\r\n  float property, you can tell an element to <code>clear:\r\n  left</code> or <code>clear: right</code>. If you tell it to\r\n  <code>clear: left</code>, it will move below any elements\r\n  floating on the left side of the page. <code>Clear: right</code>\r\n  does the same, just to the right. You can also tell an element to\r\n  <code>clear: both</code> to avoid elements on both sides of the\r\n  page.</p>\r\n</step-block>\r\n\r\n<step-block header='Get into position'>\r\n  <p>Our friendly <code>&lt;div&gt;</code>s are back! This section will\r\n  show you just how useful <code>&lt;div&gt;</code>s can be when we start\r\n  positioning elements together. The <code>position</code> property\r\n  specifies the layout of your website and where elements are\r\n  located in relation to each other. It can take up to four\r\n  different values: <code>static</code>, <code>absolute</code>,\r\n  <code>relative</code> and <code>fixed</code>. Once you\u2019ve\r\n  assigned a position, you can tweak it by using the\r\n  <code>top</code>, <code>bottom</code>, <code>left</code> and\r\n  <code>right</code> properties.</p>\r\n\r\n  <info-block emoji=\"&#x2757;\" header=\"Position types\">\r\n    <p><strong>Static</strong> is the default position\u2014the element\r\n    will just plop down on the page where it normally would go.\r\n    Static elements are not affected by top, bottom, left and right\r\n    properties.</p>\r\n\r\n    <p><strong>Relative</strong> positioning puts an element\r\n    relative to its normal position. This can be easily adjusted\r\n    with the top, bottom, left and right properties.</p>\r\n\r\n    <p><strong>Fixed</strong> positioning binds an element to the\r\n    browser window so that it always stays in the same place no\r\n    matter where you scroll instead of entering and exiting the\r\n    screen. Other elements\u2019 positions will not be affected by the\r\n    presence of a fixed element.</p>\r\n\r\n    <p><strong>Absolute</strong> positioning places an element\r\n    relative to the nearest positioned parent element. If there\r\n    isn\u2019t one, then the element gets positioned relative to the\r\n    entire HTML document. To understand absolute positioning, it\u2019s\r\n    best to see it in action. Open up a new text document and give\r\n    it this HTML:</p>\r\n  </info-block>\r\n  <br>\r\n  <code-block lang=\"css\">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;stylesheet.css&quot;/&gt;\r\n    &lt;title&gt;Absolute Positioning&t;/title&gt;<br>  &lt;/head&gt;\r\n    \r\n  &lt;body&gt;\r\n    &lt;div id=&quot;outer&quot;&gt;\r\n      &lt;div id=&quot;inner&quot;&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n                               \r\n</code-block>\r\n\r\n  <p>See how the \u201cinner\u201d <code>&lt;div&gt;</code> is nested inside the \u201couter\u201d one? That\r\n  means \u201couter\u201d is the parent to \u201cinner.\u201d</p>\r\n\r\n  <p>Now, in your CSS stylesheet, give it this code:</p>\r\n  <code-block lang=\"css\">\r\ndiv {\r\n  height: 100px;\r\n  width: 100px;\r\n}\r\n\r\n#inner {\r\n  height: 100px;\r\n  width: 100px;\r\n  background-color: #D94613;\r\n}\r\n\r\n#outer {\r\n  height: 500px;\r\n  width: 500px;\r\n  background-color: #13D9AE;\r\n  position: absolute;\r\n  margin-left: 100px;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <p>Right now, the little orange box is in the upper lefthand\r\n  corner of the larger teal box. Let\u2019s say we want to move it right\r\n  50 pixels. By giving it <code>absolute</code> positioning, it\u2019ll move in\r\n  relation to its parent, the teal box, rather than the entire HTML\r\n  document. So in your CSS, add <code>position: absolute;</code> and\r\n  <code>margin-left: 50px;</code> under <code>#inner</code>. Refresh your page and see\r\n  what happens. If there were no teal box to act as a parent, the\r\n  orange box would have just moved left from the entire document.\r\n  This is absolute positioning in a nutshell.</p>\r\n</step-block>\r\n",
    "status": "draft"
  }
},
{
  "pk": 4,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "Making your website responsive allows it to be viewed on a variety of devices with different screen sizes and resolutions\u2013and still keep it looking the way you want it.",
    "slug": "create-reponsive-website",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Create a Responsive Website",
    "content": "<narrative-text>\r\n\t\t\t<p>\r\n\t\t\t\tSo you\u2019ve built a website, and it looks fine on your computer. That\u2019s great! But does it look good on your phone? Believe it or not, people spend more time online on mobile devices than any other platform, so you'll need to create a website that will respond when pulled up on screens of different sizes. Here, we\u2019ll cover some different resources and general ideas on how to tackle that issue.\r\n\t\t\t</p>\r\n\t\t</narrative-text>\r\n\r\n\t\t<lesson-block>\r\n\t\t\t<h2>\r\n\t\t\t\tYou'll need to get started\r\n\t\t\t</h2>\r\n\t\t\t<unit-group>\r\n\t\t\t\t<capsule-unit ref='text-editor'>\r\n\t\t\t\t\t<link-ref image=\"images/learn/text-editor.png\" header=\"Sublime Text\" link=\"http://www.sublimetext.com/\"></link-ref>\r\n\t\t\t\t\t<link-ref image=\"images/learn/text-editor.png\" header=\"Notepad++\" link=\"https://notepad-plus-plus.org/\"></link-ref>\r\n\t\t\t\t\t<link-ref image=\"images/learn/text-editor.png\" header=\"Atom\" link=\"https://atom.io/\"></link-ref>\r\n\t\t\t\t\t<link-ref image=\"images/learn/text-editor.png\" header=\"TextMate\" link=\"https://macromates.com/\"></link-ref>\r\n\t\t\t\t</capsule-unit>\r\n\t\t\t\t<capsule-unit ref='modern-web-browser'>\r\n</capsule-unit>\r\n\t\t\t\t<capsule-unit ref='google-chrome'>\r\n\t\t\t\t</capsule-unit>\r\n\t\t\t</unit-group>\r\n\t\t</lesson-block>\r\n\r\n\t\t<step-block header=\"pls respond\">\r\n\t\t\t<p>\r\n\t\t\t\tYou\u2019ve probably seen websites that direct you to a completely different site if you\u2019re visiting on a phone. You've probably even seen some that outright prevent you from accessing a website if you\u2019re on a mobile device. While the first option is bad because you would have to write two separate websites (which means twice the editing for every change!), the second option is definitely worse: people who want to access your site on mobile won\u2019t get anything at all.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tThe better option is to create a responsive website&#8212;a single website that changes its layout and content automatically depending on the screen size and resolution&#8212;so everything stays centralized and neat.\r\n\t\t\t</p>\r\n          \r\n          <media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/giphy.gif\">\r\n            </zooming-image>\r\n          </media-group>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"The Gridiron\">\r\n\t\t\t<p>\r\n\t\t\t\tResponsive design is an issue that has been pondered by many a mind, and as a result there is no shortage of possible solutions readily available. Many are HTML, CSS and/or Javascript frameworks that revolve around a common grid system or allow you to easily define your own.\r\n\t\t\t</p>\r\n\t\t\t<info-block emoji=\"&#x2757;\" header=\"What the heck is a framework?!\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tIf you\u2019re planning on getting deeper into the world of code (trust me, it gets a lot deeper), you\u2019re going to be seeing the words \u201cframework\u201d and \u201clibrary\u201d a lot, sometimes used interchangeably. It can be easy to get confused on what exactly these are, so here\u2019s a quick (and by no means final) explanation:\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA library is basically just code that someone else has written that makes part of your job easier. That code can be anything, from CSS to HTML to Javascript. All you do is hook it up to code you already have, and presto! It\u2019s yours. You typically won\u2019t have to modify code found in a library.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA framework is similar to a library in that it provides pre-written code that fulfills some functionality, but differs in that it\u2019s typically more of an outline that you have to flesh out. A framework can be a library, but they require you to do the heavy lifting (you have to decide how to use it, which features to implement, etc.) while a library helps you once you\u2019ve made those decisions.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThere is no hard and fast definition for libraries or frameworks, or even for what the difference is between the two. In general however, libraries are typically smaller and simpler, while frameworks are larger but more robust.\r\n\t\t\t\t</p>\r\n\t\t\t</info-block>\r\n\t\t\t\r\n          \t<p>\r\n\t\t\t\tIf you\u2019ve ever designed for a magazine or newspaper, you\u2019re probably familiar with grid systems. Grids allow you to easily organize content and layout using columns and make it easy to plan out and change designs. A layout can be split into any number of total columns, but the most common number is 12, a nice multiple of both three and four.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tTypically, the columns are placed on the inside of the page or screen so that there is space around the columns on all sides. This spacing is referred to as the margin, and is just there to make sure your content doesn\u2019t seem cramped. There\u2019s spacing in between columns as well: those spaces are called the gutters and are also there to promote legibility.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tContent can be made to span across any number of columns: a big splash image might take up all 12 columns across (or may even ignore margins and take up the entire width of the screen), while you might only want your body copy to span six columns.\r\n\t\t\t</p>\r\n\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2010/09/grids_fig3-1-.jpg\" full-src=\"http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2010/09/grids_fig3-1-.jpg\"></zooming-image>\r\n\t\t\t</media-group>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"Bootcamp\">\r\n\t\t\t<p>\r\n\t\t\t\tPerhaps the most popular responsive design framework is Bootstrap, a mobile-first approach to building websites that uses the 12-column grid system we just mentioned and comes preloaded with its own HTML, CSS, and Javascript. We\u2019ll be using Bootstrap in this lesson to introduce you to responsive web development.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tThere are a few ways of hooking up Bootstrap to your website, but the easiest way is to simply link it like any other stylesheet through their CDN:\r\n\t\t\t</p>\r\n\t\t\t<code-block>\r\n&lt;!-- Bootstrap core CSS --&gt;\r\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"&gt;\r\n&lt;!-- Optional Bootstrap theme --&gt;\r\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"&gt;\r\n&lt;!-- JavaScript --&gt;\r\n&lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\">&lt;/script&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<info-block emoji=\"&#x2757;\" header=\"You need to sort out your priorities\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tOne thing to watch out for in front-end web development is the ordering of your stylesheets. You\u2019ll most likely want to link Bootstrap\u2019s optional theme along with the core CSS because it\u2019s relatively nice-looking and just means less work for you. However, if you want to make your own changes to elements after installing the theme, you might run into some trouble for two reasons.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tFor one, CSS is very particular about priority level for styles, and rightfully so. In CSS, because there are so many different ways of selecting elements, it\u2019s possible to style the same element via multiple selectors, and so a strict priority system is necessary to ensure that elements can be styled in a predictable and manageable way. For selectors, the order goes element, class, ID from lowest to highest priority (element names get a priority of one, classes ten, and IDs 100), and more specific\r\n\t\t\t\t\tselectors get priority over less specific ones.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tFor example, if you\u2019re modifying an element such as:\r\n\t\t\t\t</p>\r\n\t\t\t\t<code-block>\r\n&lt;p class=\u2019example-class\u2019 id=\u2019example-id\u2019>example&lt;/p&gt;\r\n\t\t\t\t</code-block>\r\n\t\t\t\t<p>\r\n\t\t\t\t\twith the following CSS in an external stylesheet:\r\n\t\t\t\t</p>\r\n\t\t\t\t<code-block lang=\"css\">\r\np {\r\n\tcolor: red;\r\n}\r\n\r\n.example-class {\r\n\tcolor: blue;\r\n}\r\n\r\n#example-id {\r\n\tcolor: green;\r\n}\r\n\t\t\t\t</code-block>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tthe paragraph text will always appear green. Taking away the <code>#example-id</code> rule will turn the paragraph blue, and finally removing the <code>.example-class</code> rule will turn the paragraph red.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tSecondly, because CSS is cascading, it also styles elements based on the last rule read about that element. This means that not only do later rules on the same stylesheet override earlier ones (as long as it has an equal or higher priority level), but also rules that are introduced in later stylesheets override those found in earlier stylesheets.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tWhat does this mean for you? If you\u2019re trying to style something that\u2019s been pre-styled with Bootstrap\u2019s theme and it\u2019s not appearing the way you expect it to, make sure that your custom stylesheet is placed lower in the HTML head section than the Bootstrap theme. Also, try to be as specific as possible, using IDs where necessary.\r\n\t\t\t\t</p>\r\n\t\t\t</info-block>\r\n\t\t\t<p>\r\n\t\t\t\tKeep in mind that you\u2019ll also need jQuery, a Javascript library, for all of Bootstrap\u2019s Javascript plugins. You can add that here, and make sure to hook up the jQuery before hooking up the Bootstrap Javascript plugin:\r\n\t\t\t</p>\r\n\t\t\t<code-block>\r\n&lt;!-- jQuery --&gt;\r\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt;\r\n\t\t\t</code-block>\r\n\t\t\t<p>\r\n\t\t\t\tAnother thing to keep in mind is that these links all point to servers. That means that your website won\u2019t work without an internet connection. This won\u2019t be a problem if your site itself is hosted on a server, as retrieving the site in the first place requires an internet connection. However, this does mean that your website won\u2019t open correctly on your computer while you\u2019re editing the files if you\u2019re not connected to the internet.\r\n\t\t\t</p>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"Row, row, row your boat\">\r\n\t\t\t<p>To utilize the Bootstrap components, you\u2019ll be adding classes to your elements to describe how they should function. To start off, you\u2019ll need a Bootstrap container, so put that in your body:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='container'&gt; &lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tNow within that container we can start to build out the innards of the website. Inside the container <code>div</code>, make another <code>div</code> with a row class.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class=\u2019row\u2019&gt; &lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tAs you might expect, this <code>div</code> will now function as a row into which we can start putting our other components. The row serves as a container for the 12 columns that we\u2019re going to be making use of soon. But first, let\u2019s get a visualization of how the grid system actually works.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tEach column should be wrapped in its own <code>div</code> and will belong to a class that describes how wide it will appear and at what sizes. Let\u2019s see how this works. Inside your row <code>div</code>, insert a column <code>div</code>:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class=\u2019col-md-1\u2019&gt; &lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tInside your custom CSS file, go ahead and add a rule to make the <code>background-color</code> of all one-width columns red. We\u2019ll also give the column a height of 50px.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n.col-md-1 {\r\n\tbackground-color: red;\r\n\theight: 50px;\r\n}\r\n\t\t\t</code-block>\r\n\t\t\t<p>\r\n\t\t\t\tSave, then open your HTML in your browser, and you see a small red rectangle at the top of your screen. The width of that rectangle represents how much space one column gets. Of course, there\u2019s space between columns (although this comes in the form of padding, which is on the inside of the div, rather than margin, which is on the outside), so a two-width column of text will be more than twice as wide as its one-width counterpart, but not by much. In your HTML document, copy and paste the col-md-1 div 11 more times in the same row and refresh your screen. Try typing some placeholder text inside the div. You can even try playing around with the numbers: see what happens if you change one of the columns to col-md-3 or col-md-4 (be sure to change the colors so you can tell which width is which). It may seem pretty obvious at this point, but the number at the end of the class just determines how many columns that div will span, up to 12. What may be a little less obvious is what the \u201cmd\u201d stands for.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tBootstrap has four main classifications for devices: extra-small (phones with a screen width of less than 768px), small (tablets with a width of 768px or more), medium (desktops with a width of 992px or more), and large (big desktops with a width of 1200px or more). Because you might want the layout of your website to appear differently on different screens, you can change how wide a <code>div<code/> will be for a given screen size by merely appending column classes. The following <code>div<code/>:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class=\u2019col-xs-6 col-md-3\u2019&gt; &lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\twill span six columns on an extra-small screen and three columns on a medium-sized screen. Keep in mind that these classification systems are based on device width, and orientation may still play a role as to how your website looks and handles.\r\n\t\t\t</p>\r\n\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"Let's get building\">\r\n\t\t\t<p>\r\n\t\t\t\tLet\u2019s get a fresh start: go ahead and delete everything we did in the previous steps except for the container and row <code>div<code/>s in your HTML file. We\u2019ll be making a super hip and modern portfolio site, so we should start off with a big splash image. You can use any relatively large landscape-oriented image you want (if you can\u2019t find one you\u2019d want to use right now, check out <a href=\"https://unsplash.com\">Unsplash.com</a> for options).\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tWe want this image to be pretty big. In fact, we want this to be a full-screen image so that when people visit our website, they\u2019ll think, \u201cWow, look at this great photography. It takes a lot of artistic vision to pick out a high-quality, well-composed landscape photo from a website. I like this guy or gal or human being with no attachment to gendered pronouns.\u201d To do that, we\u2019re going to add a descriptive class to our container and then give our container the <code>background-image</code> of whatever photo we chose:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;!-- HTML --&gt;\r\n&lt;div class='container splash-container'&gt; &lt;/div&gt;\r\n\t\t\t</code-block>\r\n<br>\r\n\t\t\t<code-block lang=\"css\">\r\n/* CSS */\r\n.splash-container {\r\n\theight: 100vh; // sets container height to 100% of view height\r\n\twidth: 100vw; // sets container width to 100% of view width\r\n\tbackground-image: url('https://unsplash.com/photos/duoMdMm3aY0/download'); // sets background-image to image at specified URL\r\n\tbackground-size: cover; // makes sure that the background-image will always fully cover the splash-container\r\n\tbackground-position: bottom; // aligns the background-image to the bottom of the splash-container\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tNow let\u2019s get some text on the screen. Create a new row inside your container, and inside the row add a 12-width column and give it an additional class of header. Then add a greeting in your language of choice. Ours is English.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class=\u2019row\u2019&gt;\r\n\t&lt;div class=\u2019col-md-12 header\u2019&gt;\r\n\t\tHello.\r\n\t&lt;/div&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tOkay, now let\u2019s style it to get it looking a bit better. In your CSS document, add rules to the header to get the greeting to be aligned center, then shift it down about 40% of the view height from the top. We should also change the color so it\u2019s a bit more visible against the background. Oh! And let\u2019s also make the text bigger, and bump up the <code>font-weight</code> a little. You know how to do all that, don\u2019t you?\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n.header {\r\n    text-align: center;\r\n    margin-top: 40vh;\r\n    color: white; // white may not be the best color for you, depending on what your background\u2019s like\r\n    font-weight: 700; // 700 is usually a \u201cbold\u201d font-weight; 400 is usually the \u201cregular\u201d weight\r\n    font-size: 9em;\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-01'></zooming-image>\r\n\t\t\t</media-group>\r\n<br>\r\n\t\t\t<p>\r\n\t\t\t\tDang, look at that! It\u2019s so simple and understated! It\u2019s so clean! It\u2019s so minimal (feel free to jump in with any other design jargon you know)! So Bauhaus! So Swiss!\r\n\t\t\t</p>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"Game, offset, match\">\r\n\t\t\t<p>\r\n\t\t\t\tOkay, hotshot, we\u2019re not quite done yet. Let\u2019s go ahead and add a little description paragraph so visitors know who built this thing.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tWe\u2019ll want to contain our description in a new row, so we\u2019ll do just that. The description itself might be a little long depending on the length of your name and how important you think you are, so we should think about how wide we want it to be. We probably want it to go across half the width of the screen at most for laptops and medium-sized computers. For really big computers, half the width of the screen is probably too big though&#8212;at that point we might want to limit it to a third of the screen. Although for phones, the full screen-width is probably okay.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tSee how useful it is to be able to delineate between screen sizes? If we clearly plan out how we want our website to look on each platform we can carefully account for each use case and ensure that everyone gets an equally beautiful website on their devices.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tSo let\u2019s do just that. Are you ready? This is going to be a doozy.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='row'&gt;\r\n\t&lt;div class='col-sm-12 col-md-6 col-lg-4 description'&gt;\r\n\t\tMy name is Inigo Montoya and welcome to my website!!! You killed my father!!! Prepare to die!!!\r\n\t&lt;/div&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tI\u2019ll go ahead and note right now that the col-sm-12 is redundant: one nice Bootstrap feature is that once the screen is resized to be smaller than the smallest column size explicitly accounted for in a div, that div will automatically become a 12-width column. For example, if we had a <code>&lt;div class='col-md-1'&gt; &lt;/div&gt;</code>, that column would turn into a 12-width column once the screen classified as a small or extra-small. But while it is redundant to use col-sm-12, sometimes it\u2019s nice to be explicit about what we\u2019re doing so that people who have to look at our code after us (including our future selves) don\u2019t get confused.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tAlright, now let\u2019s style this puppy or kitty or animal with no attachment to speciesed nouns. I think it\u2019ll look cool with the same color text as we used in the header, a font size of 2em, and centered text. Let\u2019s check it out:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n.description {\r\n    color: white;\r\n    font-size: 2em;\r\n    text-align: center;\r\n}\r\n\t\t\t</code-block>\r\n          \r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-02'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tHm. The text is centered, so that\u2019s right, but it\u2019s not centered in the right place. That\u2019s because (on my screen at least) the description container spans six out of 12 columns, and not the full 12 like the header did, so the text will only be aligned within those six columns. We\u2019ll need to shift the description column over somehow.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tBootstrap has a class for offsetting columns, and it works much in the same way as their column-sizing classes. Since our description spans six of the 12 columns in medium views, we\u2019ll need to offset it by three in medium views to get it centered. In large views, since it\u2019s four columns wide at that point, we\u2019ll have to offset it by four. Double-check the math on that for me real quick (we don\u2019t need to set an offset for the small size because, like how larger column sizing classes don\u2019t apply to smaller screens, larger column-offsets don\u2019t apply in smaller screens).\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='row'&gt;\r\n\t&lt;div class='col-sm-12 col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4 description'&gt;\r\n    \tMy name is Inigo Montoya and welcome to my website!!! You killed my father!!! Prepare to die!!!\r\n\t&lt;/div&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-03'></zooming-image>\r\n\t\t\t</media-group>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"You can't escape his gaze\">\r\n\t\t\t<p>\r\n\t\t\t\tPerfect! But unless you\u2019re very boring or a newborn you probably can\u2019t describe your entire existence in two or three lines. We\u2019ll go ahead and start a new section so you can digress to your heart\u2019s content. Make a new container directly under your splash image and populate it with a row. Inside that row, we\u2019ll include two columns: one for an about section and another for a headshot.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='container'&gt;\r\n  &lt;div class='row'&gt;\r\n      &lt;div class='col-md-3'&gt;\r\n\r\n      &lt;/div&gt;\r\n      &lt;div class='col-md-9'&gt;\r\n\r\n      &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tIn our smaller three-width column, let\u2019s put our about section. Add an <code>&lt;h1&gt;</code> tag and a <code>&lt;p&gt;</code> tag, and flesh out a more detailed description about yourself. You know, what you like and what you stand for. That stuff.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='col-md-3'&gt;\r\n\t&lt;h1&gt; About Me&lt;/h1&gt;\r\n    &lt;p&gt;I like long walks on the beach, starring in Quentin Tarantino films, and being America's sweetheart. If you're looking for a fun guy with a great sense of humor and a huge heart, I'd love to get coffee with you sometime and talk. You can find my contact info on my FarmersOnly profile page.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tOn your nine-width column, add an <code>&lt;img&gt;</code> tag with your headshot.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;div class='col-md-9'&gt;\r\n\t\t&lt;img src=\"http://amahighlights.com/wp-content/uploads/steve-buscemi.jpg\"&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThe <code>&lt;img&gt;</code> tag on its own doesn\u2019t look quite right, so we\u2019ll add a class to it and modify it in our CSS file.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block>\r\n&lt;!--HTML--&gt;\r\n&lt;div class='col-md-9'&gt;\r\n\t\t&lt;img class='headshot' src=\"http://amahighlights.com/wp-content/uploads/steve-buscemi.jpg\"&gt;\r\n&lt;/div&gt;\r\n\t\t\t</code-block>\r\n<br>\r\n\t\t\t<code-block lang=\"css\">\r\n/* CSS */\r\n.headshot {\r\n    width: 100%; // ensures that the image is as wide as the containing div\r\n    padding-top: 20px;\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-04'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tSweeeeet. But now\u2019s the time for the moment of truth: how does it look when we resize our screen?\r\n\t\t\t</p>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-05'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tHey, check that out! The widths of our columns changed as the screen shrunk, and our image automatically went under the about section once there wasn\u2019t any room for it on the side. That\u2019s not half bad. In fact, I\u2019d be willing to say it\u2019s at least half good. Maybe even three-quarters good.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tBut we\u2019re certainly not done. If not using Google Chrome to view your website, go ahead and download it. Once you have it, open your website in Google Chrome and right-click anywhere on the screen to select \u201cInspect Element.\u201d Then, at the top left of the panel that showed up on the right of your screen, select the little phone icon (it should say \u201cToggle device mode\u201d if you hover over it).\r\n\t\t\t</p>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-06'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThis is one of Google Chrome\u2019s most powerful web debugging tools. You can use it to emulate different devices on your computer, each having different screen sizes and resolutions. On the top-left of your browser window, you should now see a drop-down menu with the word \u201cDevices\u201d next to it. From that drop-down menu you can select from a variety of pre-set devices. Just for kicks, let\u2019s pick the iPhone 6 option. What happens?\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tAll of a sudden, our text is super tiny. We set it to 9em&#8212;why is it so small all of a sudden when it was so big on our computer? And not only is that text tiny, but so is everything else.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThis happens because screens and devices come not only in different sizes, but also in different resolutions and pixel ratios as well. A screen\u2019s resolution is essentially the number of pixels it can display (usually something like 1280x720 or 1920x780).\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThe pixel ratio is the relationship between physical pixels (the actual screen size) and logical pixels (how the screen size is interpreted by CSS). A iPhone 5s, for example, has a screen resolution of 640x1136 pixels. Its CSS pixel ratio, however, is 2, so when loading websites the browser determines its resolution to be 320x568 (half its real screen resolution in both measurements).\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tPixel ratios were invented because without them websites would appear so small as to be unviewable. As mobile screens become more and more pixel-dense, a measurement of 200px becomes much smaller on a phone than it is on a computer.\r\n\t\t\t</p>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block header=\"Media queries\">\r\n\t\t\t<p>\r\n\t\t\t\tTo help alleviate this issue, CSS3 implemented a new feature known as media queries. These are rules within your CSS that are only triggered when certain conditions about the browser are met: what kind of device it\u2019s being displayed on, how wide the window is, what the pixel ratio is, and things like that. Media queries allow you to be even more specific in how you target screens, and follow a rather simple format:\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n@media screen and (max-width: 800px) {\r\n\t/* rules go here */\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThis is where Bootstrap\u2019s \u201cmobile-first\u201d mantra comes in: you first design your website for mobile devices, and then you add media queries and other layout-affecting attributes to make sure your website still appears correctly on larger devices. With that in mind, let\u2019s make a few changes to our website so it follows this convention. Don\u2019t worry, we won\u2019t be changing too much.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThe first thing we should do is make the header a bit larger on our phones. If you look on the device preview, our header should look pretty small. In your CSS file, bump up the fon -size to 15em.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n.header {\r\n\tfont-size: 15em;\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tWe should do the same to our description. We\u2019ll make it twice as big as it was before.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n.description {\r\n\tfont-size: 4em;\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-07'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tNow it looks better on our phone view, but how to does it check out on the desktop?\r\n\t\t\t</p>\r\n\r\n\t\t\t<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t\t<zooming-image ref='responsive-08'></zooming-image>\r\n\t\t\t</media-group>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tYikes. Everything\u2019s way too big. Don\u2019t worry, This is where media queries come in.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tAdd a media query to target devices with a minimum width of 768px, and in that query apply rules to make our header and description font sizes what they were before we changed them.\r\n\t\t\t</p>\r\n\r\n\t\t\t<code-block lang=\"css\">\r\n@media screen and (min-width: 981px) {\r\n  .header {\r\n    font-size: 9em;\r\n  }\r\n\r\n  .description {\r\n    font-size: 2em;\r\n  }\r\n}\r\n\t\t\t</code-block>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tThere! Now if you switch your device setting to \u201cLaptop with MDPI screen\u201d or \u201cLaptop with HDPI screen,\u201d everything should still check out!\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tNow, a disclaimer: the media query we just put in won\u2019t account for every screen size&#8212;you\u2019ll notice that if you manually resize your browser with the website open it\u2019ll break at one point, and the text will become much larger than you wanted it to. Making a website responsive and fit screens of every size does take some time and fiddling with media queries to get the right look at every size, and the breakpoints are different for every website. The best way to get familiar with your website\u2019s natural breakpoints is just to play around with it and see what sizes are best for you.\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tNow that you understand the basics of responsive web design through Bootstrap, you can start adding sections to your website and begin to make it truly yours. If you\u2019d like, you can also explore other responsive design frameworks, like Foundation or Google\u2019s Material Design Lite (Google\u2019s MDL is closer to a styling library than a full responsive design framework, and while it does have a similar grid-based system to Bootstrap or Foundation, it isn\u2019t its main feature. MDL is also heavily styled to Google\u2019s Material Design guidelines, and so if you\u2019re not sure about committing to that look you may want to look elsewhere). There\u2019s also much more to Bootstrap than just their responsive layouts&#8212;Bootstrap comes with a bunch of pre-built components (like a navbar). You can check out what they do and how to use them here.\r\n\t\t\t</p>\r\n\r\n\t\t\t<info-block header=\"Put it to the test\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tIt\u2019s important to have the right tools to test responsive websites with, as sometimes websites on actual mobile devices will look different even from the same website on a resized desktop browser. To help you debug and test your responsive websites, Google Chrome has a great device mode feature that allows you to emulate many common screen sizes and devices. To use it, simply open your website in Google Chrome, then right click anywhere on the screen and select \u201cInspect Element.\u201d This will pull up your HTML side-by-side with the actual website (inspect element is a great way to see how the browser is actually interpreting your code), and in the top left corner there should be a small phone icon. Click it to toggle device mode, and once it\u2019s on you\u2019ll be able to select devices of varying sizes, including phones, tablets, and even some desktops.\r\n\t\t\t\t</p>\r\n\t\t\t</info-block>\r\n\t\t</step-block>\r\n\r\n\t\t<step-block title='Full Code'>\r\n\t\t\t<info-block>\r\n\t\t\t\t<h2>HTML</h2>\r\n\t\t\t\t<code-block>\r\ncode goes here\r\n\t\t\t\t</code-block>\r\n\t\t\t</info-block>\r\n\t\t\t<info-block>\r\n\t\t\t\t<h2>CSS</h2>\r\n\t\t\t\t<code-block lang=\"css\">\r\ncode goes here\r\n\t\t\t\t</code-block>\r\n\t\t\t</info-block>\r\n\t\t</step-block>",
    "status": "draft"
  }
},
{
  "pk": 3,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "Wondering why your site\u2019s looking so ugly? HTML just says what\u2019s what and gives the page structure. CSS is where the real fun starts\u2013it will fix things faster than Fix-it Felix.",
    "slug": "write-some-css",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Write Some CSS",
    "content": "<narrative-text>\r\n  <p>So you\u2019ve built a webpage. Or at least, you <em>think</em> it\u2019s a\r\n  webpage. It looks very different from what you\u2019re used to seeing. There are no fun, bright colors, no sleek\r\n  interfaces, no gifs of adorable mammals. Let's fix that. <glossary-term>CSS</glossary-term>, or Cascading Style Sheets, is ready to help. And so are we.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you'll need to download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref='modern-web-browser'></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"What it looks like\">\r\n  <h3>What we do</h3>\r\n  <p>Before we dive into all the cool stuff, we need to look at how to construct a proper CSS<glossary-term>declaration</glossary-term>. Once you've got that down, then you can create your own recipes to get things looking like you want them.</p>\r\n  <h3>Why we do</h3>\r\n  <p>If your biggest enemy in HTML was forgetting to close a tag, its CSS counterpart is forgetting that semi-colon at the end of a declaration. This lets the browser know you're done with that particular instruction, so it can move along to the next one. If the semi-colon <em>isn't</em> there, the browser thinks you're still working on the same property, and things go beserk.</p>\r\n  <h3>How we do</h3>\r\n  <p>The syntax for CSS is a lot simpler than the syntax for HTML.\r\n  Are you ready for it? Here it is:</p>\r\n  <code-block lang=\"css\">\r\nelement {\r\n  property: value;\r\n  property: value;\r\n}\r\n                       \r\n</code-block>\r\n  <p>The <strong>element</strong> is the HTML element you want to style, like an  <code>h1</code>. But since we're referencing it in CSS, you don't need the angle brackets.</p>\r\n  <p>So to target <code>h1</code>, we'd go in and change the element like this:</p>\r\n    <code-block lang=\"css\">\r\nh1 {\r\n  property: value;\r\n}\r\n                       \r\n</code-block>\r\n  <p>Think of <strong>properties</strong> as the basic vocabulary set of CSS. It defines what you want to change, then the <code>value</code> specifies exactly how. Common properties\r\n  include <code>background-color</code>, <code>height</code>,\r\n    <code>width</code>, and others.</p>\r\n  <p>So let's say we wanted to change the backround color of that tag. We'd use the <code>background-color</code> property here:</p>\r\n    <code-block lang=\"css\">\r\nh1 {\r\n  backround-color: value;\r\n}\r\n                       \r\n</code-block>\r\n  <p>Each property has a set of acceptable values that can go along with it. So you can set <code>background-color</code> to <code>blue</code>, for example, but you can't set it to \"pig\". So it becomes this:</p>\r\n    <code-block lang=\"css\">\r\nh1 {\r\n  background-color: blue;\r\n}\r\n                       \r\n</code-block>\r\n  <p>The key to CSS is digging around for the right property-value one-two punches that will make your page look amazing. Like HTML, you've got to spend some time trying out the vocab to see what makes the most sense.</p>\r\n\r\n</step-block>\r\n\r\n<step-block header=\"Making our first changes: Do something ugly!\">\r\n  <h3>What we do</h3>\r\n  <p>We're going to change the background color of our page to beige.</p>\r\n  <h3>Why we do</h3>\r\n  <p>When you first set things up, it's good to do something obvious and ugly so that you know your setup is working. <a href=\"https://learn.knightlab.com/lesson/create-basic-website/#prepareCSS\">(If it's not, head back here to double check.)</a>.</p>\r\n  <h3>How we do</h3>\r\n\r\n  <ol>\r\n    <li>First up: Deciding what to target. Since we want to change the background color of the whole page, we have to grab a top-level tag. For us, that's <code>&lt;body&gt;</code>.</li>\r\n    <li>From there, we've got to select a property and value that will achieve the style we're after. <a href=\"http://www.w3schools.com/cssref/\">Here's a list</a> of all the property options, but a quick Google search is just as good. We're after <code>background-color</code> and <code>beige</code>.</li>\r\n    <li>Type the following into your CSS file:</li>\r\n  <code-block lang=\"css\">\r\nbody {\r\n  background-color: beige;\r\n}\r\n                               \r\n</code-block>\r\n  </ol>\r\n  \r\n  \t\t\t<!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/2-beige.png\" full-src=\"/imagelib/uploads/2-beige.png\"></zooming-image>\r\n\t\t\t</media-group>-->\r\n  \r\n  <info-block emoji=\"&#x270B;\" header=\"Do browsers recognize the color 'Tango Red?'\">\r\n  \r\n    <p>Nope. (Though we like it too.) Browsers know the basics, like red, blue, and green (<a href=\"http://www.crockford.com/wrrrld/color.html\">and 144 others</a>), but if you want more options, you've got to go another route. For a more precise method of identifying color, you'll need to know a little more about how color itself works. Look into <glossary-term>RGB</glossary-term>, <glossary-term>HSB</glossary-term>, and <glossary-term>hex values</glossary-term>. Consider making your own palette or browsing others' at sites like <a href=\"https://color.adobe.com/\">Adobe Color</a>.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Selecting the right content\">\r\n  <p>Our website\u2019s looking better already. By playing with\r\n  elements\u2019 property and value pairs, we can modify just about\r\n  anything, from size to color to position.</p>\r\n\r\n    <p>But there\u2019s still a problem. As of right now, we don\u2019t have\r\n    any way of grouping certain elements together in our HTML.</p>\r\n  \r\n  <p>Let\u2019s say we wanted to have all of our introductory information\r\n    have the same <code>background-color</code>. We could try\r\n    styling each piece at once, like this:</p>\r\n    <code-block lang=\"css\">\r\nh1 {\r\n  background-color: firebrick;\r\n}\r\n\r\nimg {\r\n  background-color: firebrick;\r\n}\r\n\r\np {\r\n  background-color: firebrick;\r\n}\r\n                       \r\n</code-block>\r\n  \r\n    <p>This is pretty laborious, and it doesn\u2019t really give us what we want. Instead of putting everything in one red box, we have\r\n    three separately colored blocks. If only there was some way to\r\n    go in our HTML and put the elements into one larger,\r\n    over-arching element. Oh, wait there is.</p>\r\n  \r\n  <h3>What we do</h3>\r\n  <p>We're going to group things together in our HTML document, and style three things at once.</p>\r\n  \r\n  \r\n    <h3>Why we do</h3>\r\n  <p>It would be a painstaking process to style every single thing individually. Grouping them together allows us to be more efficient--which is great for page-loading time.</p>\r\n    \r\n\r\n  <h3>How we do</h3>  \r\n  <p><a href=\"https://learn.knightlab.com/lesson/write-some-html/#divExplainer\">Remember how</a> in the HTML lesson we had you wrap all your\r\n  introductory information in a <code>&lt;div&gt;</code>? Yeah,\r\n  those were good times. And now we get to actually put that\r\n  <code>&lt;div&gt;</code> to use.</p>\r\n\r\n  <p>That <code>&lt;div&gt;</code> gives us a way to target everything inside.</p>\r\n  <ol>\r\n    <li>Delete the firebrick code we put in before, if you followed along.</li>\r\n    <li>Using the <code>&lt;div&gt;</code> as our target element, get this going in your CSS file:</li>\r\n  <code-block lang=\"css\">\r\ndiv {\r\n  background-color: firebrick;\r\n}\r\n    </code-block>\r\n\r\n<li>Head over to your browser and refresh&#8212;you should see one big chunk of, you guessed it, firebrick red. Who makes up these names, anyway?</li>\r\n    <li>If you're not seeing it, check to make sure that <em>both</em> your HTML and CSS files have been saved, and that your <code>&lt;div&gt;</code> is set up correctly in your HTML file. Then triple check your syntax.</li> \r\n    </ol>\r\n  \r\n    \t\t\t<!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/3-red-css.png\" full-src=\"/imagelib/uploads/3-red-css.png\"></zooming-image>\r\n\t\t\t</media-group>-->\r\n  \r\n  <!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/3-red-html.png\" full-src=\"/imagelib/uploads/3-red-html.png\"></zooming-image>\r\n\t\t\t</media-group>-->\r\n</step-block>\r\n\r\n<lesson-block header=\"Back to HTML for a sec ...\">\r\n  <p>So far in our CSS, when we&#39;ve been targeting HTML elements, it's affected <em>all</em> the elements with that name. So if you target <code>p</code> in CSS, it's going to target every single graf on the page. That's great for making sure your paragraphs all look the same, but what about special-use cases? What if you want to style your bylines differently from your other grafs?</p>\r\n  <p>Part of getting good at CSS is understanding the relationship &#x1F49E; between HTML and CSS. In order to target specific items or groups of items, we've got to identify what those are in HTML. In other words, we've got to give CSS something to hook onto, other than the element names.</p>\r\n  <h3>Enter: <glossary-term lemma=\"class\">classes</glossary-term> and <glossary-term lemma=\"ID\">IDs</glossary-term>.</h3>\r\n  <p>These are <glossary-term lemma=\"attribute\">attributes</glossary-term> you attach to HTML elements. A <glossary-term>class</glossary-term> is typically used to collect multiple things&#8212;several bylines, for example. An <glossary-term>ID</glossary-term> is a unique identifier&#8212;so you only use these if there's only one. Here's how it looks:</p>\r\n  <code-block>\r\n   &lt;h1 id='featured-headline'&gt;By Walter S. Gates III, Esq.&lt;/h1&gt;\r\n   &lt;p class='byline'&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\r\n   &lt;p&gt;Amazing lede goes here!&lt;/p&gt;\r\n   &lt;p&gt;Followed by an incredible nut graf.&lt;/p&gt;\r\n   &lt;p&gt;Because we're news hounds.&lt;/p&gt;\r\n   &lt;p&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\r\n  </code-block>\r\n  \r\n  </lesson-block>\r\n\r\n<step-block header='Using classes: Applying style more efficiently'>\r\n  \r\n  <h3>What we do</h3>\r\n<p>In our sample code, we're going to change color of our text in a couple of different places.</p>\r\n  <h3>Why we do</h3>\r\n  <p>We need some way of labeling the elements we want to change, and then applying rules to those specific elements. We don't want to change <em>all</em> our text uniformly.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Back in your HTML document, add a class to your header and\r\n  paragraph and call it &quot;white-text,&quot; like this:</li>\r\n  <code-block>\r\n&lt;h1 class=&#39;white-text&#39;&gt;\r\n  // your text\r\n&lt;/h1&gt;\r\n\r\n&lt;p class=&#39;white-text&#39;&gt;\r\n  // your text\r\n&lt;/p&gt;\r\n                       \r\n</code-block>\r\n\r\n  <li>Then add an ID to your ordered list and call it\r\n  &quot;gray-text.&quot;</li>\r\n  <code-block>\r\n&lt;ol id=&#39;gray-text&#39;&gt;\r\n  // list items\r\n&lt;/ol&gt;\r\n    \r\n</code-block>\r\n\r\n    <li>Now let's target our <code>white-text</code> class instead of our vanilla HTML elements. To modify an element based\r\n  on its class, you add a period before the class name in\r\n  the CSS file.</li>\r\n  <code-block lang=\"css\">\r\n.white-text {\r\n  color: white;\r\n}\r\n                       \r\n</code-block>\r\n\r\n  <li>To target an ID, simply use a pound sign instead of a\r\n  period.</li>\r\n  <code-block lang=\"css\">\r\n#gray-text {\r\n  color: gray;\r\n}\r\n                               \r\n</code-block>\r\n    <li>Remember to save both your HTML and CSS, and head over to the browser to take a look. If things look funky, double check to make sure your spelling is the same in both places. CSS is case sensitive!</li>\r\n  </ol>\r\n\r\n  <!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/4-white-text.png\" full-src=\"/imagelib/uploads/4-white-text.png\"></zooming-image>\r\n\t\t\t</media-group>-->\r\n  \r\n    <!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/4-white-text2.png\" full-src=\"/imagelib/uploads/4-white-text2.png\"></zooming-image>\r\n\t\t\t</media-group>-->\r\n  \r\n  <info-block emoji=\"&#x2728;\" header=\"Be descriptive when naming names\">\r\n\r\n    <p>Classes and IDs not only make it easier to style your code,\r\n    but also present a good opportunity to help with organization and\r\n    readability. They allow people (including you!)\r\n    to understand the purpose of each HTML element at a glance.\r\n    Give your classes and IDs descriptive names so you can come\r\n    back to them more easily when you need to modify them\r\n    again. Remember, classes and IDs are case-sensitive\u2013#header-text is different from #Header-Text.</p>\r\n  </info-block>\r\n</step-block>\r\n<!--\r\n<step-block header=\"Positions, everyone!\">\r\n  <p>Play around with the display and positioning of your\r\n  site&#39;s elements. The Box Model is a useful tool in\r\n  visualizing where things go.</p>\r\n\r\n  <lesson-ref ref=\"box-model\"></lesson-ref>\r\n</step-block>\r\n-->\r\n<step-block header=\"Making a nav bar\">\r\n  <p>What we\u2019ve done so far is nice and dandy, but your\r\n    website still doesn\u2019t look like a website. Let\u2019s change that.</p>\r\n  <h3>What we do</h3>\r\n  <p>You know what a navigation bar is, right? That thing at the top or\r\n  side of a website that gives you quick links to key pages on a\r\n  website. Let\u2019s make one of those.  Let\u2019s turn our unordered list of social media links into a navbar.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Navbars might seem complicated, but they\u2019re really just styled\r\n  lists. If you think about it, this makes sense&#8212;a nav bar is really just a bunch of links. Or a <em>list</em> of links.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>First, let\u2019s make this easier on our future selves by applying\r\n  a descriptive ID to our unordered list. Let\u2019s call it\r\n  &quot;navbar.&quot;</li>\r\n  <code-block>\r\n&lt;ul id=&#39;navbar&#39;&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                               \r\n</code-block>\r\n\r\n  <li>Now let\u2019s get rid of those ugly little bullets. In your CSS\r\n  document, target the <code>&lt;li&gt;</code>s nested in your\r\n  navbar ID and change the <code>list-style-type</code> to\r\n  none.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li{\r\n  list-style-type: none;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Next, we want our links to all be in a row instead of stacked\r\n  on top of each other. To change that, we\u2019ll affect the\r\n  <code>display</code> property.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li{\r\n  list-style-type: none\r\n  display: inline-block;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>The links seem a little too close to each other, so let\u2019s\r\n  adjust the width of their <code>&lt;a&gt;</code> elements. We\u2019re\r\n  adjusting the <code>&lt;a&gt;</code> tags rather than the\r\n  <code>&lt;li&gt;</code> because we want the user to be able to\r\n  click on the link from anywhere inside the box that holds the\r\n  link. We need the links to have a display value of\r\n  <code>block</code> in order for the width to apply to them,\r\n  however.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li a{\r\n  display: block;\r\n  width: 120px;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Great! Now let\u2019s center the text for the links inside their\r\n  boxes and provide some vertical padding.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li a{\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Something\u2019s still a bit off: the placement of our navbar right\r\n  now just doesn\u2019t make sense. Navbars are supposed to be at the\r\n  top of the page, but right now our <code>&lt;ul&gt;</code> is\r\n  buried. In your HTML file, move the <code>&lt;ul&gt;</code> tag\r\n  and its contents to the top of the body, above the\r\n  <code>&lt;div&gt;</code>.</li>\r\n\r\n  <li>Now when we refresh the page the position of the navbar makes\r\n  sense, although it still doesn\u2019t look quite right visually.\r\n  That\u2019s because of the top margin. The navbar has some top margin\r\n  by default, which is keeping it from going to the top of the\r\n  page. To fix that, change the display of the navbar to be\r\n  <code>inline-block</code> and get rid of the top margin.</li>\r\n  <code-block lang=\"css\">\r\n#navbar {\r\n  display: inline-block;\r\n  margin-top: 0;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>We want our navbar to stretch across the whole screen, so we\r\n  need to set its width to 100%. We also want it to be distinct\r\n  from the rest of the page, so we need to change its background\r\n  color as well. I\u2019ll be changing mine to\r\n  <code>darkslategray</code>, but you can pick whatever value you\r\n  want (try playing around with RGB or even hex values if you\u2019re\r\n  feeling adventurous).</li>\r\n  <code-block lang=\"css\">\r\n#navbar {\r\n  width: 100%;\r\n  background-color: darkslategray;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>At this point you might also want to change the color of the\r\n  links inside your navbar if the default blue is hard to see\r\n  against your background. Experiment with different\r\n  <code>font-family</code>, <code>color</code>, and other values\r\n  and find a combination you like. That\u2019s the fun with styling: you\r\n  can make it anything you want. Like literally almost\r\n  anything.</li>\r\n  \r\n  <li>Wait a minute. Notice how the contents of your website hovers a few pixels away from the top right corner of the screen? That's the online equivalent of \"I'm not touching you!\" Luckily, it's an easy fix&#8212;all you need to do is to tell your browser to not put a margin or any padding on your website, using this code:</li>\r\n\r\n    <code-block lang=\"css\">\r\nbody {\r\n  margin: 0 0 0 0;\r\n  padding: 0 0 0 0;\r\n}\r\n                               \r\n</code-block>\r\n  \r\n  <li>Our navbar is almost complete! But there\u2019s just one more thing\r\n  that would really seal the deal: user feedback. It would be cool\r\n  if we could change something on the screen so that whenever a\r\n  user hovered over a link they could be sure of what they were\r\n  doing.</li>\r\n\r\n  <li>Guess what? You can do that with CSS. We\u2019ve already covered a\r\n  few <glossary-term>selectors</glossary-term>, but there are so many more useful selectors that\r\n  can be applied in a variety of ways. One kind of selector is the\r\n  a &quot;pseudo-class&quot; which uses a colon (:) to select an\r\n  element which has a certain property. For example, if we wanted\r\n  to change the color of links that had already been visited, we\r\n  would target <code>a:visited</code> in our CSS. For our navbar,\r\n  we can respond to users by changing the background color of the\r\n  links they\u2019re hovering over. We\u2019ll use the <code>a:hover</code>\r\n  selector for that.</li>\r\n  <code-block>\r\n#navbar li a:hover{\r\n  background-color: black;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Try it out! There are more useful selectors just like\r\n  <code>:hover</code> and <code>:visited</code>, and being familiar\r\n  with them can make your life a whole lot easier and make your\r\n  website that much more versatile.</li>\r\n  </ol>\r\n  </step-block>\r\n  <lesson-block header=\"Useful selectors\">\r\n\r\n    <dl>\r\n      <dt>\r\n        <code>.element {</code>\r\n        </dt>\r\n\r\n        <dd>The period allows you to select classes, which is very\r\n        useful for styling multiple elements at once</dd>\r\n     \r\n\r\n      <dt>\r\n        <code>#element {</code>\r\n        </dt>\r\n\r\n        <dd>Like the class selector, a pound sign allows you to\r\n        select an element based on its unique ID</dd>\r\n\r\n      <dt>\r\n        <code>element:hover {</code>\r\n        </dt>\r\n\r\n        <dd>The hover pseudo-class will apply rules to an element\r\n        once it sees a mouse hovering over it, and is extremely\r\n        useful in a wide range of applications</dd>\r\n\r\n      <dt>\r\n        <code>element[attr=&#39;val&#39;] {</code>\r\n        </dt>\r\n\r\n        <dd>This selector will only select instances of the element\r\n        which have <code>val</code> as the value for a given\r\n        attribute. For example, if you wanted to target all links\r\n        on your page that went to twitter.com, you\u2019d simply type\r\n        <code>a[href=\u2019twitter.com\u2019]</code></dd>\r\n\r\n      <dt>\r\n        <code>* {</code>\r\n        </dt>\r\n\r\n        <dd>The asterisk character by itself will select all\r\n        elements on the page, which can be useful if you want to\r\n        apply some common rules like zeroing margins and paddings.\r\n        The asterisk can also be used to select all children of an\r\n        element like so: <code>div * {...}</code>, but this isn\u2019t\r\n        very commonly used</dd>\r\n\r\n      <dt>\r\n        <code>element-a element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Putting a space between two elements will select all\r\n        instances of element-b on the page that are descendants of\r\n        an element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a, element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Adding a comma to separate elements rather than a space\r\n        applied the same rules to both elements. It\u2019s basically\r\n        just shorthand for <code>element-a { \u2026 } element-b { \u2026\r\n        }</code></dd>\r\n\r\n      <dt>\r\n        <code>element-a &gt; element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Putting a greater-than sign between two elements is\r\n        similar to leaving a space in between, but now will only\r\n        target instances of element-b that are children, or direct\r\n        descendants, of element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a ~ element-b {</code>\r\n        </dt>\r\n\r\n        <dd>This selector will target all instances of element-b\r\n        that are siblings (that is, they share the same parent) of\r\n        an element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a + element-b {</code>\r\n        </dt>\r\n\r\n        <dd>The plus selector is similar to the tilde in that it\r\n        also selects siblings, but now will only select instances\r\n        of element-b that appear immediately after element-a</dd>\r\n\r\n      <dt>\r\n        <code>element:before { , element:after {</code>\r\n        </dt>\r\n\r\n        <dd>The <code>:before</code> and <code>:after</code> pseudo\r\n        selectors can be used to modify the space immediately\r\n        before or after your element, and have been used in a wide\r\n        variety of applications, most notably the <a href=\r\n        \"http://stackoverflow.com/questions/8554043/what-is-clearfix\">\r\n        clearfix hack</a></dd>\r\n    </dl>\r\n  </lesson-block>\r\n\r\n<lesson-block header=\"Style Guided\">\r\n  <p>That ... was a lot. We hope we\u2019ve demystified the\r\n  process for you. Creating websites isn\u2019t magic&#8212;it\u2019s just\r\n  combining different CSS properties and values with the structure of your\r\n  HTML in a specific way. Once you get the hang of it, you\u2019ll be\r\n  surprised to see the things you can do with pure CSS, like make an\r\n  entire functioning <a href=\r\n  \"http://codepen.io/ziga-miklic/pen/Fagmh\" target=\"_blank\">tic-tac-toe\r\n  game</a>.</p>\r\n  <p>Here's your <strong>code summary</strong>. Enjoy!</p>\r\n\r\n    <code-block lang=\"css\">\r\nbody {\r\n  background-color: beige;\r\n  margin: 0 0 0 0;\r\n  padding: 0 0 0 0;\r\n}\r\n\r\ndiv {\r\n  background-color: firebrick;\r\n}\r\n\r\n.white-text {\r\n  color: white;\r\n}\r\n\r\n#gray-text {\r\n  color: gray;\r\n}\r\n\r\n#navbar {\r\n  margin-top: 0;\r\n  background-color: darkslategray;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#navbar li {\r\n  list-style-type: none;\r\n  display: inline-block;\r\n}\r\n\r\n#navbar li a {\r\n  display: block;\r\n  width: 120px;\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  color: white;\r\n  font-family: sans-serif;\r\n}\r\n\r\n#navbar li a:hover {\r\n  background-color: black;\r\n}\r\n                       \r\n</code-block>\r\n</lesson-block>\r\n",
    "status": "published"
  }
},
{
  "pk": 1,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "Learn the basics of web development, from idea to polished product: how to wrap your content in HTML, to style it with CSS, and publish it online.",
    "slug": "create-basic-website",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Create a Basic Website",
    "content": "<narrative-text>\r\n  <p>This collection pulls together the info you'll need to get a basic website up and running: getting your machine ready, designing an amazing site, easing into a logical workflow, and of course, all the thrills and spills of learning the best of the basic web&#8212;HTML and CSS.</p>\r\n\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you should download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref=\"ftp-program\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Getting organized: Boring but essential logistics\">\r\n  <p>Setting up a work environment might seem like a hassle, but trust us&#8212;it will save you headaches down the road. Websites are essentially just a collection of files, so being organized will help prevent errors later on.</p>\r\n\r\n  <h3>What we do</h3>\r\n  <p>We're setting up a dedicated spot on your machine for all the files you'll create: your technical docs, as well as images, videos, or other assets you're going to display.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Putting those files in organized folders\r\n    enables us to give the browser exact directions to the\r\n    locations of those files. So, no search or spotlight\r\n    allowed&#8212;know where your files are so you can send the browser\r\n    down the right path. Broken paths, missing files, or imprecise\r\n    directions are common reasons things break. Ever seen a 404\r\n    message? That\u2019s why!</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Create a new folder somewhere easy, like your desktop.</li>\r\n    <li>Give it a name with no spaces or caps.</li>\r\n    <li>Open up your text editor (probably Sublime if you're following along) and go to file > new.</li>\r\n    <li>Then save it in your new folder as <code>index.html</code>. You <em>must</em> include the file extension! This is our first signal to the browser about what we'll be doing in here.</li>\r\n    <li>Head into your browser of choice (Chrome, cough cough), go to file > open, and select the file we just made.</li>\r\n    <li>Take a look at your beautiful website? ... Jk there's nothing there. That's good. Proceed!</li>\r\n  </ol>\r\n\t\t\t<!--<media-group class=\"layout horizontal around-justified\">\r\n\t\t\t\t<zooming-image src=\"/imagelib/uploads/1.gif\" full-src=\"/imagelib/uploads/1.gif\"></zooming-image>\r\n\t\t\t</media-group> -->\r\n\r\n  <info-block header=\"Danger, danger! When moving files ...\" emoji=\"&#x1F47F;\">\r\n    <p>If you're ever going to move your files around, make sure to close out of your text editor while you do. Poor Sublime will keep editing the old doc, and will keep saving it in the old place. Once again: close Sublime, move files, reopen to edit in Sublime.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n\r\n<step-block header=\"Write some HTML\">\r\n  <p>Ah, HTML. You've heard so much, and yet, know so little. Let us help. <glossary-term>HTML</glossary-term> is the backbone of the\r\n    web, and the beginning of any website. It's our way of telling the browser what's what&#8212;this is a paragraph, this is a list, this is an image of Steve Buscemi. Dive into this standalone lesson on HTML to see how it works and to put together your first page.</p>\r\n\r\n  <lesson-ref ref=\"write-some-html\"></lesson-ref>\r\n\r\n  <info-block header=\"Did you know ...\" emoji=\"&#x1F419;\">\r\n    <p>Beginners often think they're stumbling with CSS and JavaScript, but the culprit is actually HTML. Make sure you spend some time really understanding the <glossary-term>DOM</glossary-term> and bulletproofing your HTML before diving too deep elsewhere. (Or at least return to it when you hit problems.)</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<lesson-block>\r\n  <h2>Workflow: We learned it the hard way</h2>\r\n  <h3>Here\u2019s the sad truth: When things go south, it\u2019s always your\r\n  fault.</h3>\r\n  <p>At least when it comes to building websites. We can\u2019t\r\n  vouch for that thing with your ex. More than likely, the page is not\r\n    <em>just acting crazy</em>. It\u2019s acting crazy because you <em>told</em> it to act\r\n  crazy. So here\u2019s a strategy to help you cut down on the amount of\r\n  time you spend troubleshooting.</p>\r\n\r\n  <p><strong>Change, save, refresh, check.</strong></p>\r\n    <p>If you make a lot of changes and then notice things are\r\n    broken, it\u2019s tough to tell what exactly broke, and when. So\r\n      <strong>work in very small bursts</strong>. Check the results frequently. Then,\r\n    when something breaks, you know where things went wrong&#8212;it\u2019s what you just did.</p>\r\n\r\n    <ul>\r\n      <li><strong>Change</strong> something in your HTML and/or CSS\r\n      documents.</li>\r\n\r\n      <li><strong>Save</strong> every file you touched.</li>\r\n\r\n      <li><strong>Refresh</strong> in your browser.</li>\r\n\r\n      <li><strong>Check</strong> to make sure you\u2019re seeing what\r\n      you want to.</li>\r\n    </ul>\r\n</lesson-block>\r\n\r\n<step-block header=\"Prepare for CSS\" id=\"prepareCSS\">\r\n  <p>Just like we did with HTML, we've got to get our files hooked up and running before we can start to style our pages in earnest. That's right&#8212;we're about to finally take the semantically beautiful but ultimately ugly HTML we've written and apply some style to it. First, though, the prep:</p>\r\n  <h3>What we do</h3>\r\n  <p>We're creating a <glossary-term>stylesheet</glossary-term> for our website and linking it to our HTML file. </p>\r\n\r\n  <h3>Why we do</h3>\r\n    <p>CSS is a critical piece of any site&#8212;it's the beautiful part. Without this link, our browser would never know that these styles are associated with this site (aka this HTML file). Once we're done, when the browser reads our HTML file, it will see this link, fetch our styles, and apply them to the site. Good browser. Here's a treat.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Create a new file in your text editor by going to file > new.</li>\r\n    <li>Save it in your site folder as <code>style.css</code>. Don't forget the extension!</li>\r\n    <li>To tell your site where it can find your stylesheet, link to\r\n      it in the <code>&lt;head&gt;</code> of your HTML document.</li>\r\n  </ol>  \r\n  <code-block>\r\n&lt;head&gt;\r\n    &lt;link rel=&#39;stylesheet&#39; href=&#39;style.css&#39;&gt;\r\n&lt;/head&gt;\r\n                               \r\n</code-block>\r\n   \r\n</step-block>\r\n\r\n\r\n\r\n<step-block header=\"Write some CSS\">\r\n  <p>It's the moment we've all been waiting for. Time to dress up your HTML and make something people actually want to look at. The enabler here is <glossary-term>CSS</glossary-term>, aka Cascading Style Sheets, the governing documents for the look and feel of your site. It's a good bit bigger and more complicated than HTML, and with great power comes great responsibility, young Peter. Design wisely.</p>\r\n  <lesson-ref ref=\"write-some-css\"></lesson-ref>\r\n\r\n</step-block>\r\n<!--\r\n<lesson-block header=\"Good web design practices\">\r\n  <h3>Because there&#39;s a big difference between writing up some code and actually\r\n  designing a website.</h3>\r\n  <p>CSS is just the language that we use to implement style. If you're left wondering how to <em>choose</em> those styles and make something that looks a little more recent than the web circa 1998, check out our series on Good Web Design Practices. It'll walk you through the basics of design.</p>\r\n\r\n  <lesson-ref ref=\"good-web-design-practices\"></lesson-ref>\r\n</lesson-block>-->\r\n\r\n<step-block header=\"Publishing your site for all to see\">\r\n  <p>Thus far, we've just been building the site on your machine&#8212;which nobody can access, with good reason. (Hello, embarrasing search history from that time you got obsessed with you know what.) So to get your site out to the rest of the world, you've got to get a copy of your files onto a server that others can access. This means securing a\r\n  domain name (your URL) and hosting your files somewhere.</p>\r\n\r\n  <lesson-ref ref=\"intro-web-hosting\"></lesson-ref>\r\n\r\n  <info-block header=\"Did you know ... you got served?\" emoji=\"&#x1F44A;\">\r\n    <p>A server is a special computer dedicated to holding and serving up web\r\n    files. Every time you type a URL into your browser, it makes a request&#8212;several, actually&#8212;for your website's files. The server then sends them along and your browser (aka the client) assembles everything into the visual experience you know the web to be.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<lesson-block header=\"That's a wrap\">\r\n  <p>Now that your website is live, check it out! Click on all of\r\n  the links to make sure they\u2019re directing to the right places and\r\n  that all the images are showing. If you have to fix something,\r\n  change it on your computer, save, then re-upload the edited file\r\n  onto your hosting server. Did we say good job yet? No? Good\r\n  job!</p>\r\n</lesson-block>\r\n",
    "status": "published"
  }
},
{
  "pk": 12,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "Get out of your head in this lesson that will teach you all about the process of user testing and optimization.",
    "slug": "user-always-right",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "The User is Always Right",
    "content": "<narrative-text>\r\n  <p>In web design, usability looks at the ease of navigating a website to achieve a certain goal, such as looking up an image on Google or downloading a resume from an online portfolio.</p>\r\n\r\n  <p>Web designers use various user testing techniques before, during and after creating their websites to make sure they are as efficient and as easy to use as possible. After each round of testing, web designers collect the feedback they\u2019ve received and iterate their designs to solve any issues that come up.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>You&#39;ll need to get started</h2>\r\n\r\n  \r\n   <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n  \r\n</lesson-block>\r\n\r\n<step-block header=\"Got to test to be the best (like no one ever was)\">\r\n  <p>Ever realize you just have a lot of opinions? You might want to check out a focus group. Web designers create focus groups before starting a project so potential users can share their opinions about an idea for a product or service. It\u2019s useful for a quick overview of what they think about existing goods and services in the same field before you start actually building your own.</p>\r\n\r\n  <p>Remember what we said about iterating sketches of your prototype ideas? In addition to using a simple pen-and-paper approach, you can also use tools like <a href=\"https://popapp.in/\">Prototyping on Paper</a> or <a href=\"https://moqups.com/\">Moqups.com</a> to quickly build and test your designs.</p>\r\n\r\n  <p>You can even test your competitors\u2019 websites&#8212;if you\u2019re creating a website for a local bakery, look at the usability of the websites of other bakeries in the area. Ask people  who visit the site what they like and/or dislike about it. What\u2019s missing? What could they do without?</p>\r\n  \r\n  <p>So when should you start doing the whole user testing thing? As soon as possible, because creating websites that respond to people\u2019s needs means listening to all the feedback you can get.</p>\r\n  \r\n  <p>To start you off, here&#39;s a great video showing you how to do a task analysis test with a paper prototype.</p>\r\n  <iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/FS00UIo12Xk\" frameborder=\"0\"allowfullscreen=\"\"></iframe>\r\n</step-block>\r\n\r\n<step-block header=\"Just keep testing, just keep testing\">\r\n  <p>Web designers regularly test their websites because when you work on something for so long you become used to how it looks and functions. But strangers to the website can test your website with a fresh perspective and tell what works and what just doesn\u2019t.</p>\r\n\r\n  <p>Frequent tests with different kinds of users ensures you\u2019re always getting new feedback and that you have time to fix issues before they snowball into bigger ones. Testing 3-5 participants will show you just enough issues to fix before the next round of testing. Don\u2019t worry too much about finding participants only from your user base&#8212;people are going to end up finding your website anyway so anyone should be able to understand what the website is about and how it\u2019s supposed to work.</p>\r\n\r\n  <p>Ready for another round of task analyses? Check out this <a href=\"https://www.youtube.com/watch?v=QckIzHC99Xc\">video</a> by Steve Krug on conducting these tests using the website design you've built. You can even <a href=\"http://www.sensible.com/downloads-rsme.html\">download the script</a> he uses.</p>\r\n</step-block>\r\n\r\n<step-block header=\"What to do after usability testing\">\r\n  <p>So you've tested for usability and have a long list of things you need to fix. The next step is pretty straightforward; just prioritize the issues into categories of seriousness and work on them in that order.\r\n  <a href=\"http://www.usability.gov/how-to-and-tools/methods/reporting-usability-test-results.html\">Usability.gov</a> has a useful system, breaking things down into 3 main types:</p>\r\n    <blockquote><p><strong>Critical:</strong> If we do not fix this, users will not be able to complete the scenario</p>\r\n    <p><strong>Serious:</strong> Many users will be frustrated if we do not fix this; they may give up.</p>\r\n    <p><strong>Minor:</strong> Users are annoyed, but this does not keep them from completing the scenario. This should be revisited later.</p></blockquote>\r\n  <p>Now, all you have to do is brainstorm the best way of fixing the most serious issue, implement it and test it all over again with new users. Rinse and repeat.</p>\r\n  </step-block>\r\n\r\n  <step-block header=\"Common issues faced when user testing\">\r\n  <p>Usability testing is pretty straightforward when the user knows that you're testing your project and not them. Sometimes, participants don't give honest feedback because they're scared of looking dumb or they want to impress you. Others don't know the technical language to express their concerns, so they oversimplify their opinions. In any case, just make sure the participants are at ease, and they know that understanding their true feelings about the project is the very reason for the test.</p>\r\n</step-block>\r\n\r\n<step-block header=\"But wait, there's more!\">\r\n  <p>User testing doesn&#39;t stop once you&#39;ve launched your website. You can always continue to test it and collect feedback from people to ensure it&#39;s serving its purpose. Here are some ways to do just that:</p>\r\n<p><strong>Web Analytics:</strong> Use tools like <a href=\"http://www.google.com/analytics/\">Google Analytics</a> or <a href=\"https://statcounter.com/\">StatCounter</a> to see the breakdown in traffic to your website.</p>\r\n  <p><strong>Surveys:</strong> Short surveys can help users tell you more about their browsing experience, but beware; they can get really boring, really quickly.</p>\r\n</step-block>\r\n\r\n<step-block header=\"More resources!\">\r\n  <p>Here are some more cool links we found about usability:</p>\r\n  <ol>\r\n    <li><a href=\"http://usabilitygeek.com/an-introduction-to-website-usability-testing/\">Usability Geek</a></li>\r\n    <li><a href=\"http://mashable.com/2011/09/30/website-usability-tools/\">Mashable</a></li>\r\n    <li><a href=\"https://www.youtube.com/watch?v=1IwT2VD5CJo\">Task Analysis</a></li>\r\n  </ol>\r\n</step-block>\r\n",
    "status": "draft"
  }
},
{
  "pk": 11,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "\"Bad design is everywhere,\" the saying goes. But in this lesson, we'll make sure that happens no longer. Well, at least we can help prevent you from being a culprit. ",
    "slug": "intro-web-design",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Intro to Web Design",
    "content": "<narrative-text>\r\n  <p>Design isn\u2019t just how something looks. It\u2019s how it\r\n  <em>functions</em>. Websites are one of the most prominent\r\n  examples of this principle\u2014a pretty website is worthless if it\u2019s\r\n  broken, and a super functional website will drive people away if\r\n  it\u2019s hideous. But a well-designed, user-friendly website will\r\n  draw people in and encourage them to stay and actually\r\n  <em>use</em> it.</p>\r\n\r\n  <p>With that said, design involves a whole lot of components.\r\n  There are aesthetic choices, user-friendliness, responsiveness,\r\n  accessibility issues, and so on. These are all questions you\r\n  should be asking yourself as you build your website. It sounds\r\n  like a lot, but here we\u2019ll break it down for you, piece by\r\n  piece.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>You&#39;ll need to get started</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Find your purpose\">\r\n  <p>You know what your website\u2019s for. That\u2019s why you\u2019re building\r\n  it. But what about people who know nothing about you or your\r\n  website? A website\u2019s objective should be clear from the get-go,\r\n  even before reading any text. Think about who is going to be\r\n  seeing your website the most. Do you want it to be sleek and\r\n  professional? Or fun and colorful? For example, think of how you\r\n  would design a website for a consulting firm vs. a bakery (hint:\r\n  they\u2019re very different).</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image src=\r\n    \"http://winninginteractive.com/wp-content/uploads/2011/07/tsi_best_seo_company.png\">\r\n    </zooming-image>\r\n  </media-group>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image src=\r\n    \"http://netdna.webdesignerdepot.com/uploads/2013/02/Browns-Court-Bakery-20130205.jpg\"\r\n    full-src=\r\n    \"http://netdna.webdesignerdepot.com/uploads/2013/02/Browns-Court-Bakery-20130205.jpg\">\r\n    </zooming-image>\r\n  </media-group>\r\n\r\n  <p>Once you\u2019ve decided on an overall tone and purpose, take some\r\n  time to list out the information you want on your website. If\r\n  there\u2019s a paragraph of text you want to display, like an\r\n  introduction to yourself, think about where you want to put it.\r\n  Do you want it immediately visible, or closer to the bottom of\r\n  the page? It\u2019s a good practice to rank what you want to convey\r\n  from most to least important so that your website has a tight\r\n  focus.</p>\r\n</step-block>\r\n\r\n<step-block header=\"Proto-wha?\">\r\n  <p>Prototyping is your friend! Sketch out a few different layouts\r\n  of your website to see what it could look like. Iterate on those\r\n  sketches\u2014don\u2019t just go with the first thing that pops up in your\r\n  head. Your idea may be pretty, but think about how each component\r\n  of your site functions and how the user will interact with it\u2014but\r\n  we&#39;ll get deeper into that with user testing.</p>\r\n\r\n  <p>Put an image of what a prototype would look like here?</p>\r\n</step-block>\r\n\r\n<step-block header=\"Colors of the wind\">\r\n  <p>There\u2019s a lot to say about Color Theory, but we\u2019re just going\r\n  to give you the basics to make sure your website doesn\u2019t look\r\n  like it was built in the <a href=\r\n  \"http://www.warnerbros.com/archive/spacejam/movie/jam.htm\"\r\n  target=\"new\">late 1990\u2019s</a>. The main thing that you need to\r\n  know about Color Theory is that the user experience is going to\r\n  be affected by the color combinations you use.</p>\r\n\r\n  <info-block emoji=\"&#x2757;\" header=\"What&#39;s the meaning of all this?\">\r\n    <p>A picture is worth a thousand words, but how about a single\r\n    color? Turns out each color is associated with unique emotions,\r\n    imagery, and ideas, which will be very useful when thinking of\r\n    your website and personal brand. Just check out this <a href=\r\n    \"http://www.onelily.com/2012/02/01/color-matters-infographic/\"\r\n    target=\"new\">infographic</a> for an in-depth explanation on the\r\n    hidden meanings behind color.</p>\r\n\r\n    <h2>Not so black and white</h2>\r\n\r\n    <p>Combinations of contrasting colors such as black text on a\r\n    white background make the text easy to read (while the inverse,\r\n    white text on a black background, is quite hard on the eyes).\r\n    Contrasting colors also help users identify different parts of\r\n    your page; the dark blue navigation bar on Facebook is separate\r\n    from the light blue/grey background and the individual posts\r\n    that have a white background.</p>\r\n\r\n    <h2>Stick to the status quo</h2>\r\n\r\n    <p>Just as designers tend to stick to certain conventions such\r\n    as coloring and/or underlining hyperlinks, your website should\r\n    have a consistent color scheme. If you want to make a button\r\n    blue, make all of the buttons with similar functions the same\r\n    shade of blue unless there\u2019s a specific reason for it to be\r\n    orange. Consistency is comforting because it helps understand\r\n    and navigate a webpage, especially for users visiting your\r\n    website for the first time.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\r\n\"There&#39;s more to fonts than just Comic Sans\">\r\n  <p>Another design choice you&#39;ll have to make is what font to\r\n  use. Very few websites tend to go with the default Times New\r\n  Roman anymore, and you&#39;ll probably recognize a lot of\r\n  websites using simple sans serif fonts like Arial or Helvetica.\r\n  But there are hundreds and thousands of fonts in this world to\r\n  choose from, so take a few minutes (or hours) to browse through\r\n  some of them. Don&#39;t know where to start? Check out our\r\n  feature on <span style=\r\n  \"text-decoration: underline\">typography</span>.</p>\r\n</step-block>\r\n",
    "status": "draft"
  }
},
{
  "pk": 5,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "When your site is ready, you\u2019ll upload your files to your hosting server using a File Transfer Protocol (FTP) client. (We like Cyberduck and FileZilla.) Make sure that your files appear on your server the same way that they do in the site folder on your computer, or else your site may not work properly.",
    "slug": "intro-web-hosting",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Intro to Web Hosting",
    "content": "<narrative-text>\r\n  <p>So you&#39;ve written some code, and after opening those files\r\n  in your browser you are able to confirm that those files do\r\n  indeed make a website. You&#39;re super excited to show all your\r\n  friends and family, but how will other people see it? As of right\r\n  now, those files are just living in a folder on your computer and it&#39;s\r\n  not very practical to send all your website files to every person\r\n  who wants to see it.</p>\r\n\r\n  <p>What you need is a <glossary-term>server</glossary-term>, a special computer dedicated to\r\n  housing your files and making sure that people can get\r\n  them with a few keystrokes. In this lesson, we'll walk you through getting a URL, finding a hosting server, and publishing your site.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you'll need to download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"ftp-program\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n\r\n<step-block header=\"Purchase a domain name\">\r\n  <h3>What we do</h3>\r\n  <p>We're getting you the URL of your dreams. Maybe. If it's still available.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Every address on the web needs to be unique&#8212;that way users are sure they're getting the bona fide content they're looking for, and not a different site every time they request the same URL.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>First, search for a domain name to see if it's\r\n  available.\r\n  Here are five popular services that offer domain\r\n  names:\r\n\r\n  <ul>\r\n    <li><a href=\"https://www.namecheap.com/\" target=\"_blank\">NameCheap</a></li>\r\n\r\n    <li><a href=\"https://www.hover.com/\" target=\"_blank\">Hover</a></li>\r\n\r\n    <li><a href=\"https://domains.google.com\" target=\"_blank\">Google Domains</a>\t</li>\r\n   \r\n\r\n    <li><a href=\"http://www.1and1.com/\" target=\"_blank\">1&amp;1</a></li>\r\n\r\n    <li><a href=\"https://www.godaddy.com/\" target=\"_blank\">GoDaddy</a></li>\r\n  </ul>\r\n  </li>\r\n    \r\n<li>Once you've got something good, pay up. You're purchasing ownership on a monthly or yearly basis. And you're buying the rights to the name&#8212;nothing more.</li>\r\n  \r\n  </ol>\r\n  </step-block>\r\n  <lesson-block header=\"Additional services\">\r\n    <p>These sites offer a lot of additional services that you\r\n    don\u2019t necessarily need. Don\u2019t be tricked into buying anything\r\n    you don\u2019t need just because they sound fancy&#8212;domain\r\n    registrars are businesses after all, and they\u2019re looking to\r\n    make money off of you. Here\u2019s a list of common features that\r\n    registrars often try to bundle with your domain. You can decide\r\n    for yourself whether it sounds like you need it.</p>\r\n\r\n    <dl>\r\n      <dt>Hosting</dt>\r\n\r\n        <dd>For a simple website, like a portfolio site or personal\r\n        webpage, using the domain registrar\u2019s hosting may be the\r\n        simplest option. As you go on to develop bigger, more\r\n        complex projects (especially those that require server-side\r\n        scripts), you\u2019ll probably want to look toward other hosting\r\n        options.</dd>\r\n\r\n      <dt>Local listing</dt>\r\n\r\n        <dd>Listing a site locally makes it easier to find a website\r\n        by putting it on search engines such as Yelp, GoogleMaps\r\n        and FourSquare. If your website is for a business, local\r\n        listing might be a good idea to attract new customers. It\u2019s\r\n        probably not your priority for a portfolio or personal\r\n        site, but that\u2019s up to you.</dd>\r\n\r\n      <dt>Private Email</dt>\r\n\r\n        <dd>Most domain registrars will offer email forwarding for\r\n        free, which allows you to forward all emails sent to a\r\n        specified address on your website to a pre-existing email\r\n        account. This keeps everything centralized, you can\r\n        continue to use whatever email provider you want, and you\r\n        don\u2019t have to pay a penny (or you shouldn\u2019t, at least. If\r\n        your domain registrar tries to make you pay for email\r\n        forwarding, try looking elsewhere).</dd>\r\n\r\n      <dt>Sub-domains</dt>\r\n\r\n        <dd>Sub-domains come before your main domain name, such as\r\n        shop.mydomain.com. These label different areas of your\r\n        website, like an online store or blog. Many domain\r\n        registrars allow you to register subdomains for free, but\r\n        you\u2019ll have to point or forward those domains to different\r\n        websites as well.</dd>\r\n\r\n      <dt>Positive SSL</dt>\r\n\r\n        <dd>SSL, or Secure Sockets Layer, is the difference between\r\n        http and https in front of a website\u2019s URL. It&#39;s a way\r\n        of encrypting websites so that everything sent between a\r\n        client and the server your website is hosted on can\u2019t be\r\n        intercepted. If you\u2019re collecting sensitive information on\r\n        your website, like credit card information, you should\r\n        invest in SSL.</dd>\r\n\r\n      <dt>Website forwarding</dt>\r\n\r\n        <dd>When you enter the URL www.newyorktimes.com into your browser, you're rerouted to the actual domain and website,\r\n        www.nytimes.com. This is website forwarding. Forwarding ensures that commonly mistaken URLs will automatically go to the correct\r\n        one, rather than giving the user a wrong or nonexistent\r\n        page. Website forwarding is a good idea as your brand\r\n        expands, especially if you are known by different names\r\n        (such as an acronym). The kicker is, of course that you\u2019ll have to\r\n        purchase those other domains as well.</dd>\r\n\r\n      <dt>WhoisGuard</dt>\r\n\r\n        <dd>When you register a domain, you have to provide certain\r\n        details about yourself, like your name and email address.\r\n        This information is public and can easily be accessed by\r\n        spammers through sites like who.is. WhoisGuard is a company\r\n        that masks your personal information with their\r\n        information, protecting you from spam.</dd>\r\n    </dl>\r\n  </lesson-block>\r\n\r\n<step-block header=\"Purchase a hosting server\">\r\n  <h3>What we do</h3>\r\n  <p>A server hosts your website so that it is available and\r\n  accessible on the Internet.</p>\r\n  <h3>Why we do</h3>\r\n  <p>These companies allow you, the client, to lease out space to publish your site onto the web on a monthly basis.</p>\r\n  <h3>How we do</h3>\r\n  <p>Servers work by uploading your files using a <glossary-term>File Transfer Protocol (FTP)</glossary-term> client so that all your code, images, and other files are readily accessible to each other.</p>\r\n\r\n  <info-block emoji=\"&#x1F46E;\" header=\"The host with the most\">\r\n    <p>Depending on the size of your website, you may have to sort\r\n    through which hosting server is the best option for you. Most\r\n    free hosting servers have limited services, will put ads on your site, and cannot host complex or large sites. Plus: virtually no customer service, since you're not a paying customer.</p>\r\n  </info-block>\r\n\r\n  <p>There are also free solutions to web hosting. One popular\r\n  option is <a href=\"https://pages.github.com/\">GitHub Pages</a>, which is perfect for hosting a one-page,\r\n  static website like a personal website or a landing page. While\r\n  you won\u2019t have access to a server and therefore won\u2019t be able to\r\n  run any sort of server-side processes, it should be enough for a\r\n  simple website. You can even set up your domain to point to your\r\n  GitHub Page and mask the <glossary-term>DNS</glossary-term> to show your domain name.</p>\r\n</step-block>\r\n\r\n<step-block header='Connect your hosting server to your domain'>\r\n  <p>Once you\u2019ve registered your domain name and purchased a\r\n  hosting server, you will need to link the two in order for the\r\n  URL to direct to the correct website. Most registrars lay out a\r\n  clear process in connecting the domain name with the host, but in\r\n  general you\u2019ll just be pointing your domain name as the address\r\n  to the IP address of the server where your files will be\r\n  hosted.</p>\r\n</step-block>\r\n\r\n\r\n<step-block header='Connect to your host server'>\r\n  <p>In these steps, we\u2019ll be assuming here that you\u2019ll be logging\r\n  into your server using SFTP, but if that\u2019s not the case, you\r\n  should look up a guide for whatever protocol you have on your\r\n  server.</p>\r\n\r\n  <p>In FileZilla, open the Site Manager by going to File &gt; Site\r\n  Manager. This should bring up a window with a bunch of fields for\r\n  you to fill out. The only things you need to make sure you have\r\n  are the host (which is the IP address of the server you\u2019re\r\n  connecting to), the protocol, the logon type (which should be\r\n  normal), and the user and password fields to your account. After\r\n  filling out those fields, move over to the \u201cAdvanced\u201d tab and in\r\n  the Default remote directory field enter \u201c/var/www/html.\u201d This\r\n  will just make it easier for you to get to the directory where\r\n  you\u2019ll be uploading your files. From here, you should be able to\r\n  log in.</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"filezilla-login\"></zooming-image>\r\n  </media-group>\r\n\r\n  <p>In Cyberduck, when you launch the application for the first\r\n  time you should see a set of pre-loaded bookmarks. You can go\r\n  ahead and delete those \u2013 you\u2019ll be adding your own bookmarks\r\n  soon. Right-click on the screen and create a new bookmark, and\r\n  you\u2019ll be prompted to enter the information necessary to connect\r\n  with the server. Fill out everything at the top of the screen,\r\n  making sure not to check \u201cAnonymous Login,\u201d and then click \u201cMore\r\n  Options.\u201d In the \u201cPath\u201d field, enter \u201c/var/www/html.\u201d This will\r\n  just make it easier for you to get to the directory where you\u2019ll\r\n  be uploading your files. Once you\u2019ve done that, close out of that\r\n  window and double-click on the bookmark you just made. Enter your\r\n  password to connect to your server, and you should be in!</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"cyberduck-login\"></zooming-image>\r\n  </media-group>\r\n</step-block>\r\n\r\n<step-block header='Transfer files to your host server'>\r\n  <p>Once logged into FileZilla, you should have six windows: one\r\n  on top, four in a two-by-two layout in the middle, and one on the\r\n  bottom. The top window (1) is where you\u2019ll get status reports on\r\n  your connections to the server. The middle left windows (2, 4)\r\n  are your local directory \u2013 they\u2019re the files sitting on your\r\n  computer. Then your middle right windows (3, 5) will have the\r\n  directory for your server. The bottom window (6) has useful\r\n  information about any files you have waiting to be uploaded and\r\n  their status. To upload your files, simply locate them on your\r\n  computer in the left middle bottom pane and then drag them over\r\n  to the right middle bottom pane. Make sure that you upload your\r\n  HTML file as well as any important other files (CSS, images,\r\n  etc.) into this folder exactly as it appears on your\r\n  computer.</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"filezilla-windows\"></zooming-image>\r\n  </media-group>\r\n\r\n  <p>In Cyberduck, once you\u2019ve connected to your host server it\r\n  should direct you to a new screen. Make sure that you\u2019re in the\r\n  /var/www/html directory, and from here you can just drag and drop\r\n  your files from your computer into Cyberduck. Voila! That\u2019s\r\n  it!</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"cyberduck-windows\"></zooming-image>\r\n  </media-group>\r\n</step-block>\r\n\r\n<step-block header='Check out your site'>\r\n  <p>Now that your website is live, check it out! Make sure to\r\n  click on all of the links to make sure that they are directing to\r\n  the right places and that all the images are showing. If you have\r\n  to fix anything, be sure to re-upload the edited file onto your\r\n  hosting server.</p>\r\n</step-block>\r\n",
    "status": "published"
  }
},
{
  "pk": 9,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "\"What's the difference between a good website and a bad website?\" You may be wondering. Web design isn't just about how it looks but also about how it functions. It's time to start looking at ways to make your website reach its full potential.",
    "slug": "good-web-design-practices",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Good Web Design Practices",
    "content": "<narrative-text>\r\n    <p>\r\n        At this point, you\u2019re starting to feel comfortable with HTML and CSS. You even have a basic webpage with a couple paragraphs of text and a nav bar! But \u2026 It\u2019s falling a little flat in the design department. Your site looks nothing like the awesome one you imagined in your head when you began this course.</p>\r\n<p>Don\u2019t worry though, we\u2019re just getting started. Let\u2019s build a clean and simple portfolio website to show off everything you\u2019ve accomplished.\r\n    </p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n<h2>\r\n    You'll need to get started\r\n</h2>\r\n<unit-group>\r\n        <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n        <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n</unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Intro to Web Design\">\r\n    <p>Design isn\u2019t just how something looks. It\u2019s how it <em>functions</em>. Websites are one of the most prominent examples of this principls&#8212;a pretty website is worthless if it\u2019s broken and a super functional website will drive people away if it\u2019s hideous. But a well-designed, user-friendly website will draw people in and encourage them to stay and actually <em>use</em> it.</p>\r\n<p>With that said, design involves a whole lot of components. There are 4 main aspects; visual appeal and organization, responsiveness, accessibility and user-friendliness. These are all questions you should be asking yourself as you build your website. It sounds like a lot, but here we\u2019ll break it down for you, piece by piece.</p>\r\n    <lesson-ref ref=\"intro-web-design\"></lesson-ref>\r\n</step-block>\r\n\r\n<step-block header=\"Create a responsive website\">\r\n    <p>You\u2019ve probably seen websites that direct you to a completely different site if you\u2019re visiting on a phone. You've probably even seen some that outright prevent you from accessing a website if you\u2019re on a mobile device. Both options are bad (the first requires two websites and double the editing for every change), the second option is definitely worse: people who want to access your site on mobile won\u2019t get anything at all.</p>\r\n<p>The better option is to create a responsive website&#8212;a single website that changes its layout and content automatically depending on the screen size and resolution&#8212;so everything stays centralized and neat.</p>\r\n    <lesson-ref ref=\"create-reponsive-website\"></lesson-ref>\r\n</step-block>\r\n\r\n<step-block header=\"Make it accessible\">\r\n    <p>By the end of the Create a Basic Website course, you\u2019ll have designed a sleek, responsive website that shows off the best of your abilities. But what if someone looking at your website has colorblindness and can\u2019t differentiate between differently colored text? Or what if they have limited motor skills and can\u2019t use a mouse or keyboard to explore your website?</p>\r\n<p>It\u2019s very important to make websites accessible to people of all abilities so that all users can get the most out of their Internet experience. It\u2019s also very easy to do so.</p>\r\n    <lesson-ref ref=\"make-it-accessible\"></lesson-ref>\r\n</step-block>\r\n\r\n<step-block header=\"The user is always right\">\r\n    <p>Websites become accessible, responsive and good-looking when they are built with the primary objective of usability. The more time you spend learning how to design web pages, the more you\u2019ll hear the phrase, \u201cYou are not your user.\u201d</p>\r\n<p>Basically, no matter how similar you think you are to your user base, you will never be able to predict exactly how other people with different habits and abilities will interact with your website. That's why we've put together this cool module with examples and resources to help you get the most out of user testing.</p>\r\n    <lesson-ref ref=\"user-always-right\"></lesson-ref>\r\n</step-block>",
    "status": "draft"
  }
},
{
  "pk": 2,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "HTML is the most widely used coding language on the Internet, so you'll need a strong grasp on it before you go any further.",
    "slug": "write-some-html",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Write Some HTML",
    "content": "<narrative-text>\r\n  <p>Every page on the Internet starts as a humble HTML file. HTML\r\n  (HyperText Markup Language) is the backbone of the web, and the\r\n  beginning of any website. In this standalone lesson, you&#39;ll\r\n  learn the basics of HTML and be on your way in creating a website.</p>\r\n</narrative-text>\r\n\r\n<lesson-block header=\"Before we begin, you'll need to download:\">\r\n    <unit-group>\r\n    <capsule-unit ref=\"text-editor\">\r\n    </capsule-unit>\r\n    <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"The Basics' Basics\">\r\n\r\n    <p>In the beginning, there was the word, and the word was !DOCTYPE. Only, it wasn't a word, it was an HTML tag. And it wasn't God, it was the <glossary-term>W3C</glossary-term>. In this section, we're going to look at the stuff that <strong>must be included</strong> in every HTML document. This first part is all about definitions and referrals: it tells the browser what's in the document and links to other crucial info.</p>\r\n  \r\n  <h3>What we do</h3>\r\n  <p>We're inserting the non-negotiable structure for every HTML document you'll ever put together, ever. You might as well save this somewhere easy because you'll need it again and again and again ...</p>\r\n  <h3>Why we do</h3>\r\n  <p>Without this first part, the browser has no idea what it's looking at. Many different file types make up a website&#8212;HTML, CSS, JS, data, images, etc.&#8212;so we have to identify them ourselves and give the browser its marching orders.</p>\r\n  <h3>How we do</h3>\r\n  <p>Open the index.html file in your text editor and paste in the following code. We're essentially dividing\r\n  our page into two sections: a browser-related information section\r\n  (the <code>&lt;head&gt;</code>), and our visible content (the\r\n  <code>&lt;body&gt;</code>).</p>\r\n  <code-block>\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n  &lt;head&gt;\r\n    &lt;meta charset=&quot;utf-8&quot;&gt;\r\n    &lt;title&gt;&lt;/title&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n  &lt;/body&gt;\r\n\r\n&lt;/html&gt;\r\n    \r\n</code-block>\r\n\r\n  \r\n \r\n</step-block>\r\n\r\n <lesson-block header=\"Break it down: The nitty gritty\">\r\n     <p>That wasn't you blindly cutting and pasting, was it? Please say no. Let&#39;s go over each\r\n  one:</p>\r\n   \r\n  <dl>\r\n      <dt><code>&lt;!DOCTYPE html&gt;</code></dt>\r\n      <dd>\r\n        <p>Tells the browser that this is an <glossary-term>HTML5</glossary-term> document.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;html lang=\"en\"&gt; ... &lt;/html&gt;</code></dt>\r\n      <dd>\r\n        <p>Announces to the browser that anything in between\r\n      them is HTML, and that the webpage is in English.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;head&gt;</code></dt>\r\n      <dd>\r\n        <p>Head elements go in between these tags, including the title\r\n      of the webpage and links to stylesheets or scripts.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></dt>\r\n      <dd>\r\n        <p>A meta tag contains metadata&#8212;or, the data about your data. Whoa.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;body&gt;</code></dt>\r\n      <dd>\r\n        <p>The tag we've all been waiting for. This monster contains the content of the document: text, images, etc.</p>\r\n      </dd>\r\n\r\n   </dl>\r\n\r\n</lesson-block>\r\n\r\n\r\n<step-block header=\"Turning on the lights: Adding a title and some test content\">\r\n  \r\n  <h3>What we do</h3>\r\n  <p>We're adding our initial content to the page. First up is the <code>title</code>, and we'll throw in a paragraph for kicks.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Before you get carried away, it's good practice to make a couple of small changes to your document just so you know everything's up and running properly&#8212;that you're editing the right file, and that you're able to see those changes. If you <em>can't</em> see those changes, you know something is wrong with your workflow.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Edit the title of your web page by naming it inside the\r\n  <code>&lt;title&gt;</code> tags. Titles usually describe the\r\n  purpose of your webpage, and can be anything from your name to \u201cShrine to Steve Buscemi.\u201d</li>\r\n  <code-block>\r\n&lt;title&gt;[Your Name]\u2019s Personal Website&lt;/title&gt;\r\n                       \r\n</code-block>\r\n\r\n    <li>Inside the <code>&lt;body&gt;</code> tag, create a\r\n  <code>&lt;p&gt;</code> tag with your name (from here on,\r\n  we&#39;re going to be putting everything in the body unless we\r\n  specifically state otherwise). If you don\u2019t know your name,\r\n  that\u2019s okay too. A little-known fact is that Steve Buscemi\u2019s\r\n  entity is in the public domain, so anyone can assume his identity\r\n  without fear of copyright infringement.</li>\r\n  <code-block>\r\n&lt;body&gt;\r\n  &lt;p&gt;Your Name&lt;/p&gt;\r\n&lt;/body&gt;\r\n                               \r\n</code-block>\r\n  </ol>\r\n  <info-block emoji=\"&#x1F50E;\" header=\"Anatomy of a Tag\">\r\n    <p>Most HTML elements have an opening tag and a closing tag, which hold other tags or content. So unless you hear otherwise (<code>&lt;br&gt;</code> cough cough <code>&lt;img&gt;</code>), you'll need both the opener and the closer. Like so: <code>&lt;p&gt;Here are my thoughts.&lt;/p&gt;</code></p>\r\n</info-block>\r\n  \r\n</step-block>\r\n\r\n<step-block header='Picture perfect: Adding images' id=\"imgExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>The <code>img</code> tag instructs the browser to go fetch an image file&#8212;like a <glossary-term>JPG</glossary-term>, <glossary-term>PNG</glossary-term>, or <glossary-term>GIF</glossary-term>.</p>\r\n  <h3>Why we do</h3>\r\n  <p>The image tag is different from what we've seen so far. First, it's \"self-closing,\" meaning it does <strong>not</strong> have a partner closing tag like /img. It's also got a mandatory <glossary-term>attribute</glossary-term> called <code>src</code> that points to where the browser can find the image file.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Find an image to use. For now, grab something that has a full URL&#8212;something on the web, not on your machine.</li>\r\n<info-block header=\"Don't know how to get an image's URL?\" emoji=\"&#x2754;\">\r\n  <p>When you right-click on an image online, you should see a menu pop up. Look for language like \"Copy Image URL\". Select that option, and it should give you the exact web address for that image. If you want to double-check, feel free to paste it into your browser bar like you would any other URL.</p>\r\n    \r\n    </info-block>\r\n    <li>Using the self-closing <code>&lt;img&gt;</code> tag, insert an\r\n  image into the <code>&lt;body&gt;</code>. Paste the image URL as the source attribute for the\r\n  <code>&lt;img&gt;</code> tag.</li>\r\n  <code-block>\r\n&lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/a/aa/Steve_Buscemi_%281996%29.jpg&#39;&gt;\r\n  </code-block>\r\n  </ol>\r\n  \r\n  <info-block emoji=\"&#x270B;\" header=\"But what if I want to use an image on my computer?\">\r\n    <p>No problem. Simplify the name so it has no caps and spaces, like this: <code>stevie.jpg</code>. Make sure you put the image in the <em>same folder as your <code>index.html</code> file</em>. Then just put the image name instead of the url. So you'd have something like, <code>src=\"stevie.jpg\"</code>.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Listing things: Order and purpose matters\" id=\"listExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>If HTML is about being as <glossary-term>semantic</glossary-term> as possible, you'll realize that sometimes you want to mark off collections of similar things&#8212;a bunch of links that make up your navigation, icons that link to your social media accounts, or a series of definitions.</p>\r\n  <h3>Why we do</h3>\r\n  <p>We group these things together as \"lists.\" There are three major kinds: unordered lists, or <code>&lt;ul&gt;</code>; ordered lists, or <code>&lt;ol&gt;</code>, and definition lists, or <code>&lt;dt&gt;</code>.</p>\r\n  <p>Unordered means that order or sequence doesn't really matter. Ordered lists you'd notch off with 1, 2, 3 ... and definition lists pull together terms and definitions. It's kind of a specialized form of unordered lists.</p>\r\n  <h3>How we do</h3>  \r\n  <p>We're about to make an ordered list telling you how to do an unordered list. Whaaaaat.</p>\r\n  <ol>\r\n    <li>Create a list of your social media accounts with\r\n      the <code>&lt;ul&gt;</code> tag.</li>\r\n    <li>Each item is nested inside, and gets its own <code>&lt;li&gt;</code>\r\n    tag, which stands for <em>list item</em>.</li>\r\n  <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;Twitter&lt;/li&gt;\r\n  &lt;li&gt;Facebook&lt;/li&gt;\r\n  &lt;li&gt;LinkedIn&lt;/li&gt;\r\n  &lt;li&gt;Tumblr&lt;/li&gt;\r\n  &lt;li&gt;Email&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    <li>When you refresh your browser, you should see your list with a bunch of bullets setting each of these on a new line.</li>\r\n  </ol>\r\n<info-block emoji=\"&#x1F62D;\" header=\"Check Yourself Before You Wreck Yourself\">\r\n    <h4>Or, Check Yourself Before You Get Super Tangled Up in Your Own Code and No Longer Have a Clear Sense of Which Way is Up and then Spend Five Hours Debugging Only to Discover You Just Forgot to Close a Tag Somewhere.</h4>\r\n    <p>A good practice when building websites is to save and check\r\n    your work often. Take a moment now to save your code and open\r\n    your HTML file in the browser. (Or if it's already open, refresh.) Do this compulsively. If anything looks\r\n    off, look through your code again and make sure it matches the\r\n    examples.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Link it up\" id=\"linkExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>We're using the <code>&lt;a&gt;</code> tag to establish a link between words (or images) on our site to another URL. Aka, Gawker's bread and butter.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Linking things together is what the internet's all about! It puts the web in world wide web.</p>\r\n  <h3>How we do</h3>\r\n  <p>We're using another attribute here&#8212;<code>href</code>. This is for the URL we want to link to. The <code>&lt;a&gt;&lt;/a&gt;</code> tags go around the text or image you want to link up. So, <a href=\"http://www.homestarrunner.com/sbemail.html\" target=\"_blank\">this text</a>, for example, goes somewhere awesome.</p>\r\n  <ol>\r\n    <li>Let\u2019s go one level deeper with nesting. Using\r\n  <code>&lt;a&gt;</code> tags inside your <code>&lt;li&gt;</code>\r\n  tags, add links to send people directly to your social media\r\n  accounts.</li>\r\n  <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    <li>Head into your browser and refresh, then test each one of those links to make sure the page redirects to the right URL.</li>\r\n    <li>For kicks, add an extra attribute to one of these that tells the browser to open the link in a new window. That's the norm these days.</li>\r\n      <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39; target=&#39;_blank&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    \r\n    <info-block  emoji=\"&#x270B;\" header=\"What if I want to link to email or jump down the page?\">\r\n      <p>Great question. An email address just gets a URL of \"mailto:youraddress@yo.com\". For linking on the same page, it's a two-part system we'll get into later.</p>\r\n</info-block>\r\n\r\n</step-block>\r\n\r\n<lesson-block header=\"Tag 'n' Bag: Our Top 20\">\r\n\r\n    <p>There are a wide range of tags that serve a multitude of\r\n    purposes. For a complete list, see the list of tags at <a href=\r\n    \"http://www.w3schools.com/tags/\" target=\"_blank\">w3schools</a>. Some useful\r\n    tags in journalistic contexts include\r\n    <code>&lt;article&gt;</code>, <code>&lt;blockquote&gt;</code>,\r\n    and <code>&lt;cite&gt;</code>, among others. Don\u2019t worry about\r\n    memorizing them all&#8212;no one needs to know all the tags, and\r\n    they\u2019re all available for you to look up whenever you need it. You're BFFs with Google, right? That's sad, but we understand.</p>\r\n\r\n          <dl>\r\n            <dt><code>&lt;div&gt;</code></dt>\r\n              \r\n              <dd>Used for structure, typically as a generic way to identify a section off similar elements. You can <a href=\"#divExplainer\">read more about divs</a> in just a bit.</dd>\r\n            <dt><code>&lt;a&gt;</code></dt>\r\n              \r\n                      <dd><a href=\"#linkExplainer\">Adds links</a> to your text.</dd>\r\n            <dt><code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></dt>\r\n              \r\n              <dd><a href=\"http://www.w3schools.com/tags/tag_hn.asp\" target=\"_blank\">Headings!</a> Journalists take note: These are used for headlines, section heads, and the like. It signals content more important than the lowly paragraph, with <code>h1</code> being the most important and <code>h6</code> being the least. You can use them multiple times, with the exception of the superlative <code>h1</code>.</dd>\r\n            <dt><code>&lt;p&gt;</code></dt>\r\n              \r\n              <dd><a href=\"http://www.w3schools.com/tags/tag_p.asp\" target=\"_blank\">Paragraphs</a>, though people use them for general purpose things like bylines, as well.</dd>\r\n            <dt><code>&lt;img&gt;</code></dt>\r\n              \r\n              <dd>Tells the browser to retrieve and display an <a href=\"#imgExplainer\">image</a>.</dd>\r\n            <dt><code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code></dt>\r\n              \r\n              <dd>Create and populate an <a href=\"listExplainer\">unordered list</a>, most commonly used for navigation bars. Review that here.</dd>\r\n            <dt><code>&lt;form&gt;</code></dt>\r\n              \r\n              <dd>This bad boy creates a <a href=\"http://www.w3schools.com/tags/tag_form.asp\" target=\"_blank\">submittable form</a>. Submit to me, people of the internet.</dd>\r\n                      <dt><code>&lt;input&gt;</code></dt>\r\n              \r\n              <dd>Creates an element on the page for user input, and comes with <a href=\"http://www.w3schools.com/tags/tag_input.asp\" target=\"_blank\">a variety of types</a>.</dd>\r\n            <dt><code>&lt;button&gt;</code></dt>\r\n              \r\n              <dd>You guessed it, this <a href=\"http://www.w3schools.com/tags/tag_button.asp\" target=\"_blank\">makes a button</a> on the page. HTML is so hard!</dd>\r\n            <dt><code>&lt;span&gt;</code></dt>\r\n              \r\n              <dd>A quick way to <a href=\"http://www.w3schools.com/tags/tag_span.asp\" target=\"_blank\">wrap a few words</a> in a particular style. Just throw <code>&lt;span&gt;</code> around the words, add a class, and style it via CSS.</dd>\r\n            <dt><code>&lt;article&gt;</code></dt>\r\n              \r\n              <dd>This new HTML5 tag is for <a href=\"http://www.w3schools.com/tags/tag_article.asp\" target=\"_blank\">articles</a>. Could be useful for journalists.</dd>\r\n            <dt><code>&lt;figure&gt;</code></dt>\r\n              \r\n              <dd>This typically wraps around images, graphics, code samples ... think about a <a href=\"http://www.w3schools.com/tags/tag_figure.asp\" target=\"_blank\">\"figure\"</a> you might have seen in textbooks.</dd>\r\n            <dt><code>&lt;blockquote&gt;</code></dt>\r\n              \r\n              <dd>If you're <a href=\"http://www.w3schools.com/tags/tag_blockquote.asp\" target=\"_blank\">quoting</a> several sentences. Great for display text.</dd>\r\n            <dt><code>&lt;cite&gt;</code></dt>\r\n              \r\n              <dd>Use this tag to <a href=\"http://www.w3schools.com/tags/tag_cite.asp\" target=\"_blank\">cite</a> the title of a work, such as a film or a painting.</dd>\r\n            <dt><code>&lt;code&gt;</code></dt>\r\n              \r\n              <dd>This denotes a <a href=\"http://www.w3schools.com/tags/tag_code.asp\" target=\"_blank\">code snippet</a> appearing on the screen.\r\n              </dd>\r\n            <dt><code>&lt;section&gt;</code></dt>\r\n              \r\n              <dd>Used to break apart <a href=\"http://www.w3schools.com/tags/tag_section.asp\" target=\"_blank\">sections</a> of content, usually within an article.\r\n              </dd>\r\n            <dt><code>&lt;title&gt;</code></dt>\r\n              \r\n              <dd>Not to be confused with a headline! This <a href=\"http://www.w3schools.com/tags/tag_title.asp\" target=\"_blank\">names the page</a> for Google et al, and it typically appears at the top of the tab or window. This isn't something you style.</dd>\r\n            \r\n            <dt><code>&lt;link&gt;</code></dt>\r\n              \r\n              <dd>This links to another file&#8212;used mostly to <a href=\"http://www.w3schools.com/tags/tag_link.asp\" target=\"_blank\">link stylesheets</a> to the HTML document.</dd>\r\n            <dt><code>&lt;!&#8212;&#8212;...&#8212;&#8212;&gt;</code></dt>\r\n              \r\n              <dd>You can replace the ellipses here with <a href=\"http://www.w3schools.com/tags/tag_comment.asp\" target=\"_blank\">comments</a> that won't be displayed ... or to \"mute\" code that's not working to come back to later.</dd>\r\n          </dl>\r\n</lesson-block>\r\n\r\n<step-block header='Using a <div> to organize your content' id=\"divExplainer\">\r\n  \r\n  <h3>What we do</h3>\r\n   <p>HTML deals with two things: content and structure. All the\r\n    tags we\u2019ve seen so far deal with actual content, but there are\r\n    also some very useful tags that are used to structure your\r\n    HTML, like the <code>&lt;div&gt;</code> tag.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Thinking forward to <glossary-term>CSS</glossary-term>, you might want to group certain items together to make them look alike. In traditional layouts, for example, you might have a sidebar. And you want that sidebar to look different&#8212;and to appear in a different place&#8212;than your main bar. To be able to \"grab\" all of that content, you'd use a <code>&lt;div&gt;</code> tag and clump it all together. <em>These paragraphs, browser, are part of the sidebar. Treat them as a group, or block.</em></p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n  <li>Use a <code>&lt;div&gt;</code> tag to group all your\r\n  introductory material together. That\u2019ll include your\r\n  <code>&lt;h1&gt;</code>, <code>&lt;img&gt;</code>, and\r\n    <code>&lt;p&gt;</code> tags at the beginning of your body.</li>\r\n    <li>When\r\n  it\u2019s done it should look like this:</li>\r\n  <code-block>\r\n&lt;div&gt;\r\n  &lt;h1&gt;My Personal Website&lt;/h1&gt;\r\n  &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\r\n  &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\r\n&lt;/div&gt;\r\n                       \r\n</code-block>\r\n    \r\n  <li>If you refresh your page at this point, you\u2019ll notice that it\r\n  doesn\u2019t look any different than it did without the\r\n  <code>&lt;div&gt;</code> tag. And you\u2019re totally correct! While\r\n    adding <code>&lt;div&gt;</code>s don\u2019t <em>visually</em> affect the page\r\n  when applied (aside from creating a break if you added a\r\n  <code>&lt;div&gt;</code> within an inline element), they will\r\n  become extremely useful when it comes time to organize and style\r\n  your website. If you don\u2019t understand it 100 percent right now,\r\n  that\u2019s fine. Just trust us. We would never steer you wrong.</li>\r\n</step-block>\r\n\r\n<step-block header=\"That&#39;s all, folks\">\r\n  <p>And that&#39;s it! Review the index.html file in your browser\r\n  and make sure that everything is showing up. If something\r\n  isn&#39;t appearing, check your code to see if there are any\r\n  syntax errors or if you forgot to close any tags. Then bask in the glory of your fine work.</p>\r\n  <info-block emoji=\"&#x270B;\" header=\"Excuse me, nice try&#8212;but my website is very ugly.\">\r\n    <p>Oh, you noticed that too? Right&#8212;because HTML doesn't care about looking good. It's just markup. It says what is what and gets on with its life. You, however, still have work to do. Head back into the project to continue to CSS.</p>\r\n</info-block>\r\n\r\n</step-block>\r\n<lesson-block header=\"Code Summary\">\r\n\r\n    <code-block>\r\n&lt;!DOCTYPE HTML&gt;\r\n&lt;html lang=\"en\"&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=&#39;utf8&#39;&gt;\r\n    &lt;title&gt;My Personal Website&lt;/title&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    &lt;div&gt;\r\n      &lt;h1&gt;My Personal Website&lt;/h1&gt;\r\n      &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\r\n      &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\r\n    &lt;/div&gt;\r\n\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n                               \r\n</code-block>\r\n  \r\n</lesson-block>\r\n",
    "status": "published"
  }
},
{
  "pk": 14,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "In this lesson, you\u2019ll learn how to make interactive websites using the basics of JavaScript.",
    "slug": "write-some-javascript",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Write Some JavaScript",
    "content": "<narrative-text>\r\n  <p>If HTML defines the content and structure of webpages, and CSS specifies the visual layout, <em>JavaScript</em> adds behavior and interactions. It\u2019s the <glossary-term>programming language</glossary-term> of the web.</p>\r\n\r\n  <p>Without JS, the only interactions with our webpage would be to\r\n  click on hyperlinks or hover over things. How boring would that\r\n  be? Just a few things you can do with JavaScript: change HTML and\r\n  CSS on the fly, add animations, and validate form\r\n  submissions.</p>\r\n</narrative-text>\r\n\r\n<step-block header=\"Getting Set Up\">\r\n  <h3>What we do</h3>\r\n\r\n  <p>We\u2019re going to create a blank JavaScript file and add a link\r\n  to an HTML document that points to our JavaScript file.</p>\r\n\r\n  <h3>Why we do</h3>\r\n\r\n  <p>This is part of the basic set-up of your files. We\u2019re telling\r\n  the browser there\u2019s JavaScript at play here, kind of like you\r\n  might have done for CSS. Once you include the link, your\r\n  JavaScript will affect your webpage. Without it, the browser\r\n  would never know the file\u2019s there.</p>\r\n\r\n  <h3>How we do</h3>\r\n\r\n  <ol>\r\n    <li>Create a blank file called index.html in your project\r\n    directory. Check out the <a href=\r\n    \"https://learn.knightlab.com/lesson/write-some-html/\" target=\r\n    \"_blank\">HTML lesson</a> if you need a refresher on project\r\n    directories or the structure of a basic HTML file.\r\n    </li>\r\n\r\n    <li>Create a blank file called script.js in your project\r\n    directory.</li>\r\n\r\n    <li>Open the index.html file in your text editor, add your basic HTML structure, and then paste the following line right before the closing &lt;/body&gt; tag.</li>\r\n  </ol>\r\n  \r\n  <code-block>\r\n    &lt;body&gt;\r\n    \t...\r\n    \t&lt;script src=\"script.js\"&gt;&lt;/script&gt;\r\n   &lt;/body&gt;\r\n  </code-block>\r\n  \r\n  <info-block emoji=\"&#x270B;\" header=\"What's a program?\">\r\n    <p>A program is a list of instructions that you (the programmer) can write to tell a computer what to do to accomplish a specific task. This means you can tell the computer to do your bidding\u2014divide the check at dinner, send random GIFs to friends, or set a calendar countdown for the new Star Wars movie!</p>\r\n  </info-block>\r\n  \r\n  <h4>Test your connection</h4>\r\n  <p>Before we continue, let\u2019s make sure that we\u2019ve done our set-up properly. In your script.js file, add the following:</p>\r\n  <code-block>\r\n    alert(\u201cit lives!\u201d);\r\n  </code-block>\r\n  <p>Save the file and open index.html in a browser. If the script file is linked to index.html, you\u2019ll see a pop-up or alert box with the message \u201cit lives!\u201d\u2014that\u2019s what the alert function does! If you\u2019re not seeing it, just double check your file structure and make sure you don\u2019t have any typos.</p>\r\n\r\n  <info-block emoji=\"&#x270B;\" header=\"What's a function?\">\r\n    <p>Where a program is a list of instructions to a computer, a function is the named section of a program responsible for a certain task. You can think of functions as the bullet points making up the list of instructions of a program. Functions can be built-in (like the alert function in JavaScript), meaning that they\u2019re prewritten and part of the programming language you\u2019re writing in, or they can be custom, meaning you can write and name your own functions from scratch so that they do whatever you want.</p>\r\n  </info-block>\r\n\r\n</step-block>\r\n<step-block header=\"Understanding the Building Blocks of Programming Part 1: data types, writing your first script, and interacting with the browser\">\r\n  <h3>What we do</h3>\r\n  <p>Before we can do anything too fancy, we need to spend some time with the fundamentals. This means data types. We\u2019ll dive into different data types, walk through writing your first JavaScript file, and give you some tips for working in the browser.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>Data types are the building blocks of programming, and they\u2019re everywhere! Let\u2019s take the <a href=\"http://www.amazon.com/\" target=\"_blank\">Amazon homepage</a> as an example. Some of these elements are the same for everyone\u2014the menus, the items for sale. But some are specific to <em>you</em>\u2014your name, the number of items in your cart, etc. These are variables: little pieces of data stored away, and easily changed based on the user and her behavior.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>The three basic data types are:</p>\r\n  <ul>\r\n    <li>Strings (i.e. \u201cHello, Nicole\u201d) - a string is anything you put in between quotations \u201c\u201d and are typically used to represent text</li>\r\n    <br />\r\n    <img src=\"/imagelib/uploads/datatypes2.jpg\" style=\"width:100%;\" />\r\n    <p>If you\u2019re logged into your Amazon account, in the top right corner you\u2019ll see that your name is displayed as a <em>string.</em></p>\r\n    <li>Numbers (i.e. 6) - a number can be negative or positive</li>\r\n    <br />\r\n    <img src=\"/imagelib/uploads/datatypes1.jpg\" style=\"width:100%;\" />\r\n    <p>The shopping cart icon shows the <em>number</em> of items you currently have selected to purchase.</p>\r\n    <li>Booleans (i.e. true) - a boolean value represents logic and can only take one of two values: true or false</li>\r\n    <br />\r\n    <img src=\"/imagelib/uploads/datatypes3.jpg\" style=\"width:100%;\" />\r\n    <p>If you\u2019re a Prime user, the page shows a checklist of the Prime benefits. Each of these checked items represent a <em>boolean</em>. You\u2019ve either used the Prime benefits (Free Two-Day Shipping, Prime Video, Prime Music, Prime Photos, Kindle Owners\u2019 Lending Library) or not.</p>\r\n  </ul>\r\n  \r\n  <h4>Let's see them in action!</h4>\r\n  <ol>\r\n    <li>Open up your script.js file and replace the alert with the following, then save:</li>\r\n    <code-block>\r\n  console.log(\"hello world\");\r\n  console.log(123);\r\n  console.log(true);\r\n\t</code-block>\r\n    <li>Open your index.html file in a web browser.</li>\r\n    <li>You won\u2019t see anything on the page because you haven\u2019t added anything to the HTML document, but if you right click anywhere on the page and click \u201cInspect,\u201d a window pane will appear in your browser.</li>\r\n    <li>Click the \u201cconsole\u201d tab in that window and you\u2019ll see the following output:</li>\r\n    <code-block>\r\n  \"hello world\"\r\n  123\r\n  true\r\n\t</code-block>\r\n  </ol>\r\n  <p>If you get an error like \u201cUncaught SyntaxError: missing ) after argument list\u201d, retype the quotes around \u201chello world\u201d. Sometimes copying and pasting between different text editors messes up special characters like quotes.</p>\r\n</step-block>\r\n\r\n<step-block header=\"What's the console, and why am I logging?\">\r\n  <h3>What we do</h3>\r\n  \r\n  <p>The console is a powerful <glossary-term>developer tool</glossary-term> that helps debug websites and allows you to interact with the page directly in real time. This means you can check for mistakes and make sure everything is functioning the way you intended. The console usually comes up as a pane in your browser (you can also pop it out as a separate window) and is a place where you can enter JavaScript and have it interact with elements on your page, and within the context of all the HTML, CSS, and JavaScript that has already been loaded.</p>\r\n  <img src=\"/imagelib/uploads/inspector.png\" style=\"width:100%;\" />\r\n  \r\n  <h3>Why we do</h3>\r\n  \r\n  <p>Console.log comes in handy for <glossary-term>debugging</glossary-term>. Writing code that works on the first try is rare, so it's good to know how to debug and trouble-shoot your code. Your future self will thank you for learning to debug properly because it\u2019ll limit the amount of headbanging against your computer when things don\u2019t work as expected.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  \r\n  <p>Console.log is a built-in JavaScript function that \u201cprints\u201d to the console anything you put in its parentheses\u2014it \u201clogs\u201d things to the \u201cconsole\u201d (we said the thing!). The console is like the scribble test of a pen just to make sure that things are (1) working and (2) working in the intended way. In addition to using console.log() in your script files, you can also type directly into the console. You can think of the console like scratch paper. You use it to test out code before you commit it to your files, or to see what variables have what values.</p>\r\n  <p>To make sure that what we output to the console are indeed the right data types, we will use the \u201ctypeof\u201d function. This will output the data type of whatever we pass to it.</p>\r\n  <p>You can <glossary-term>comment</glossary-term> out the code you have so far in one of two ways\u2014this means that the browser will ignore those lines and will not execute that code:</p>\r\n  \r\n  <ol>\r\n    <li>Single-line comments i.e. // this is a comment</li>\r\n    <li>Multi-line comments i.e. /* multi-line comment */</li>\r\n  </ol>\r\n  \r\n  <p>Add the following code below the code you just commented out:</p>\r\n  <code-block>\r\n  console.log(typeof \"hello world\");\r\n  console.log(typeof 123);\r\n  console.log(typeof true);\r\n  </code-block>\r\n  \r\n  <p>When you open up the browser, you\u2019ll see the data types output in the console:</p>\r\n  <code-block>\r\n  \"string\"\r\n  \"number\"\r\n  \"boolean\"\r\n  </code-block>\r\n  \r\n  <p>You want to make sure that you\u2019re using the right data types so that you can take advantage of built-in JavaScript functions specific to those data types. For example, it\u2019s much easier to increase the number of items from 5 to 6 in your Amazon shopping cart rather than converting and overwriting a string representing the same information. (The character representing the number is not the same as the number. There\u2019s your deep thought for the day.)</p>\r\n</step-block>\r\n<step-block header=\"Understanding the Building Blocks of Programming Part 2: built-in JavaScript functions and comparing data\">\r\n  <h3>What we do</h3>\r\n  <p>Now that we know what data types we have to work with, we\u2019ll introduce handy built-in functions, as well as some basic logic in JavaScript.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>Besides data types, the other major component of programs is control flow, which determines the program\u2019s order of execution and what to do with those data types. This is important because programs do not always execute in a linear way. Take websites like Pinterest or Quora that only show limited posts to non-logged in users\u2014<glossary-term>control flow</glossary-term> decides what to show to logged in or non-logged in users. It jumps to and executes different parts of the program based on certain conditions or data values.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>There are additional built-in functions you can do to manipulate these data types. You can do math with numbers (which is also programming!). Just like in regular math, everything is evaluated in the order of operations. Add the following to your script file:</p>\r\n  \r\n  <code-block>\r\n  // addition\r\n  console.log(2+2);\r\n  // subtraction\r\n  console.log(2-5);\r\n  // division\r\n  console.log(8/2);\r\n  // multiplication\r\n  console.log(2*4);\r\n  // a new operator called \u201cmodulo\u201d which returns the remainder after the division of one number by another number - this is usually used to see if a number is divisible by another\r\n  console.log(9%2);\r\n  </code-block>\r\n  \r\n  <p>With strings, which are just sequences of characters wrapped in \u201c\u201d, you can use the following to return the length of the string (the number of characters):</p>\r\n  <code-block>\r\n    console.log(\"hello world\".length):\r\n  </code-block>\r\n  \r\n  <p>With booleans, you can use comparison operators to evaluate expressions to true or false (all booleans will eventually evaluate to either true or false):</p>\r\n  <ul>\r\n    <li>&gt; greater than</li>\r\n    <li>&lt; less than</li>\r\n    <li>== equal to (compares the values, but not the object types)</li>\r\n    <li>=== equal to (compares the values AND object types)</li>\r\n    <li>!== not equal to</li>\r\n    <li>&gt;= greater than or equal to</li>\r\n    <li>&lt;= less than or equal to</li>\r\n  </ul>\r\n  \r\n  <code-block>\r\n  console.log(100 &lt;= 5);\r\n  console.log(100 / 5 > 20 / 4);\r\n  console.log(-1 &lt; -5);\r\n  console.log(\u201chello world\u201d.length > 11);\r\n  console.log(2 * 2 !== 5);\r\n  console.log (5 % 3 === 1);\r\n  </code-block>\r\n</step-block>\r\n<step-block header=\"Understanding the Building Blocks of Programming Part 3: variables and scope\">\r\n  <h3>What we do</h3>\r\n  <p>We\u2019ll talk about different types of variables, how to use them, and some of the common errors you might run into when dealing with them.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>Variables work the same way as you probably learned in algebra (many, many years ago). They\u2019re ways of abstracting and storing data. Let\u2019s take the below example that calculates the remaining seats in an auditorium:</p>\r\n  <code-block>\r\n  var audience = 1000;\r\n  var seats = 2500;\r\n  var empty_seats = seats - audience;\r\n</code-block>\r\n  <p>Because you can assign and reassign values, variables are useful because they can basically be used for storing arbitrary information that can be reused or accessed throughout the program. The empty_seats variable will represent the right result even if we enter new values for the variables \u201caudience\u201d and \u201cseats.\u201d</p>\r\n  <p>Variables are usually given descriptive names in programs in order to clearly define their purpose. For example, in our above calculation, a variable <em>empty_seats</em> explains the value it stores better than a generically-named variable <em>x</em>.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>To help us keep track of things, variables are declared and can store data with the preceding word <em>var</em>. Unlike Michael Scott in The Office <a href=\"https://www.youtube.com/watch?v=HuGIgf-ICHM\" target=\"_blank\">declaring bankruptcy</a> (\u201cYou can\u2019t just say the word bankruptcy and expect anything to happen\u201d), declaring variables actually <em>does</em> make a difference.</p>\r\n  \r\n  <code-block>\r\n  console.log(bankruptcy);\r\n  // outputs: \u201cUncaught ReferenceError: bankruptcy is not defined\u201d meaning the variable has not been declared or defined\r\n  </code-block>\r\n  <p>This is the browser\u2019s way of saying \u201cI have no idea what \u2018bankruptcy\u2019 is\u201d because we never told the browser that it even existed, let alone what it means.</p>\r\n  \r\n  <code-block>\r\n  var bankruptcy;\r\n  console.log(bankruptcy);\r\n  // outputs: \u201cundefined\u201d meaning the variable has been declared but it has no value\r\n  </code-block>\r\n  <p>This is the browser's way of saying \u201cYou told me that bankruptcy is a thing but I don\u2019t know what it means.\u201d We can arbitrarily declare variables like this, but we did not assign it a value, which is why it outputs \u201cundefined.\u201d</p>\r\n  \r\n  <code-block>\r\n  var bankruptcy = \"I didn't say it. I declared it.\";\r\n  console.log(bankruptcy);\r\n  // outputs: \u201cI didn\u2019t say it. I declared it.\u201d\r\n  </code-block>\r\n  <p>Now that we\u2019ve told the browser that the variable \u201cbankruptcy\u201d exists and has a value, the browser returns what we expect: the string, \u201cI didn\u2019t say it. I declared it.\u201d</p>\r\n  \r\n  <p>We can also use, update, and change the variables just as we would the normal data type. If you\u2019re updating the variable, make sure that you\u2019re also saving it back to the same variable!</p>\r\n  <p>Let\u2019s increment the number of times Michael Scott has seen the movie The Devil Wears Prada (hint: it\u2019s a lot).</p>\r\n  \r\n  <code-block>\r\n  var movie_watches = 3;\r\n  console.log(movie_watches + 1);\r\n  // 4\r\n  console.log(movie_watches);\r\n  // 3 (we never updated the movie_watches variable by saving it back to the variable, so it stays 3)\r\n  movie_watches = movie_watches + 1;\r\n  console.log(movie_watches);\r\n  // 4 (now movie_watches has been updated to be 4 because we have saved it back to the variable)\r\n  movie_watches++;\r\n  // the ++ is shorthand for \u201cincrement this value by 1 and save the new value back to the same variable\u201d\r\n  console.log(movie_watches);\r\n  // 5\r\n  </code-block>\r\n  <info-block emoji=\"&#x270B;\" header=\"Why are there so many semicolons?\">\r\n    <p>Semicolons in JavaScript are kind of like the periods at the end of sentences. They separate and terminate each instruction. Check out <a href=\"https://www.codecademy.com/blog/78\" target=\"_blank\">Codecademy\u2019s blog</a> if you want to read more about the ins and outs of JavaScript semicolons, but a safe bet is to add a semicolon to the end of each line of JavaScript.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<lesson-block>\r\n  <h2>Types of Variables: Local vs. Global</h2>\r\n  <p>In JavaScript, variables can be local or global depending where they are declared. Local variables are declared inside functions (which we will talk about in a second), so they can only be accessed within that specific function. Global variables are declared outside of any function, which means they can be accessed (and updated) by any other functions.</p>\r\n  <p>To see this in action, copy and paste the follow in your JavaScript file and then open your console in Chrome.</p>\r\n  <code-block>\r\n  var localVarFunc = function() {\r\n    var local_var = \"hello from the other side\";\r\n    console.log(local_var);\r\n  };\r\n\r\n  var global_var = \"hello world\";\r\n  </code-block>\r\n  <p>If you try to type \u201cglobal_var\u201d in your console, you will see \u201chello world\u201d returned. If you do the same with \u201clocal_var\u201d in your console, you will see that it is not defined because it is inside a function. But if you call the function by typing \u201clocalVarFunc()\u201d in the console, you\u2019ll see \u201chello from the other side.\u201d This next section on functions will help solidify the difference between local and global scope.</p>\r\n</lesson-block>\r\n\r\n<step-block header=\"How will we function?\">\r\n  <h3>What we do</h3>\r\n  <p>We\u2019ll break down the parts of a JavaScript function, demonstrate its usefulness by writing a few of our own, and provide a few tips and tricks for writing good, clean code.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>JavaScript functions are self-contained chunks of programs that perform a specific function (haha get it?). They\u2019re blocks of code you can set aside until you need them\u2014some future, imagined functionality. Functions make programs more manageable and readable, and can be used again and again to accomplish the same task in many different situations.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>Functions, like variables, must be declared before they can be used, or <em>called</em>. Functions can take in values, known as <em>parameters</em>, and can return values. </p>\r\n  <p>A function has to be declared with a descriptive name, and all the code of the function goes inside the curly braces:</p>\r\n  <code-block>\r\n  function someFunction(param) {\r\n    // function code\r\n    // function code\r\n    // function code\r\n  };\r\n  </code-block>\r\n  \r\n  <p>Below is an example of a function that determines if a number is divisible by 2:</p>\r\n  <code-block>\r\n  function divisibleByTwo(num) {\r\n    var result;\r\n      if (num % 2 === 0) {\r\n        result = \"yes\";\r\n      } else {\r\n        result = \"no\";\r\n      }\r\n    return result;\r\n  };\r\n  </code-block>\r\n  \r\n  <p>This function determines if a number is divisible by the number 2 (we will dive more into if/else statements in the next part of this lesson). First, we declare the function by using the word \u201cfunction\u201d and giving it a name \u201cdivisibleByTwo.\u201d Function names should be descriptive about what they do. The function takes a parameter (num), meaning it expects some kind of input when it is called. This input num is then used inside the function to determine the result to be returned. If the number is divisible by 2 (if the remainder of the division of the number by 2 is 0, then it is divisible by 2), then the result is \u201cyes\u201d. Otherwise the result is \u201cno.\u201d We update the result variable accordingly, and finally return that result at the end of the function. Notice that we don\u2019t have any console.logs in this function. Let\u2019s see what that means.</p>\r\n  <p>To call (or use) a function, type the following the console:</p>\r\n  <code-block>\r\n    divisiblebyTwo(4);\r\n  </code-block>\r\n  <p>Alternatively you can add the following to your script.js:</p>\r\n  <code-block>\r\n  var result = divisibleByTwo(4);\r\n  console.log(result);\r\n  </code-block>\r\n  <p>This means you can either call functions on the fly once the page has loaded or call the function in the script file and store/output the result. If you simply had this line in your script file:</p>\r\n  <code-block>\r\n    divisiblebyTwo(4);\r\n  </code-block>\r\n  <p>you won\u2019t see anything in the console because in the original function, we don\u2019t use any console.logs. We only \u201creturn\u201d a result. That result exists, but it won\u2019t be visible to us until we console.log it as a variable or its equivalent console.log(divisibleByTwo(4)); As seen in the above example, we stored it in the variable \u201cresult\u201d and then logged it to the console.</p>\r\n  <info-block emoji=\"&#x270B;\" header=\"When should I write a function?\">\r\n    <p>A good principle in programming is DRY: Don\u2019t Repeat Yourself. If you find yourself copying and pasting code or repeating lines of code, you might want to break out that chunk into its own function. By abstracting and generalizing your code into various functions, they can be reused throughout your code because each component accomplishes a specific task. This will help you manage your code as your application get more and more complex.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"For the Love of Arrays\">\r\n  <h3>What we do</h3>\r\n  <p>We\u2019ll cover another important JavaScript data type: <em>arrays</em>. We\u2019ll also introduce <em>for loops</em> as a way of running the same portions of code multiple times.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>Arrays are useful ways of storing a bunch of related items together in a single variable. Think of them as a kind of list. This simplifies code\u2014one variable for a whole grocery list, instead of 20 variables for every kind of frozen pizza imaginable. Then you\u2019re able to execute the same block of code (like a function called \u201cbuyAllOfTheThings\u201d) for each unique value stored in the array.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>An array is a JavaScript object that stores several values separated by commas, all inside square brackets. Arrays can contain a mix of data types and objects\u2014numbers, strings, other objects, etc. We can declare arrays by directly assigning values to it. In this example, the variable netflix_shows is our to-watch list of Netflix original series.</p>\r\n  \r\n  <code-block>\r\n    var netflix_shows = [\u201chouse of cards\u201d, \u201cjessica jones\u201d, \u201corange is the new black\u201d, \u201cunbreakable kimmy schmidt\u201d, \u201cbojack horseman\u201d];\r\n  </code-block>\r\n  \r\n  <p>Or we can initialize an empty array and add items to it later. To add values to the end of an array, you can use the \u201cpush\u201d function. Let\u2019s add the latest seasons of Love and Daredevil:\r\n</p>\r\n  <code-block>\r\n  netflix_shows.push(\"love\");\r\n  netflix_shows.push(\"daredevil\");\r\n  </code-block>\r\n  \r\n  <p>You can also add values to certain slots by referencing the <em>index number</em>, or their spot on the list:</p>\r\n  <code-block>\r\n  var netflix_shows = [];\r\n  netflix_shows[0] = \"house of cards\";\r\n  netflix_shows[1] = \"jessica jones\";\r\n  netflix_shows[2] = \"orange is the new black\";\r\n  </code-block>\r\n  \r\n  <p>Yes, we start counting at 0. This is because arrays are <em>zero-indexed</em>. Use square brackets for the index you want to access in the array. When working with arrays, feel free to throw in a console.log(netflix_shows) to periodically to check if things are as expected, or check up on a specific index like so:</p>\r\n  <code-block>\r\n  console.log(netflix_shows[2]);\r\n  // prints \u201corange is the new black\u201d\r\n  </code-block>\r\n  \r\n  <p>You can also update values in an array by writing over an existing index:</p>\r\n  <code-block>\r\n  netflix_shows[3] = \"arrested development\";\r\n  netflix_shows[4] = \"sense8\";\r\n  </code-block>\r\n  \r\n  <p>Be careful not to write to indexes that are outside of the array\u2019s range, otherwise the array will just fill everything in between with \u201cundefined\u201d. For example, if we were to write the value \u201cbloodline\u201d to index 6:</p>\r\n  <code-block>\r\n  netflix_shows[6] = \"bloodline\";\r\n  console.log(netflix_shows[5]);\r\n  // prints \u201cundefined\u201d because we haven\u2019t written anything in that place in the array\r\n  console.log(netflix_shows[6]);\r\n  // prints \u201cbloodline\u201d as expected\r\n  </code-block>\r\n  \r\n  <p>Let\u2019s write another show to netflix_shows[5] so our watch-list only contains actual television  shows:</p>\r\n  <code-block>netflix_shows[5] = \"master of none\";</code-block>\r\n  \r\n  <p>There are also a few handy built-in ways of getting useful information about arrays. The <em>length</em> property will return the length (number of items) of an array. Let\u2019s see how many Netflix shows we currently have in our to-watch list:</p>\r\n  <code-block>console.log(netflix_shows.length);</code-block>\r\n  \r\n  <p>Seven shows is a lot of TV to binge on! Pro tip: start with Master Of None.</p>\r\n  <p>Remember, because arrays are zero-indexed, the length of the array will always be 1 greater than the last index. So if an array has 7 items, the last index will be 6.</p>\r\n  <p>The sort method will sort strings into alphabetical order and numbers into ascending order. The A.V. Club has a ranking of the best episodes of Master Of None stored in the variable episode_ranking. Since we\u2019re just watching the series in order, let\u2019s rearrange the first half of the season in ascending order.</p>\r\n  <code-block>\r\n  var episode_ranking = [2, 4, 1, 5, 3];\r\n  console.log(episode_ranking.sort());\r\n  // prints [1, 2, 3, 4, 5];\r\n  </code-block>\r\n  \r\n  <p>We can also do the same with the episode names so that they\u2019re in alphabetical order, because why not?</p>\r\n  <code-block>\r\n  var episode_names = [\"Plan B\", \"Parents\", \"Hot Ticket\", \"Indians On TV\", \"The Other Man\", \"Nashville\", \"Ladies and Gentlemen\", \"Old People\", \"Mornings\", \"Finale\"];\r\n  console.log(episode_names.sort());\r\n  // prints [\"Finale\", \"Hot Ticket\", \"Indians On TV\", \"Ladies and Gentlemen\", \"Mornings\", \"Nashville\", \"Old People\", \"Parents\", \"Plan B\", \"The Other Man\"];\r\n  </code-block>\r\n  <p>This time, the array is sorted in proper alphabetical order!</p>\r\n  <p>This would be the worst way to watch TV, but let\u2019s mix up episode numbers and names in the same array:</p>\r\n  <code-block>\r\n  var episodes = [\"Parents\", 3, \"Mornings\", 8];\r\n  console.log(episodes.sort());\r\n  // prints [3, 8, \u201cMornings\u201d, \u201cParents\u201d];\r\n  </code-block>\r\n  \r\n  <info-block emoji=\"&#x270B;\" header=\"Why does the syntax differ between the length and sort methods?\">\r\n    <p>The length function is a property, so that means we just access that information about that object without trying to change the object itself. The sort method is a function that that is changing something about the object we apply it to, which is why we have the parentheses after arr.sort().</p>\r\n  </info-block>\r\n  \r\n  <h3>For Loops</h3>\r\n  <p>Now that we know how to create, access, and update arrays, let\u2019s look at how loops can make our lives a whole lot simpler. Loops are part of <em>control flow</em>, which are types of logical statements that control the flow of execution of a program (we\u2019ll dive more into this in the next section).</p>\r\n  <p>There are many types of loops, but for now we\u2019ll talk about the most useful one: the for loop.</p>\r\n  <p>The for loop is used to iterate over many different values and execute code for those values. In other words, it loops through the array, applying the function to every item inside, one by one\u2014much like you might do a batch operation to resize every photo in a certain folder.</p>\r\n  <p>The structure of a for loop is the following:</p>\r\n  <code-block>\r\n  for (initialize looping variable; looping condition; counting variable) {\r\n    // code block involving variable\r\n  }\r\n  </code-block>\r\n  \r\n  <ol>\r\n    <li>Initialize the looping variable by setting the starting value. This is executed at the very beginning of the for loop only once. It most commonly starts at 0, which is the first item in the array.</li>\r\n    <li>The looping condition is a logic statement that defines the condition under which the for loop should continue running; it will run as long as this returns true. This runs before each iteration of the for loop to determine whether or not to continue with the code block inside the { } or whether to continue the program\u2019s normal flow of execution.</li>\r\n    <li>The incrementing variable defines the way to increment the looping variable and is executed each time after the code block runs. Without this, we would be thrown into an infinite loop!</li>\r\n  </ol>\r\n  \r\n  <p>Let\u2019s see this in action with our previous netflix_shows example:</p>\r\n  <code-block>\r\n  var netflix_shows =  [\u201chouse of cards\u201d, \u201cjessica jones\u201d, \u201corange is the new black\u201d, \u201cunbreakable kimmy schmidt\u201d, \u201cmaster of none\u201d];\r\n  for (var i=0; i &lt; netflix_shows.length; i++) {\r\n    console.log(netflix_shows[i]);\r\n  }\r\n  </code-block>\r\n  <p>This is the most common way to iterate through an array.</p>\r\n  <p style=\"color:blue;\"><em>(1) Initialize the looping variable by setting the starting value. This is executed at the very beginning of the for loop only once.</em></p>\r\n  <p>We set the initial variable to be 0, since arrays are zero-indexed.</p>\r\n  <p style=\"color:green;\"><em>(2) The looping condition is a logic statement that defines the condition under which the for loop should continue running. This runs before each iteration of the for loop to determine whether or not to continue with the code block inside the { } or whether to continue the program\u2019s normal flow of execution.</em></p>\r\n  <p>The next part says the loop will run through the entire array, and no further. The logic statement i &lt; netflix_shows.length ensures that even if we add or subtract from our array, we\u2019ll run this code block until we reach the end. Every time this condition holds true, the code inside the for statement is executed: console.log(netflix_shows[i]). Since i changes every time the loop runs, we\u2019ll get a different show every time.</p>\r\n  <p style=\"color:red;\"><em>(3) The counting variable defines the way to increment the looping variable and is executed each time after the code block runs. Without this, we would be thrown into an infinite loop!</em></p>\r\n  <p>After each iteration, we increment the counter variable, i. We increase it by 1 (the ++ is a shorthand for i += 1 or i = i + 1) each time the for loop runs. Initially, it is 0, and then 1, 2, ... and is incremented until we reach 5, which is the length of our list. At this point, the looping condition from (2) is not met (5 is not less than 5), so we exit the for loop. This means that we go through all Netflix shows in our netflix_shows array until we reach the end.</p>\r\n  <p>We can also start from the end of the array and decrement one by one:</p>\r\n  <code-block>\r\n  for (var i=netflix_shows.length; i >= 0; i--) {\r\n    console.log(netflix_shows[i]);\r\n  }\r\n  </code-block>\r\n  <p>Or skip every other element:</p>\r\n  <code-block>\r\n  for (var i=0; i &lt; netflix_shows.length; i+=2) {\r\n    console.log(netflix_shows[i]);\r\n  }\r\n  </code-block>\r\n  <p>We can also use the netflix_shows array values in more creative ways. How would you write a for loop that appends the string \u201cI\u2019m currently hooked on\u201d before every Netflix show?</p>\r\n  <code-block>\r\n  // hide the solution behind a dropdown or something\r\n  for (var i=0; i &lt; netflix_shows.length; i++) {\r\n    console.log(\u201ci\u2019m currently hooked on \u201c + netflix_shows[i]);\r\n  }\r\n  </code-block>\r\n</step-block>\r\n\r\n<step-block header=\"Control Flow\">\r\n  <h3>What we do</h3>\r\n  <p>We\u2019ll talk about control flow, which determines the order in which program statements and functions are executed. We\u2019ll also work on ways of controlling the flow of execution in our program through specific kinds of conditional statements.</p>\r\n  \r\n  <h3>Why we do</h3>\r\n  <p>Sometimes you want to write a single function that can handle a variety of cases or situations. Take traffic, for example. You might want to write a rule for the stoplight that tells cars what to do based on the color of the light. These rules (green means go, red means stop) are essentially real-life forms of control flow. The light controls the flow of traffic, just like we\u2019ll control the flow of our code.</p>\r\n  <p>In other words, control flow allows us to write more complex functions. Rather than being required to write statements that have to be done in a certain order, we can instead write control flow statements that pass variables around and run certain code blocks only under certain conditions.</p>\r\n  \r\n  <h3>How we do</h3>\r\n  <p>We\u2019ll cover three ways to control this traffic, or control flow statements: if/else, switch, and while statements.</p>\r\n  \r\n  <h4>(1) If/Else</h4>\r\n  <p><a href=\"https://vimeo.com/166064850\" target=\"_blank\" style=\"color:#ca4d1d;\">Watch our explainer video on if/else statements!</a></p>\r\n\r\n  <p>An if/else statement will execute one section of code if a condition is true, and another section of code if the condition is false.</p>\r\n  <code-block>\r\n  if (some condition) {\r\n    // code to be executed if condition is true\r\n  } else {\r\n    // code to be executed if condition is false\r\n  }\r\n  </code-block>\r\n  <p>We can use an if/else statement to illustrate the basic rules of the road:</p>\r\n  <code-block>\r\n  var stopLight = \u201cred\u201d;\r\n  if (stopLight === \u201cred\u201d) {\r\n    console.log(\u201cStop\u201d);\r\n  else {\r\n    console.log(\u201cGo\u201d);\r\n  }\r\n  </code-block>\r\n  <p>You can add additional \u201celse if\u201d statements if there are different types of conditions to be met. Since our first if/else statement only specifies stopping on red, we can be more specific about by checking for the other colors of stoplights:</p>\r\n  <code-block>\r\n  if (stopLight === \u201cred\u201d) {\r\n    console.log(\u201cStop\u201d);\r\n  } else if (stopLight === \u201cgreen\u201d) {\r\n    console.log(\u201cGo\u201d);\r\n  } else {\r\n    console.log(\u201cClear the intersection\u201d);\r\n  }\r\n  </code-block>\r\n  <p>Notice that since we specified the cases for a red or green stoplight, we don\u2019t need to explicitly  check for the yellow stoplight and instead just use an all-encompassing \u201celse\u201d statement. These are mutually exclusive; if red or green is triggered, yellow won\u2019t be. So we can assume it\u2019s all that\u2019s left.\r\n</p>\r\n  \r\n  <h4>(2) Switch</h4>\r\n\r\n  <p><a href=\"https://vimeo.com/166066216\" target=\"_blank\" style=\"color:#ca4d1d;\">Watch our explainer video on switch statements!</a></p>\r\n\r\n  <p>A switch statement is like a more complicated if/else statement. The switch statement executes a specific \u201ccase\u201d (block of code) depending on the expression. There is always a default case, and every other case has to end with the line \u201cbreak\u201d in order to break out of that case.</p>\r\n  <code-block>\r\n  switch (expression) {\r\n    case x:\r\n        code to be executed\r\n        break;\r\n    case y:\r\n        code to be executed\r\n        break;\r\n   ....\r\n    default:\r\n        default code to be executed\r\n  }\r\n  </code-block>\r\n  <p>Let\u2019s see this in action with our driving example:</p>\r\n  <code-block>\r\n  switch (stopLight) {\r\n    case \u201cred\u201d:\r\n        console.log(\u201cStop\u201d);\r\n        break;\r\n    case \u201cgreen\u201d:\r\n        console.log(\u201cGo\u201d);\r\n        break;\r\n    case \u201cyellow\u201d:\r\n        console.log(\u201cSlow down or speed up depending on your current speed\u201d);\r\n        break;\r\n    default:\r\n        console.log(\u201cYikes! Someone needs to fix the stop light. Proceed with caution.\u201d);\r\n  }\r\n  </code-block>\r\n  <p>In this case, we specified the three stop light colors of red, green, and yellow, and what to do in response to each of them. The default case shows an error because if the stopLight is any other color besides red, green, or yellow, something must be wrong. But not all switch statements will use the default case as an error case. Sometimes it might just be used to deal with a generic case that hasn\u2019t been specified.</p>\r\n  \r\n  <info-block emoji=\"&#x270B;\" header=\"Why would you use a switch statement over an if/else statement?\">\r\n    <p>Switch statements can essentially be rewritten as if/else statements and vice versa. If this is the case, in what cases would you use one over the other? Switch statements handle a larger number of cases than a bunch of \u201celse if\u201d statements. They also generally have a better performance (run faster) than if/else statements.</p>\r\n  </info-block>\r\n  \r\n  <h4>(3) While</h4>\r\n  <p><a href=\"https://vimeo.com/166066870\" target=\"_blank\" style=\"color:#ca4d1d;\">Watch our explainer video on while loops!</a></p>\r\n\r\n  <p>A while statement executes a certain block of code while a condition holds true. Similar to for loops, be careful that you don\u2019t accidentally get stuck in an infinite loop.</p>\r\n  <code-block>\r\n  while (condition) {\r\n    code to be executed\r\n  }\r\n  </code-block>\r\n  <p>This while statement basically says that while the stop light is green and there is no stop sign, you can continue driving.</p>\r\n  <p>Can you spot what\u2019s wrong with this example?</p>\r\n  <code-block>\r\n  while (stopLight === \u201cgreen\u201d && stopSign === false) {\r\n    console.log(\u201cGo\u201d);\r\n  }\r\n  </code-block>\r\n  <p>The car will never stop! The while statement will go into the dreaded infinite loop. All we need to do to fix this is add in some statement that will cause the loop to exit. Because an and statement requires <em>both</em> conditions to be true, we only need to change the condition of the stopLight or the stopSign. We\u2019ll introduce a stop sign into the way of our car to get it to stop.</p>\r\n  <code-block>\r\n  while (stopLight === \u201cgreen\u201d && stopSign === false) {\r\n    console.log(\u201cGo\u201d);\r\n    stopSign = true;\r\n  }\r\n  </code-block>\r\n</step-block>\r\n\r\n<step-block header=\"That's all (for now!)\">\r\n  <p>Play around with more JavaScript functions, variables, and control flow by building something fun - all of the following can be built with HTML, CSS, and JavaScript!</p>\r\n  <ul>\r\n    <li><a href=\"http://www.soundboardt.com/\" target=\"_blank\">Soundboardt</a> - click on different images to play Beyonc&eacute; music samples</li>\r\n    <li><a href=\"http://drakeweather.com/\" target=\"_blank\">Drake Weather</a> - swap out Drake\u2019s <em>Nothing Was the Same</em> album cover based on the weather forecast in your area</li>\r\n  </ul>\r\n</step-block>",
    "status": "published"
  }
},
{
  "pk": 13,
  "model": "learncms.lesson",
  "fields": {
    "reference_blurb": "this is the first lesson in project 2",
    "slug": "create-interactive-guide",
    "banner_image": "uploads/banners/learn-illustration-01.png",
    "title": "Create an Interactive Guide",
    "content": "<narrative-text>\r\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla.</p>\r\n</narrative-text>\r\n\r\n<lesson-block header=\"Before we begin, you'll need to download:\">\r\n    <unit-group>\r\n    <capsule-unit ref=\"text-editor\">\r\n    </capsule-unit>\r\n    <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n\t</unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Let's start from the very beginning\">\r\n  <p>The first step to creating an interactive guide is figuring out what your interactive guide is about. To save you the trouble of trying to find a dataset to suit your current needs, we made one for you instead. Let\u2019s make an interactive guide to the newest restaurants in Evanston. To start with, we\u2019ll need to put the information we have in an HTML file and style it using CSS.</p>\r\n  \r\n  <h3>What we do</h3>\r\n  <p>We have a name, address, image and description for each restaurant, so let\u2019s make an unordered list of all of the restaurants in our database.</p>\r\n  <h3>Why we do</h3>\r\n  <p>The data that we have isn\u2019t ranked in any particular order, so we can put them in an unordered list.</p>\r\n  <h3>How we do</h3>\r\n  <p>Create an HTML file and create a list using ul and li tags. Within each list item we\u2019ll need an h2 tag for the name of the restaurant, an h3 tag for the location, an img tag and a p tag for the description.</p>\r\n  \r\n  <code-block>\r\n    \r\n    &lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n  &lt;head&gt;\r\n    &lt;meta charset=&quot;utf-8&quot;&gt;\r\n    &lt;title&gt;&lt;/title&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;ul&gt;\r\n    \t&lt;li&gt;\r\n    \t\t&lt;h2&gt;Domino's Pizza&lt;/h2&gt;\r\n    \t\t&lt;h3&gt;911 Foster St.&lt;/h3&gt;\r\n    \t\t&lt;img src=\"http://placekitten.com.s3.amazonaws.com/homepage-samples/408/287.jpg\"&gt;\r\n    \t\t&lt;p class=\"description\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Curabitur sodales ligula in libero.&lt;/p&gt;\r\n    \t&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    \r\n  &lt;/body&gt;\r\n\r\n&lt;/html&gt;\r\n    \r\n</code-block>\r\n\r\n  \r\n  \r\n  \r\n  \r\n</step-block>\r\n",
    "status": "draft"
  }
}
]
