[{"pk": 1, "fields": {"image": "uploads/responsive-07.png", "version": 1443127186439381, "content": "<p><a href=\"https://www.google.com/chrome/browser/desktop/index.html\">Chrome</a> is Google's modern web browser and includes many useful developer tools.</p>\r\n<link-ref image=\"images/learn/text-editor.png\" header=\"Google Chrome\" link=\"http://www.google.com/chrome/\"></link-ref>", "title": "Google Chrome", "slug": "google-chrome"}, "model": "learncms.capsuleunit"}, {"pk": 2, "fields": {"image": "uploads/responsive-07.png", "version": 1443127317204853, "content": "<p>Using a modern web browser ensures that you can see the website the exact way the people who built it meant for you to see it by complying with standards for displaying web pages. All latest versions of major web browsers (Google Chrome, Safari, Mozilla Firefox, Internet Explorer, Opera) are considered modern.<p>\r\n<unit-group>\r\n<link-ref image=\"images/learn/text-editor.png\" header=\"Google Chrome\" link=\"http://www.google.com/chrome/\"></link-ref>\r\n<link-ref image=\"images/learn/notepad.gif\" header=\"Mozilla Firefox\" link=\"https://www.mozilla.org/en-US/firefox/new/\"></link-ref>\r\n</unit-group>", "title": "Modern Web Browser", "slug": "modern-web-browser"}, "model": "learncms.capsuleunit"}, {"pk": 1, "fields": {"lemma": "HTML", "definition": "The internet\u2019s bread and butter. It stands for HyperText Markup Language, and gives sites their structure."}, "model": "learncms.glossaryterm"}, {"pk": 1, "fields": {"app_label": "learncms", "model": "lesson"}, "model": "contenttypes.contenttype"}, {"pk": 2, "fields": {"app_label": "learncms", "model": "zoomingimage"}, "model": "contenttypes.contenttype"}, {"pk": 3, "fields": {"app_label": "learncms", "model": "capsuleunit"}, "model": "contenttypes.contenttype"}, {"pk": 4, "fields": {"app_label": "learncms", "model": "generalimage"}, "model": "contenttypes.contenttype"}, {"pk": 5, "fields": {"app_label": "learncms", "model": "glossaryterm"}, "model": "contenttypes.contenttype"}, {"pk": 6, "fields": {"app_label": "admin", "model": "logentry"}, "model": "contenttypes.contenttype"}, {"pk": 7, "fields": {"app_label": "auth", "model": "permission"}, "model": "contenttypes.contenttype"}, {"pk": 8, "fields": {"app_label": "auth", "model": "group"}, "model": "contenttypes.contenttype"}, {"pk": 9, "fields": {"app_label": "auth", "model": "user"}, "model": "contenttypes.contenttype"}, {"pk": 10, "fields": {"app_label": "contenttypes", "model": "contenttype"}, "model": "contenttypes.contenttype"}, {"pk": 11, "fields": {"app_label": "sessions", "model": "session"}, "model": "contenttypes.contenttype"}, {"pk": 12, "fields": {"app_label": "reversion", "model": "revision"}, "model": "contenttypes.contenttype"}, {"pk": 13, "fields": {"app_label": "reversion", "model": "version"}, "model": "contenttypes.contenttype"}, {"pk": "5u5kh17wbqkuwwxdnafjb86s3r26qp7u", "fields": {"expire_date": "2015-10-08T20:50:59.656Z", "session_data": "MzlkOTcyZDlmNzU1NTlkNDBhZWJmMGFhMzY1MDQ4N2YzODY4MDY5ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiZTE0ZmFkZDhiMDU0NDU2MzIxZmFkZjViYzIxNzkyZTU5YjBjMDUxMCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0="}, "model": "sessions.session"}, {"pk": "mbhdgcjqgnlrgcc2oicwcz299c9wzfv3", "fields": {"expire_date": "2015-10-12T18:48:13.704Z", "session_data": "MDliZjA4M2U0Yzg3YWYzMTBjMThiNTg3N2NmYjZhZTIzMmI5MmVkZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImUxNGZhZGQ4YjA1NDQ1NjMyMWZhZGY1YmMyMTc5MmU1OWIwYzA1MTAiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0="}, "model": "sessions.session"}, {"pk": 1, "fields": {"object_id_int": 1, "revision": 1, "content_type": 1, "object_id": "1", "object_repr": "Create a Basic Website", "serialized_data": "[{\"model\": \"learncms.lesson\", \"fields\": {\"reference_blurb\": \"Learn the basics of web development, from idea to polished product: how to wrap your content in HTML, to style it with CSS, and publish it online.\", \"created_at\": \"2015-09-24T20:59:27.125Z\", \"created_by\": 1, \"title\": \"Create a Basic Website\", \"status\": \"published\", \"updated_by\": 1, \"banner_image\": \"uploads/learn-illustration-01.png\", \"version\": 1443127420419348, \"content\": \"<narrative-text>\\r\\n  <p>This collection pulls together the info you'll need to get a basic website up and running: getting your machine ready, designing an amazing site, easing into a logical workflow, and of course, all the thrills and spills of learning the best of the basic web--HTML and CSS.</p>\\r\\n\\r\\n</narrative-text>\\r\\n\\r\\n<lesson-block>\\r\\n  <h2>Before we begin, you should download:</h2>\\r\\n\\r\\n  <unit-group>\\r\\n    <capsule-unit ref=\\\"text-editor\\\"></capsule-unit>\\r\\n\\r\\n    <capsule-unit ref=\\\"ftp-program\\\"></capsule-unit>\\r\\n  </unit-group>\\r\\n</lesson-block>\\r\\n\\r\\n<step-block header=\\\"Getting organized: Boring but essential logistics\\\">\\r\\n  <p>Setting up a work environment might seem like a hassle, but trust us--it will save you headaches down the road. Websites are essentially just a collection of files, so being organized will help prevent errors later on.</p>\\r\\n\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're setting up a dedicated spot on your machine for all the files you'll create: your technical docs, as well as images, videos, or other assets you're going to display.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Putting those files in organized folders\\r\\n    enables us to give the browser exact directions to the\\r\\n    locations of those files. So, no search or spotlight\\r\\n    allowed&#8212;know where your files are so you can send the browser\\r\\n    down the right path. Broken paths, missing files, or imprecise\\r\\n    directions are common reasons things break. Ever seen a 404\\r\\n    message? That\\u2019s why!</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>Create a new folder somewhere easy, like your desktop.</li>\\r\\n    <li>Give it a name with no spaces or caps.</li>\\r\\n    <li>Open up your text editor (probably Sublime if you're following along) and go to file > new.</li>\\r\\n    <li>Then save it in your new folder as <code>index.html</code>. You <em>must</em> include the file extension! This is our first signal to the browser about what we'll be doing in here.</li>\\r\\n    <li>Head into your browser of choice (Chrome, cough cough), go to file > open, and select the file we just made.</li>\\r\\n    <li>Take a look at your beautiful website? ...jk there's nothing there. That's good. Proceed!</li>\\r\\n  </ol>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  <info-block header=\\\"Danger, danger! When moving files...\\\" emoji=\\\"&#x1F47F;\\\">\\r\\n    <p>If you're ever going to move your files around, make sure to close out of your text editor while you do. Poor Sublime will keep editing the old doc, and will keep saving it in the old place. Once again: close Sublime, move files, reopen to edit in Sublime.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n\\r\\n<step-block header=\\\"Write some HTML\\\">\\r\\n  <p>Ah, HTML. You've heard so much, and yet, know so little. Let us help. <glossary-term>HTML</glossary-term> is the backbone of the\\r\\n    web, and the beginning of any website. It's our way of telling the browser what's what--this is a paragraph, this is a list, this is an image of Steve Buscemi. Dive into this standalone lesson on HTML to see how it works and to put together your first page.</p>\\r\\n\\r\\n  <lesson-ref ref=\\\"write-some-html\\\"></lesson-ref>\\r\\n\\r\\n  <info-block header=\\\"Did you know...\\\" emoji=\\\"&#x1F419;\\\">\\r\\n    <p>Beginners often think they're stumbling with CSS and JavaScript, but the culprit is actually HTML. Make sure you spend some time really understanding the <glossary-term>DOM</glossary-term> and bulletproofing your HTML before diving too deep elsewhere. (Or at least return to it when you hit problems.)</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n<lesson-block>\\r\\n  <h2>Workflow: We learned it the hard way</h2>\\r\\n  <h3>Here\\u2019s the sad truth: When things go south, it\\u2019s always your\\r\\n  fault.</h3>\\r\\n  <p>At least when it comes to building websites. We can\\u2019t\\r\\n  vouch for that thing with your ex. More than likely, the page is not\\r\\n    <em>just acting crazy</em>. It\\u2019s acting crazy because you <em>told</em> it to act\\r\\n  crazy. So here\\u2019s a strategy to help you cut down on the amount of\\r\\n  time you spend troubleshooting.</p>\\r\\n\\r\\n  <p><strong>Change, save, refresh, check.</strong></p>\\r\\n    <p>If you make a lot of changes and then notice things are\\r\\n    broken, it\\u2019s tough to tell what exactly broke, and when. So\\r\\n      <strong>work in very small bursts</strong>. Check the results frequently. Then,\\r\\n    when something breaks, you know where things went wrong--it\\u2019s what you just did.</p>\\r\\n\\r\\n    <ul>\\r\\n      <li><strong>Change</strong> something in your HTML and/or CSS\\r\\n      documents.</li>\\r\\n\\r\\n      <li><strong>Save</strong> every file you touched.</li>\\r\\n\\r\\n      <li><strong>Refresh</strong> in your browser.</li>\\r\\n\\r\\n      <li><strong>Check</strong> to make sure you\\u2019re seeing what\\r\\n      you want to.</li>\\r\\n    </ul>\\r\\n</lesson-block>\\r\\n\\r\\n<step-block header=\\\"Prepare for CSS\\\" id=\\\"prepareCSS\\\">\\r\\n  <p>Just like we did with HTML, we've got to get our files hooked up and running before we can start to style our pages in earnest. That's right--we're about to finally take the semantically beautiful but ultimately ugly HTML we've written and apply some style to it. First, though, the prep:</p>\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're creating a <glossary-term>stylesheet</glossary-term> for our webiste and linking it to our HTML file. </p>\\r\\n\\r\\n  <h3>Why we do</h3>\\r\\n    <p>CSS is a critical piece of any site--it's the bootiful part. Without this link, our browser would never know that these styles are associated with this site (aka this HTML file). Once we're done, when the browser reads our HTML file, it will see this link, fetch our styles, and apply them to the site. Good browser. Here's a treat.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ul>\\r\\n    <li>Create a new file in your text editor by going to <code>file > new</code>.</li>\\r\\n    <li>Save it in your site folder as <code>style.css</code>. Don't forget the extension!</li>\\r\\n    <li>To tell your site where it can find your stylesheet, link to\\r\\n      it in your <code>&lt;head&gt;</code>.</li>\\r\\n  </ul>  \\r\\n  <code-block>\\r\\n&lt;head&gt;\\r\\n    &lt;link rel=&#39;stylesheet&#39; href=&#39;styles.css&#39;&gt;\\r\\n&lt;/head&gt;\\r\\n                               \\r\\n</code-block>\\r\\n   \\r\\n</step-block>\\r\\n\\r\\n\\r\\n\\r\\n<step-block header=\\\"Write some CSS\\\">\\r\\n  <p>It's the moment we've all been waiting for. Time to dress up your HTML and make something people actually want to look at. The enabler here is <glossary-term>CSS</glossary-term>, aka Cascading Style Sheets, the governing documents for the look and feel of your site. It's a good bit bigger and more complicated than HTML, and with great power comes great responsibility, young Peter. Design wisely.</p>\\r\\n  <lesson-ref ref=\\\"write-some-css\\\"></lesson-ref>\\r\\n\\r\\n</step-block>\\r\\n<!--\\r\\n<lesson-block header=\\\"Good web design practices\\\">\\r\\n  <h3>Because there&#39;s a big difference between writing up some code and actually\\r\\n  designing a website.</h3>\\r\\n  <p>CSS is just the language that we use to implement style. If you're left wondering how to <em>choose</em> those styles and make something that looks a little more recent than the web circa 1998, check out our series on Good Web Design Practices. It'll walk you through the basics of design.</p>\\r\\n\\r\\n  <lesson-ref ref=\\\"good-web-design-practices\\\"></lesson-ref>\\r\\n</lesson-block>-->\\r\\n\\r\\n<step-block header=\\\"Publishing your site for all to see\\\">\\r\\n  <p>Thus far, we've just been building the site on your machine--which nobody can access, with good reason. (Hello, embarrasing search history from that time you got obsessed with you know what.) So to get your site out to the rest of the world, you've got to get a copy of your files onto a server that others can access. This means securing a\\r\\n  domain name (your URL) and hosting your files somewhere.</p>\\r\\n\\r\\n  <lesson-ref ref=\\\"intro-web-hosting\\\"></lesson-ref>\\r\\n\\r\\n  <info-block header=\\\"Did you know... you got served?\\\" emoji=\\\"&#x1F44A;\\\">\\r\\n    <p>A server is a special computer dedicated to holding and serving up web\\r\\n    files. Every time you type a URL into your browser, it makes a request--several, actually--for your website's files. The server then sends them along and your browser (aka the client) assembles everything into the visual experience you know the web to be.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n<lesson-block header=\\\"That's a wrap\\\">\\r\\n  <p>Now that your website is live, check it out! Click on all of\\r\\n  the links to make sure they\\u2019re directing to the right places and\\r\\n  that all the images are showing. If you have to fix something,\\r\\n  change in on your computer, save, then re-upload the edited file\\r\\n  onto your hosting server. Did we say good job yet? No? Good\\r\\n  job!</p>\\r\\n</lesson-block>\\r\\n\", \"updated_at\": \"2015-09-24T20:59:27.125Z\", \"slug\": \"create-basic-website\"}, \"pk\": 1}]", "format": "json"}, "model": "reversion.version"}, {"pk": 2, "fields": {"object_id_int": 2, "revision": 2, "content_type": 1, "object_id": "2", "object_repr": "Write Some CSS", "serialized_data": "[{\"model\": \"learncms.lesson\", \"fields\": {\"reference_blurb\": \"Wondering why your site\\u2019s looking so ugly? HTML just says what\\u2019s what and gives the page structure. CSS is where the real fun starts\\u2013it will fix things faster than Fix-it Felix.\", \"created_at\": \"2015-09-24T21:02:16.162Z\", \"created_by\": 1, \"title\": \"Write Some CSS\", \"status\": \"published\", \"updated_by\": 1, \"banner_image\": \"uploads/learn-illustration-01.png\", \"version\": 1443127589456180, \"content\": \"<narrative-text>\\r\\n  <p>So you\\u2019ve built a webpage. Or at least, you think it\\u2019s a\\r\\n  webpage. It looks very different from what you\\u2019re used to seeing\\r\\n  on the Internet\\u2014there are no fun, bright colors, no sleek\\r\\n  interfaces, no gifs of adorable mammals.</p>\\r\\n\\r\\n  <p>Let's fix all that. <glossary-term>CSS</glossary-term>, or Cascading Style Sheets, is ready to help. And we're here to help with the CSS.</p>\\r\\n</narrative-text>\\r\\n\\r\\n<lesson-block>\\r\\n  <h2>Before we begin, you'll need to download:</h2>\\r\\n\\r\\n  <unit-group>\\r\\n    <capsule-unit ref=\\\"text-editor\\\"></capsule-unit>\\r\\n\\r\\n    <capsule-unit ref='modern-web-browser'></capsule-unit>\\r\\n  </unit-group>\\r\\n</lesson-block>\\r\\n\\r\\n<step-block header=\\\"What it looks like\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>Before we dive into all the cool stuff, it's worth just looking at how to construct a proper CSS <glossary-term>declaration</glossary-term>. Then you can create your own recipes to get things looking like you want them.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>If your biggest enemy in HTML is forgetting to close a tag, its CSS counterpart is forgetting that semi-colon at the end of a declaration. This lets the browser know you're done with that instruction so it can move along. If the semi-colon <em>isn't</em> there, the browser thinks you're still working on the same property, and things go beserk.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <p>The syntax for CSS is a lot simpler than the syntax for HTML.\\r\\n  Are you ready for it? Here it is:</p>\\r\\n  <code-block lang=\\\"css\\\">\\r\\nelement {\\r\\n  property: value;\\r\\n  property: value;\\r\\n}\\r\\n                       \\r\\n</code-block>\\r\\n  <p>The <strong>element</strong> is the HTML element you want to target, like an  <code>h1</code>. But we're referencing it in CSS, so you don't need the angle brackets.</p>\\r\\n  <p>Think of <strong>properties</strong> as the basic vocabulary set of CSS. It defines what you want to change, then the <code>value</code> specifies exactly how. Common properties\\r\\n  include <code>background-color</code>, <code>height</code>,\\r\\n  <code>width</code>, and others. Each property has a set of acceptable values that can go along with it. So you can set <code>color</code> to <code>blue</code>, for example, but you can't set it to \\\"pig\\\".</p>\\r\\n  <p>The key to CSS is digging around for the right property-value one-two punches that will make your page look amazing. Like HTML, you've got to spend some time trying out the vocab to see what makes the most sense.</p>\\r\\n\\r\\n</step-block>\\r\\n\\r\\n<step-block header=\\\"Making our first changes: Do something ugly!\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're going to change the background color of our page to beige.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>When you first set things up, it's good to do something obvious and ugly so that you know <a href=\\\"https://learn.knightlab.com/lesson/create-basic-website/#prepareCSS\\\">your setup is working</a>.</p>\\r\\n  <h3>How we do</h3>\\r\\n\\r\\n  <ol>\\r\\n    <li>First up: Deciding what to target. Since we want to change the background color of the whole page, we have to grab a top-level tag. For us, that's <code>&lt;body&gt;</code>.</li>\\r\\n    <li>From there, we've got to pick a property and value. <a href=\\\"http://www.w3schools.com/cssref/\\\">Here's a list</a> of all the properties, but a quick Google search is just as good. We're after <code>background-color</code> and <code>beige</code>.</li>\\r\\n    <li>Type the following into your CSS file:</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\nbody {\\r\\n  background-color: beige;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n  </ol>\\r\\n  <info-block emoji=\\\"&#x1F64B;\\\" header=\\\"Does it recognize the color 'Tango Red?'\\\">\\r\\n  \\r\\n    <p>Nope. (Though we like it too.) Browsers know the basics, like red, blue, and green, but if you want to get sophisticated, you've got to go another route. For a more precise method of identifying color, you'll need to know a little more about how color itself works. Look into <glossary-term>RGB</glossary-term>, <glossary-term>HSB</glossary-term>, and <glossary-term>hex values</glossary-term>. Consider making your own palette or browsing others' at sites like <a href=\\\"https://color.adobe.com/\\\">Adobe Color</a>.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n<step-block header=\\\"Selecting the right content\\\">\\r\\n  <p>Our website\\u2019s looking better already. By playing with\\r\\n  elements\\u2019 property and value pairs, we can modify just about\\r\\n  anything, from size to color to position.</p>\\r\\n\\r\\n    <p>But there\\u2019s still a problem. As of right now, we don\\u2019t have\\r\\n    any way of grouping certain elements together in our HTML.\\r\\n    Let\\u2019s say we wanted to have all of our introductory information\\r\\n    have the same <code>background-color</code>. We could try\\r\\n    styling each piece at once, like this:</p>\\r\\n    <code-block lang=\\\"css\\\">\\r\\nh1 {\\r\\n  background-color: firebrick;\\r\\n}\\r\\n\\r\\nimg {\\r\\n  background-color: firebrick;\\r\\n}\\r\\n\\r\\np {\\r\\n  background-color: firebrick;\\r\\n}\\r\\n                       \\r\\n</code-block>\\r\\n\\r\\n    <p>This is pretty laborious, and it doesn\\u2019t really give us what we want. Instead of putting everything in one red box, we have\\r\\n    three separately colored blocks. If only there was some way to\\r\\n    go in our HTML and put the elements into one larger,\\r\\n    over-arching element. Oh, wait there is.</p>\\r\\n\\r\\n  <h3>Blast from your HTML past</h3>\\r\\n  \\r\\n  <p><a href=\\\"https://learn.knightlab.com/lesson/write-some-html/#divExplainer\\\">Remember how</a> in the HTML lesson we had you wrap all your\\r\\n  introductory information in a <code>&lt;div&gt;</code>? Yeah,\\r\\n  those were good times. And now we get to actually put that\\r\\n  <code>&lt;div&gt;</code> to use.</p>\\r\\n\\r\\n  <p>That <code>&lt;div&gt;</code> gives us a way to target everyhting inside.</p>\\r\\n  <ol>\\r\\n    <li>Nix the code we put in before, if you followed along.</li>\\r\\n    <li>Usig the <code>&lt;div&gt;</code> as our target element, get this going in your CSS file:</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\ndiv {\\r\\n  background-color: firebrick;\\r\\n}\\r\\n    </code-block>\\r\\n\\r\\n<li>Head over to your browser and refresh--you should see one big chunk of, you guessed it, firebrick red. Who makes up these names, anyway?</li>\\r\\n    <li>If you're not seeing it, check to make sure that <em>both</em> your HTML and CSS files have been saved, and that your <code>&lt;div&gt;</code> is set up correctly in your HTML file. Then triple check your syntax.</li> \\r\\n    </ol>\\r\\n</step-block>\\r\\n\\r\\n<lesson-block header=\\\"Back to HTML for a sec...\\\">\\r\\n  <p>So far in our CSS, when we&#39;ve been targeting HTML elements, it's affected <em>all</em> the elements. That's great for making sure your paragraphs all look the same, but what about special-use cases? What if you want to style your bylines differently from your other grafs?</p>\\r\\n  <p>Part of getting good at CSS is understanding the relationship between HTML and CSS. In order to target specific items or groups of items, we've got to identify what those are in HTML. In other words, we've got to give CSS something to hook onto, other than the element names.</p>\\r\\n  <p>Enter <glossary-term>classes</glossary-term> and <glossary-term>IDs</glossary-term>.</p>\\r\\n  <p>These are attributes you attach to HTML elements. A class is typically used to associate multiple things--several bylines, for example. An ID is a unique identifier--so you only use these if there's only one. Here's how it looks:</p>\\r\\n  <code-block>\\r\\n    &lt;h1 id='featured-headline'&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\\r\\n   &lt;p class='byline'&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\\r\\n   &lt;p&gt;Amazing lede goes here!&lt;/p&gt;\\r\\n    &lt;p&gt;Followed by an incredible nut graf.&lt;/p&gt;\\r\\n    &lt;p&gt;Because we're news hounds.&lt;/p&gt;\\r\\n    &lt;p&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\\r\\n  </code-block>\\r\\n  \\r\\n  </lesson-block>\\r\\n\\r\\n<step-block header='Real classy: Getting real specific'>\\r\\n  \\r\\n  <h3>What we do</h3>\\r\\n<p>In our sample code, we're going to change color of our text in a couple of different places.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>We need some way of labeling the elements we want to change, and then applying rules to those specific elements. We don't want to change <em>all</em> our text uniformly.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>Back in your HTML document, add a class to your header and\\r\\n  paragraph and call it &quot;white-text,&quot; like this:</li>\\r\\n  <code-block>\\r\\n&lt;h1 class=&#39;white-text&#39;&gt;\\r\\n  // your text\\r\\n&lt;h1&gt;\\r\\n\\r\\n&lt;p class=&#39;white-text&#39;&gt;\\r\\n  // your text\\r\\n&lt;p&gt;\\r\\n                       \\r\\n</code-block>\\r\\n\\r\\n  <ol>Then add an ID to your ordered list and call it\\r\\n  &quot;gray-text.&quot;</ol>\\r\\n  <code-block>\\r\\n&lt;ol id=&#39;gray-text&#39;&gt;\\r\\n  // list items\\r\\n&lt;ol&gt;\\r\\n    \\r\\n</code-block>\\r\\n\\r\\n  <li>Next up: Targeting classes and IDs instead of vanilla HTML elements. To modify an element based\\r\\n  on its class, you need to add a period before the class name in\\r\\n  the CSS file.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n.white-text {\\r\\n  color: white;\\r\\n}\\r\\n                       \\r\\n</code-block>\\r\\n\\r\\n  <li>To target an ID, simply use a pound sign instead of a\\r\\n  period.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#gray-text {\\r\\n  color: gray;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n    <li>Remember to save both your HTML and CSS, and head over to the browser to take a look. If things look funky, double check to make sure your spelling is the same in both places. CSS is case sensitive!</li>\\r\\n  </ol>\\r\\n\\r\\n  <info-block emoji=\\\"&#x2728;\\\" header=\\\"Be descriptive when naming names\\\">\\r\\n\\r\\n    <p>Classes and IDs not only make it easier to style your code,\\r\\n    but also present a good opportunity to help with organization and\\r\\n    readability. They allow people (including you!)\\r\\n    to understand the purpose of each HTML element at a glance.\\r\\n    Give your classes and IDs descriptive names so you can come\\r\\n    back to them more easily when you need to modify them\\r\\n    again.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n<!--\\r\\n<step-block header=\\\"Positions, everyone!\\\">\\r\\n  <p>Play around with the display and positioning of your\\r\\n  site&#39;s elements. The Box Model is a useful tool in\\r\\n  visualizing where things go.</p>\\r\\n\\r\\n  <lesson-ref ref=\\\"box-model\\\"></lesson-ref>\\r\\n</step-block>\\r\\n-->\\r\\n<step-block header=\\\"Making a nav bar\\\">\\r\\n  <p>What we\\u2019ve done so far is nice and dandy, but your\\r\\n    website still doesn\\u2019t look like a website. Let\\u2019s change that.</p>\\r\\n  <h3>What we do</h3>\\r\\n  <p>You\\r\\n  know what a navigation bar is, right? That thing at the top or\\r\\n  side of a website that gives you quick links to key pages on a\\r\\n  website. Let\\u2019s make one of those.  Let\\u2019s turn our unordered list of social media links into\\r\\n  a navbar.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Navbars might seem complicated, but they\\u2019re really just styled\\r\\n  lists. If you think about it, this makes sense--a nav bar is really just a bunch of links. Or a <em>list</em> of links.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>First, let\\u2019s make this easier on our future selves by applying\\r\\n  a descriptive ID to our unordered list. Let\\u2019s call it\\r\\n  &quot;navbar.&quot;</li>\\r\\n  <code-block>\\r\\n&lt;ul id=&#39;navbar&#39;&gt;\\r\\n  // list items\\r\\n&lt;/ul&gt;\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>Now let\\u2019s get rid of those ugly little bullets. In your CSS\\r\\n  document, target the <code>&lt;li&gt;</code>s nested in your\\r\\n  navbar ID and change the <code>list-style-type</code> to\\r\\n  none.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar li{\\r\\n  list-style-type: none;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>Next, we want our links to all be in a row instead of stacked\\r\\n  on top of each other. To change that, we\\u2019ll affect the\\r\\n  <code>display</code> property.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar li{\\r\\n  list-style-type: none\\r\\n  display: inline-block;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>The links seem a little too close to each other, so let\\u2019s\\r\\n  adjust the width of their <code>&lt;a&gt;</code> elements. We\\u2019re\\r\\n  adjusting the <code>&lt;a&gt;</code> tags rather than the\\r\\n  <code>&lt;li&gt;</code> because we want the user to be able to\\r\\n  click on the link from anywhere inside the box that holds the\\r\\n  link. We need the links to have a display value of\\r\\n  <code>block</code> in order for the width to apply to them,\\r\\n  however.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar li a{\\r\\n  display: block;\\r\\n  width: 120px;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>Great! Now let\\u2019s center the text for the links inside their\\r\\n  boxes and provide some vertical padding.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar li a{\\r\\n  text-align: center;\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 10px;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>Something\\u2019s still a bit off: the placement of our navbar right\\r\\n  now just doesn\\u2019t make sense. Navbars are supposed to be at the\\r\\n  top of the page, but right now our <code>&lt;ul&gt;</code> is\\r\\n  buried. In your HTML file, move the <code>&lt;ul&gt;</code> tag\\r\\n  and its contents to the top of the body, above the\\r\\n  <code>&lt;div&gt;</code>.</li>\\r\\n\\r\\n  <li>Now when we refresh the page the position of the navbar makes\\r\\n  sense, although it still doesn\\u2019t look quite right visually.\\r\\n  That\\u2019s because of the top margin. The navbar has some top margin\\r\\n  by default, which is keeping it from going to the top of the\\r\\n  page. To fix that, change the display of the navbar to be\\r\\n  <code>inline-block</code> and get rid of the top margin.</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar {\\r\\n  display: inline-block;\\r\\n  margin-top: 0;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>We want our navbar to stretch across the whole screen, so we\\r\\n  need to set its width to 100%. We also want it to be distinct\\r\\n  from the rest of the page, so we need to change its background\\r\\n  color as well. I\\u2019ll be changing mine to\\r\\n  <code>darkslategray</code>, but you can pick whatever value you\\r\\n  want (try playing around with RGB or even hex values if you\\u2019re\\r\\n  feeling adventurous).</li>\\r\\n  <code-block lang=\\\"css\\\">\\r\\n#navbar {\\r\\n  width: 100%;\\r\\n  background-color: darkslategray;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>At this point you might also want to change the color of the\\r\\n  links inside your navbar if the default blue is hard to see\\r\\n  against your background. Experiment with different\\r\\n  <code>font-family</code>, <code>color</code>, and other values\\r\\n  and find a combination you like. That\\u2019s the fun with styling: you\\r\\n  can make it anything you want. Like literally almost\\r\\n  anything.</li>\\r\\n  \\r\\n  <li>Wait a minute. Notice how the contents of your website hovers a few pixels away from the top right corner of the screen? That's the online equivalent of \\\"I'm not touching you!\\\" Luckily, it's an easy fix&#8212;all you need to do is to tell your browser to not put a margin or any padding on your website, using this code:</li>\\r\\n\\r\\n    <code-block lang=\\\"css\\\">\\r\\nbody {\\r\\n  margin: 0 0 0 0;\\r\\n  padding: 0 0 0 0;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n  \\r\\n  <li>Our navbar is almost complete! But there\\u2019s just one more thing\\r\\n  that would really seal the deal: user feedback. It would be cool\\r\\n  if we could change something on the screen so that whenever a\\r\\n  user hovered over a link they could be sure of what they were\\r\\n  doing.</li>\\r\\n\\r\\n  <li>Guess what? You can do that with CSS. We\\u2019ve already covered a\\r\\n  few selectors, but there are so many more useful selectors that\\r\\n  can be applied in a variety of ways. One kind of selector is the\\r\\n  a &quot;pseudo-class&quot; which uses a colon (:) to select an\\r\\n  element which has a certain property. For example, if we wanted\\r\\n  to change the color of links that had already been visited, we\\r\\n  would target <code>a:visited</code> in our CSS. For our navbar,\\r\\n  we can respond to users by changing the background color of the\\r\\n  links they\\u2019re hovering over. We\\u2019ll use the <code>a:hover</code>\\r\\n  selector for that.</li>\\r\\n  <code-block>\\r\\n#navbar li a:hover{\\r\\n  background-color: black;\\r\\n}\\r\\n                               \\r\\n</code-block>\\r\\n\\r\\n  <li>Try it out! There are more useful selectors just like\\r\\n  <code>:hover</code> and <code>:visited</code>, and being familiar\\r\\n  with them can make your life a whole lot easier and make your\\r\\n  website that much more versatile.</li>\\r\\n  </ol>\\r\\n  </step-block>\\r\\n  <lesson-block header=\\\"Useful selectors\\\">\\r\\n\\r\\n    <dl>\\r\\n      <dt>\\r\\n        <code>.element {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>The period allows you to select classes, which is very\\r\\n        useful for styling multiple elements at once</dd>\\r\\n     \\r\\n\\r\\n      <dt>\\r\\n        <code>#element {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>Like the class selector, a pound sign allows you to\\r\\n        select an element based on its unique ID</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element:hover {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>The hover pseudo-class will apply rules to an element\\r\\n        once it sees a mouse hovering over it, and is extremely\\r\\n        useful in a wide range of applications</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element[attr=&#39;val&#39;] {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>This selector will only select instances of the element\\r\\n        which have <code>val</code> as the value for a given\\r\\n        attribute. For example, if you wanted to target all links\\r\\n        on your page that went to twitter.com, you\\u2019d simply type\\r\\n        <code>a[href=\\u2019twitter.com\\u2019]</code></dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>* {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>The asterisk character by itself will select all\\r\\n        elements on the page, which can be useful if you want to\\r\\n        apply some common rules like zeroing margins and paddings.\\r\\n        The asterisk can also be used to select all children of an\\r\\n        element like so: <code>div * {...}</code>, but this isn\\u2019t\\r\\n        very commonly used</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element-a element-b {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>Putting a space between two elements will select all\\r\\n        instances of element-b on the page that are descendants of\\r\\n        an element-a</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element-a, element-b {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>Adding a comma to separate elements rather than a space\\r\\n        applied the same rules to both elements. It\\u2019s basically\\r\\n        just shorthand for <code>element-a { \\u2026 } element-b { \\u2026\\r\\n        }</code></dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element-a &gt; element-b {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>Putting a greater-than sign between two elements is\\r\\n        similar to leaving a space in between, but now will only\\r\\n        target instances of element-b that are children, or direct\\r\\n        descendants, of element-a</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element-a ~ element-b {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>This selector will target all instances of element-b\\r\\n        that are siblings (that is, they share the same parent) of\\r\\n        an element-a</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element-a + element-b {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>The plus selector is similar to the tilde in that it\\r\\n        also selects siblings, but now will only select instances\\r\\n        of element-b that appear immediately after element-a</dd>\\r\\n\\r\\n      <dt>\\r\\n        <code>element:before { , element:after {</code>\\r\\n        </dt>\\r\\n\\r\\n        <dd>The <code>:before</code> and <code>:after</code> pseudo\\r\\n        selectors can be used to modify the space immediately\\r\\n        before or after your element, and have been used in a wide\\r\\n        variety of applications, most notably the <a href=\\r\\n        \\\"http://stackoverflow.com/questions/8554043/what-is-clearfix\\\">\\r\\n        clearfix hack</a></dd>\\r\\n    </dl>\\r\\n  </lesson-block>\\r\\n\\r\\n<step-block header=\\\"Style Guided\\\">\\r\\n  <p>That... was a lot. We hope we\\u2019ve demystified the\\r\\n  process for you. Creating websites isn\\u2019t magic&#8212;it\\u2019s just\\r\\n  combining different CSS properties and values with the structure of your\\r\\n  HTML in a specific way. Once you get the hang of it, you\\u2019ll be\\r\\n  surprised to see the things you can do with pure CSS, like make an\\r\\n  entire functioning <a href=\\r\\n  \\\"http://codepen.io/ziga-miklic/pen/Fagmh\\\" target=\\\"_blank\\\">tic-tac-toe\\r\\n  game</a>.</p>\\r\\n  <p>Here's your <strong>code summary</strong>. Enjoy!</p>\\r\\n\\r\\n    <code-block lang=\\\"css\\\">\\r\\nbody {\\r\\n  background-color: beige;\\r\\n  margin: 0 0 0 0;\\r\\n  padding: 0 0 0 0;\\r\\n}\\r\\n\\r\\ndiv {\\r\\n  background-color: firebrick;\\r\\n}\\r\\n\\r\\n.white-text {\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n#gray-text {\\r\\n  color: gray;\\r\\n}\\r\\n\\r\\n#navbar {\\r\\n  margin-top: 0;\\r\\n  background-color: darkslategray;\\r\\n  display: inline-block;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n#navbar li {\\r\\n  list-style-type: none;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n#navbar li a {\\r\\n  display: block;\\r\\n  width: 120px;\\r\\n  text-align: center;\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 10px;\\r\\n  color: white;\\r\\n  font-family: sans-serif;\\r\\n}\\r\\n\\r\\n#navbar li a:hover {\\r\\n  background-color: black;\\r\\n}\\r\\n                       \\r\\n</code-block>\\r\\n</step-block>\\r\\n\", \"updated_at\": \"2015-09-24T21:02:16.162Z\", \"slug\": \"write-some-css\"}, \"pk\": 2}]", "format": "json"}, "model": "reversion.version"}, {"pk": 3, "fields": {"object_id_int": 3, "revision": 3, "content_type": 1, "object_id": "3", "object_repr": "Write Some HTML", "serialized_data": "[{\"model\": \"learncms.lesson\", \"fields\": {\"reference_blurb\": \"HTML is the most widely used coding language on the Internet, so you'll need a strong grasp on it before you go any further.\", \"created_at\": \"2015-09-24T21:03:55.144Z\", \"created_by\": 1, \"title\": \"Write Some HTML\", \"status\": \"published\", \"updated_by\": 1, \"banner_image\": \"uploads/learn-illustration-01.png\", \"version\": 1443127688438403, \"content\": \"<narrative-text>\\r\\n  <p>Every page on the Internet starts as a humble HTML file. HTML\\r\\n  (HyperText Markup Language) is the backbone of the web, and the\\r\\n  beginning of any website. In this standalone lesson, you&#39;ll\\r\\n  learn the basics of HTML and be on your way in creating a website.</p>\\r\\n</narrative-text>\\r\\n\\r\\n<lesson-block header=\\\"Before we begin, you'll need to download:\\\">\\r\\n    <unit-group>\\r\\n    <capsule-unit ref=\\\"text-editor\\\">\\r\\n    </capsule-unit>\\r\\n    <capsule-unit ref=\\\"modern-web-browser\\\"></capsule-unit>\\r\\n\\t</unit-group>\\r\\n</lesson-block>\\r\\n\\r\\n<step-block header=\\\"The Basics' Basics\\\">\\r\\n\\r\\n  \\t<p>In the beginning, there was the word, and the word was !DOCTYPE. Only, it wasn't a word, it was an HTML tag. And it wasn't God, it was the <glossary-term>W3C</glossary-term>. In this section, we're going to look at the stuff that <strong>must be included</strong> in every HTML document. This first part is all about definitions and referrals: it tells the browser what's in the document and links to other crucial info.</p>\\r\\n  \\r\\n    \\r\\n\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're inserting the non-negotiable structure for every HTML document you'll ever put together, ever. You might as well save this somewhere easy because you'll need it again and again and again...</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Without this first part, the browser has no idea what it's looking at. Many different file types make up a website--HTML, CSS, JS, data, images, etc.--so we have to identify ourselves and give the browser its marching orders.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <p>Open your text editor and paste in the following code. We're essentially dividing\\r\\n  our page into two sections: a browser-related information section\\r\\n  (the <code>&lt;head&gt;</code>), and our visible content (the\\r\\n  <code>&lt;body&gt;</code>).</p>\\r\\n  <code-block>\\r\\n&lt;!DOCTYPE html&gt;\\r\\n&lt;html lang=\\\"en\\\"&gt;\\r\\n\\r\\n  &lt;head&gt;\\r\\n    &lt;meta charset=&quot;utf-8&quot;&gt;\\r\\n    &lt;title&gt;&lt;/title&gt;\\r\\n  &lt;/head&gt;\\r\\n\\r\\n  &lt;body&gt;\\r\\n  &lt;/body&gt;\\r\\n\\r\\n&lt;/html&gt;\\r\\n    \\r\\n</code-block>\\r\\n\\r\\n \\r\\n \\r\\n</step-block>\\r\\n\\r\\n <lesson-block header=\\\"Break it down: The nitty gritty\\\">\\r\\n     <p>That wasn't you blindly cutting and pasting, was it? Please say no. Let&#39;s go over each\\r\\n  one:</p>\\r\\n   \\r\\n\\t<dl>\\r\\n      <dt><code>&lt;!DOCTYPE html&gt;</code></dt>\\r\\n      <dd>\\r\\n        <p>Tells the browser that this is an HTML5 document.</p>\\r\\n      </dd>\\r\\n      \\r\\n      <dt><code>&lt;html lang=\\\"en\\\"&gt; ... &lt;/html&gt;</code></dt>\\r\\n      <dd>\\r\\n        <p>Announces to the browser that anything in between\\r\\n      them is HTML, and that the webpage is in English.</p>\\r\\n      </dd>\\r\\n      \\r\\n      <dt><code>&lt;head&gt;</code></dt>\\r\\n      <dd>\\r\\n        <p>Head elements go in between these tags, including the title\\r\\n      of the webpage and links to stylesheets or scripts.</p>\\r\\n      </dd>\\r\\n      \\r\\n      <dt><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></dt>\\r\\n      <dd>\\r\\n        <p>A meta tag contains metadata--or, the data about your data. Whoh.</p>\\r\\n      </dd>\\r\\n      \\r\\n      <dt><code>&lt;body&gt;</code></dt>\\r\\n      <dd>\\r\\n        <p>The tag we've all been waiting for. This monster contains the content of the document: text, images, etc.</p>\\r\\n      </dd>\\r\\n\\r\\n   </dl>\\r\\n\\r\\n</lesson-block>\\r\\n\\r\\n<step-block header=\\\"Turning on the lights: Adding a title and some test content\\\">\\r\\n  \\r\\n  <h3>What we do</h3>\\r\\n  <p>We're adding our initial content to the page. First up is the <code>title</code>, and we'll throw in a paragraph for kicks.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Before you get carried away, it's good practice to make a couple of small changes to your document just so you know everything's up and running properly--that you're editing the right file, and that you're able to see those changes. If you <em>can't</em> see those changes, you know something is wrong with your workflow.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>Edit the title of your web page by naming it inside the\\r\\n  <code>&lt;title&gt;</code> tags. Titles usually describe the\\r\\n  purpose of your webpage, and can be anything from your name to \\u201cShrine to Steve Buscemi.\\u201d</li>\\r\\n  <code-block>\\r\\n&lt;title&gt;[Your Name]\\u2019s Personal Website&lt;/title&gt;\\r\\n                       \\r\\n</code-block>\\r\\n\\r\\n    <li>Inside the <code>&lt;body&gt;</code> tag, create a\\r\\n  <code>&lt;p&gt;</code> tag with your name (from here on,\\r\\n  we&#39;re going to be putting everything in the body unless we\\r\\n  specifically state otherwise). If you don\\u2019t know your name,\\r\\n  that\\u2019s okay too. A little-known fact is that Steve Buscemi\\u2019s\\r\\n  entity is in the public domain, so anyone can assume his identity\\r\\n  without fear of copyright infringement.</li>\\r\\n  <code-block>\\r\\n&lt;body&gt;\\r\\n  &lt;p&gt;Your Name&lt;/p&gt;\\r\\n&lt;/body&gt;\\r\\n                               \\r\\n</code-block>\\r\\n  </ol>\\r\\n\\r\\n  <info-block emoji=\\\"&#x1F633;\\\" header=\\\"Check Yourself Before You Wreck Yourself\\\">\\r\\n    <h4>Or, Check Yourself Before You Get Super Tangled Up in Your Own Code and No Longer Have a Clear Sense of Which Way is Up and then Spend Five Hours Debugging Only to Discover You Just Forgot to Close a Tag Somewhere.</h4>\\r\\n    <p>A good practice when building websites is to save and check\\r\\n    your work often. Take a moment now to save your code and open\\r\\n    your HTML file in the browser. (Or if it's already open, refresh.) Do this compulsively. If anything looks\\r\\n    off, look through your code again and make sure it matches the\\r\\n    examples.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n<step-block header='Picture perfect: Adding images' id=\\\"imgExplainer\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>The <code>img</code> tag instructs the browser to go fetch an image file--like a <glossary-term>JPG</glossary-term>, <glossary-term>PNG</glossary-term>, or <glossary-term>GIF</glossary-term>.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>The image tag is different from what we've seen so far. First, it's \\\"self-closing,\\\" meaning it does <strong>not</strong> have a partner closing tag like /img. It's also got a mandatory <glossary-term>attribute</glossary-term> called <code>src</code> that points to where the browser can find the image file.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>Find an image to use. For now, grab something that has a full URL--something on the web, not on your machine.</li>\\r\\n<info-block header=\\\"Don't know how to get an image's URL?\\\" emoji=\\\"&#x2754;\\\">\\r\\n  <p>When you right-click on an image online, you should see a menu pop up. Look for language like \\\"Copy Image URL\\\". Select that option, and it should give you the exact web address for that image. If you want to double-check, feel free to paste it into your browser bar like you would any other URL.</p>\\r\\n    \\r\\n    </info-block>\\r\\n    <li>Using the self-closing <code>&lt;img&gt;</code> tag, insert an\\r\\n  image. Paste the image URL as the source attribute for the\\r\\n  <code>&lt;img&gt;</code> tag.</li>\\r\\n  <code-block>\\r\\n&lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/a/aa/Steve_Buscemi_%281996%29.jpg&#39;&gt;\\r\\n  </code-block>\\r\\n  </ol>\\r\\n \\r\\n\\r\\n  <info-block emoji=\\\"&#x270B;\\\" header=\\\"But what if I want to use an image on my computer?\\\">\\r\\n    <p>No problem. Simplify the name so it has no caps and spaces, like this: <code>stevie.jpg</code>. Make sure you put the image in the <em>same folder as your <code>index.html</code> file</em>. Then just put the image name instead of the url. So you'd have something like, <code>src=\\\"stevie.jpg\\\"</code>.</p>\\r\\n  </info-block>\\r\\n</step-block>\\r\\n\\r\\n<step-block header=\\\"Listing things: Order and purpose matters\\\" id=\\\"listExplainer\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>If HTML is about being as <glossary-term>semantic</glossary-term> as possible, you'll realize that sometimes you want to mark off collections of similar things--a bunch of links that make up your navigation, icons that link to your social media accounts, or a series of definitions.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>We group these things together as \\\"lists.\\\" There are three major kinds: unordered lists, or <code>&lt;ul&gt;</code>; ordered lists, or <code>&lt;ol&gt;</code>, and definition lists, or <code>&lt;dt&dt;</code>.</p> Unordered means that order or sequence doesn't really matter. Ordered lists you'd notch off with 1, 2, 3... and definition lists pull together terms and definitions. It's kind of a specialized form of unordered lists.\\r\\n  <h3>How we do</h3>  \\r\\n  <p>We're about to make an ordered list telling you how to do an unordered list. Whaaaaat.</p>\\r\\n  <ol>\\r\\n    <li>Create a list of your social media accounts with\\r\\n      the <code>&lt;ul&gt;</code> tag</li>.\\r\\n    <li>Each item is nested inside, and gets its own <code>&lt;li&gt;</code>\\r\\n    tag, which stands for <em>list item</em>.</li>\\r\\n  <code-block>\\r\\n&lt;ul&gt;\\r\\n  &lt;li&gt;Twitter&lt;/li&gt;\\r\\n  &lt;li&gt;Facebook&lt;/li&gt;\\r\\n  &lt;li&gt;LinkedIn&lt;/li&gt;\\r\\n  &lt;li&gt;Tumblr&lt;/li&gt;\\r\\n  &lt;li&gt;Email&lt;/li&gt;\\r\\n&lt;/ul&gt;\\r\\n                       \\r\\n</code-block>\\r\\n    <li>When you refresh your browser, you should see your list with a bunch of bullets setting each of these on a new line.</li>\\r\\n  </ol>\\r\\n</step-block>\\r\\n\\r\\n<step-block header=\\\"Link it up\\\" id=\\\"linkExplainer\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're using the <code>&lt;a&gt;</code> tag to establish a link between words (or images) on our site to another URL. Aka, Gawker's bread and butter.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Linking things together is what the internet's all about! It puts the web in world wide web.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <p>We're using another attribute here--<code>href</code>. This is for the URL we want to link to. The <code>&lt;a&gt;&lt;/a&gt;</code>tags go around the text or image you want to link up. So, <a href=\\\"http://www.homestarrunner.com/sbemail.html\\\" target=\\\"_blank\\\">this text</a>, for example, goes somewhere awesome.</p>\\r\\n  <ol>\\r\\n    <li>Let\\u2019s go one level deeper with nesting. Using\\r\\n  <code>&lt;a&gt;</code> tags inside your <code>&lt;li&gt;</code>\\r\\n  tags, add links to send people directly to your social media\\r\\n  accounts.</li>\\r\\n  <code-block>\\r\\n&lt;ul&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\\r\\n&lt;/ul&gt;\\r\\n                       \\r\\n</code-block>\\r\\n    <li>Head into your browser and refresh, then test each one of those links to make sure the page redirects to the right URL.</li>\\r\\n    <li>For kicks, add an extra attribute to one of these that tells the browser to open the link in a new window. That's the norm these days.</li>\\r\\n      <code-block>\\r\\n&lt;ul&gt;\\r\\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39; target=&#39;_blank&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\\r\\n&lt;/ul&gt;\\r\\n                       \\r\\n</code-block>\\r\\n    <info-block  emoji=\\\"&#x270B;\\\" header=\\\"What if I want to link to email or jump down the page?\\\">\\r\\n      <p>Great question. An email address just gets a URL of \\\"mailto:youraddress@yo.com\\\". For linking on the same page, it's a two-part system <a href=\\\"#\\\">we'll get into later.</a></p>\\r\\n</info-block>\\r\\n  </ol>\\r\\n</step-block>\\r\\n\\r\\n<lesson-block header=\\\"Tag 'n' Bag: Our Top 20\\\">\\r\\n\\r\\n\\r\\n\\r\\n    <p>There are a wide range of tags that serve a multitude of\\r\\n    purposes. For a complete list, see the list of tags at <a href=\\r\\n    \\\"http://www.w3schools.com/tags/\\\">w3schools</a>. Some useful\\r\\n    tags in journalistic contexts include\\r\\n    <code>&lt;article&gt;</code>, <code>&lt;blockquote&gt;</code>,\\r\\n    and <code>&lt;cite&gt;</code>, among others. Don\\u2019t worry about\\r\\n    memorizing them all&#8212;no one needs to know all the tags, and\\r\\n    they\\u2019re all available for you to look up whenever you need it. You're BFFs with Google, right? That's sad, but we understand.</p>\\r\\n\\r\\n\\t\\t\\t\\t\\t<dl>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;div&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Used for structure, typically as a generic way to identify a section off similar elements. More on that <a href=\\\"#divExplainer\\\">here</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;a&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n                      <dd>Adds links to your text. Full explainer <a href=\\\"#linkExplainer\\\">here</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Headings! Journalists take note: These puppies are used for headlines, section heads, and the like. It signals content more important than the lowly paragraph, with <code>h1</code> being the most important and <code>h6</code> being the least. You can use them multiple times, with the exception of the superlative <code>h1</code>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;p&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Paragraphs, though people use them for general purpose things like bylines, as well.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;img&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Tells the browser to retrive and display an image. More on that <a href=\\\"#imgExplainer\\\">up here</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Create and populate an unordered list, most commonly used for navigation bars. <a href=\\\"listExplainer\\\">Review that here</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;form&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>This bad boy creates a submittable form. Submit to me, people of the internet.</dd>\\r\\n                      <dt><code>&lt;input&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Creates an element on the page for user input, and <a href=\\\"http://www.w3schools.com/tags/tag_input.asp\\\">comes with a variety of types</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;button&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>Yes, English speakers. This makes a button on the page. HTML is so hard! <a href=\\\"http://www.w3schools.com/tags/tag_button.asp\\\">Details here</a>.</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;span&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to create a button on the page</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;article&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to contain an article</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;figure&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to contain an article</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;blockquote&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to contain a quote from a source</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;cite&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to cite a blockquote</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;code&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to denote a code snippet appearing on the screen\\r\\n\\t\\t\\t\\t\\t\\t\\t</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;section&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to denote a section of the page, such as a chapter\\r\\n\\t\\t\\t\\t\\t\\t\\t</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;title&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to give the webpage a title, which typically appears at the top of the tab or window</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;script&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n                      <dd>used to link client-side scripts to the document</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;link&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used mostly to link stylesheets to the document</dd>\\r\\n\\t\\t\\t\\t\\t\\t<dt><code>&lt;!--...--&gt;</code></dt>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t<dd>used to comment out sections of HTML</dd>\\r\\n\\t\\t\\t\\t\\t</dl>\\r\\n</lesson-block>\\r\\n<step-block header='The great divide' id=\\\"divExplainer\\\">\\r\\n  \\r\\n  <h3>What we do</h3>\\r\\n   <p>HTML deals with two things: content and structure. All the\\r\\n    tags we\\u2019ve seen so far deal with actual content, but there are\\r\\n    also some very useful tags that are used to structure your\\r\\n    HTML, like the <code>&lt;div&gt;</code> tag.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Thinking forward to CSS, you might want to group certain items together to make them look alike. In traditional layouts, for example, you might have a sidebar. And you want that sidebar to look different--and to appear in a different place--than your main bar. To be able to \\\"grab\\\" all of that content, you'd use a <code>&lt;div&gt;</code> tag and clump it all together. <em>These paragraphs, browser, are part of the sidebar. Treat them as a group, or block.</em></p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n  <li>Use a <code>&lt;div&gt;</code> tag to group all your\\r\\n  introductory material together. That\\u2019ll include your\\r\\n  <code>&lt;h1&gt;</code>, <code>&lt;img&gt;</code>, and\\r\\n    <code>&lt;p&gt;</code> tags at the beginning of your body.</li>\\r\\n    <li>When\\r\\n  it\\u2019s done it should look like this:</li>\\r\\n  <code-block>\\r\\n&lt;div&gt;\\r\\n  &lt;h1&gt;My Personal Website&lt;/h1&gt;\\r\\n  &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\\r\\n  &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\\r\\n&lt;/div&gt;\\r\\n                       \\r\\n</code-block>\\r\\n\\r\\n  <li>If you refresh your page at this point, you\\u2019ll notice that it\\r\\n  doesn\\u2019t look any different than it did without the\\r\\n  <code>&lt;div&gt;</code> tag. And you\\u2019re totally correct! While\\r\\n    adding <code>&lt;div&gt;</code>s don\\u2019t <em>visually</em> affect the page\\r\\n  when applied (aside from creating a break if you added a\\r\\n  <code>&lt;div&gt;</code> within an inline element), they will\\r\\n  become extremely useful when it comes time to organize and style\\r\\n  your website. If you don\\u2019t understand it 100 percent right now,\\r\\n  that\\u2019s fine. Just trust us. We would never steer you wrong.</li>\\r\\n</step-block>\\r\\n\\r\\n<step-block header=\\\"That&#39;s all, folks\\\">\\r\\n  <p>And that&#39;s it! Review the index.html file in your browser\\r\\n  and make sure that everything is showing up. If something\\r\\n  isn&#39;t appearing, check your code to see if there are any\\r\\n  syntax errors or if you forgot to close any tags. Then bask in the glory of your fine work.</p>\\r\\n  <info-block emoji=\\\"&#x270B;\\\" header=\\\"Excuse me, nice try--but my website is very ugly.\\\">\\r\\n    <p>Oh, you noticed that too? Right--because HTML doesn't care about looking good. It's just markup. It says what is what and gets on with its life. You, however, still have work to do. <a href=\\\"https://learn.knightlab.com/lesson/create-basic-website/#prepareCSS\\\">Get ready for CSS</a>.</p>\\r\\n</info-block>\\r\\n\\r\\n</step-block>\\r\\n<lesson-block header=\\\"Code Summary\\\">\\r\\n\\r\\n    <code-block>\\r\\n&lt;!DOCTYPE HTML&gt;\\r\\n&lt;html lang=\\\"en\\\"&gt;\\r\\n  &lt;head&gt;\\r\\n    &lt;meta charset=&#39;utf8&#39;&gt;\\r\\n    &lt;title&gt;My Personal Website&lt;/title&gt;\\r\\n    &lt;link rel=&#39;stylesheet&#39; href=&#39;styles.css&#39;&gt;\\r\\n    &lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\\r\\n  &lt;/head&gt;\\r\\n\\r\\n  &lt;body&gt;\\r\\n    &lt;ul&gt;\\r\\n      &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\\r\\n      &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\\r\\n      &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\\r\\n      &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\\r\\n      &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\\r\\n    &lt;/ul&gt;\\r\\n    &lt;div&gt;\\r\\n      &lt;h1&gt;My Personal Website&lt;/h1&gt;\\r\\n      &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\\r\\n      &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\\r\\n    &lt;/div&gt;\\r\\n    &lt;ol&gt;\\r\\n      &lt;li&gt;Writing HTML&lt;/li&gt;\\r\\n      &lt;li&gt;Populating Lists&lt;/li&gt;\\r\\n    &lt;/ol&gt;\\r\\n  &lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n                               \\r\\n</code-block>\\r\\n  \\r\\n</lesson-block>\\r\\n\", \"updated_at\": \"2015-09-24T21:03:55.144Z\", \"slug\": \"write-some-html\"}, \"pk\": 3}]", "format": "json"}, "model": "reversion.version"}, {"pk": 4, "fields": {"object_id_int": 4, "revision": 4, "content_type": 1, "object_id": "4", "object_repr": "Intro to Web Hosting", "serialized_data": "[{\"model\": \"learncms.lesson\", \"fields\": {\"reference_blurb\": \"When your site is ready, you\\u2019ll upload your files to your hosting server using a File Transfer Protocol (FTP) client. (We like Cyberduck and FileZilla.) Make sure that your files appear on your server the same way that they do in the site folder on your computer, or else your site may not work properly.\", \"created_at\": \"2015-09-24T21:04:38.110Z\", \"created_by\": 1, \"title\": \"Intro to Web Hosting\", \"status\": \"published\", \"updated_by\": 1, \"banner_image\": \"uploads/learn-illustration-01.png\", \"version\": 1443127731404128, \"content\": \"<narrative-text>\\r\\n  <p>So you&#39;ve written some code, and after opening those files\\r\\n  in your browser you are able to confirm that those files do\\r\\n  indeed make a website. You&#39;re super excited to show all your\\r\\n  friends and family, but how will other people see it? As of right\\r\\n  now, those files are just living in a folder on your computer and it&#39;s\\r\\n  not very practical to send all your website files to every person\\r\\n  who wants to see it.</p>\\r\\n\\r\\n  <p>What you need is a server, a special computer dedicated to\\r\\n  housing your files and making sure that people can get\\r\\n  them with a few keystrokes. In this lesson, we'll walk you through getting a URL, finding a hosting server, and publishing your site.</p>\\r\\n</narrative-text>\\r\\n\\r\\n<lesson-block>\\r\\n  <h2>Before we begin, you'll need to download:</h2>\\r\\n\\r\\n  <unit-group>\\r\\n    <capsule-unit ref=\\\"ftp-program\\\"></capsule-unit>\\r\\n  </unit-group>\\r\\n</lesson-block>\\r\\n\\r\\n\\r\\n<step-block header=\\\"Purchase a domain name\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>We're getting you the URL of your dreams. Maybe. If it's still available.</p>\\r\\n  <h3>Why we do</h3>\\r\\n  <p>Every address on the web needs to be unique--that way users are sure they're getting the bona fide content they're looking for, and not a different site every time they request the same URL.</p>\\r\\n  <h3>How we do</h3>\\r\\n  <ol>\\r\\n    <li>First, search for a domain name to see if it's\\r\\n  available.</li>\\r\\n<info-block emoji=\\\"&#x2757;\\\" header=\\\"\\\">\\r\\n  <p>Here are five popular services that offer domain\\r\\n  names:</p>\\r\\n\\r\\n  <ul>\\r\\n    <li>NameCheap</li>\\r\\n\\r\\n    <li>Hover</li>\\r\\n\\r\\n    <li>Google Domains</li>\\r\\n\\r\\n    <li>1&1</li>\\r\\n\\r\\n    <li>GoDaddy</li>\\r\\n  </ul>\\r\\n</info-block>\\r\\n<li>Once you've got something good, pay up. You're purchasing ownership on a monthly or yearly basis. You're buying the rights to the name--nothing more.</li>\\r\\n  \\r\\n  </ol>\\r\\n  </step-block>\\r\\n  <lesson-block header=\\\"Additional services\\\">\\r\\n    <p>These sites offer a lot of additional services that you\\r\\n    don\\u2019t necessarily need. Don\\u2019t be tricked into buying anything\\r\\n    you don\\u2019t need just because they sound fancy&#8212;domain\\r\\n    registrars are businesses after all, and they\\u2019re looking to\\r\\n    make money off of you. Here\\u2019s a list of common features that\\r\\n    registrars often try to bundle with your domain. You can decide\\r\\n    for yourself whether it sounds like you need it.</p>\\r\\n\\r\\n    <dl>\\r\\n      <dt>Hosting</dt>\\r\\n\\r\\n        <dd>For a simple website, like a portfolio site or personal\\r\\n        webpage, using the domain registrar\\u2019s hosting may be the\\r\\n        simplest option. As you go on to develop bigger, more\\r\\n        complex projects (especially those that require server-side\\r\\n        scripts), you\\u2019ll probably want to look toward other hosting\\r\\n        options.</dd>\\r\\n\\r\\n      <dt>Local listing</dt>\\r\\n\\r\\n        <dd>Listing a site locally makes it easier to find a website\\r\\n        by putting it on search engines such as Yelp, GoogleMaps\\r\\n        and FourSquare. If your website is for a business, local\\r\\n        listing might be a good idea to attract new customers. It\\u2019s\\r\\n        probably not your priority for a portfolio or personal\\r\\n        site, but that\\u2019s up to you.</dd>\\r\\n\\r\\n      <dt>Private Email</dt>\\r\\n\\r\\n        <dd>Most domain registrars will offer email forwarding for\\r\\n        free, which allows you to forward all emails sent to a\\r\\n        specified address on your website to a pre-existing email\\r\\n        account. This keeps everything centralized, you can\\r\\n        continue to use whatever email provider you want, and you\\r\\n        don\\u2019t have to pay a penny (or you shouldn\\u2019t, at least. If\\r\\n        your domain registrar tries to make you pay for email\\r\\n        forwarding, try looking elsewhere).</dd>\\r\\n\\r\\n      <dt>Sub-domains</dt>\\r\\n\\r\\n        <dd>Sub-domains come before your main domain name, such as\\r\\n        shop.mydomain.com. These label different areas of your\\r\\n        website, like an online store or blog. Many domain\\r\\n        registrars allow you to register subdomains for free, but\\r\\n        you\\u2019ll have to point or forward those domains to different\\r\\n        websites as well.</dd>\\r\\n\\r\\n      <dt>Positive SSL</dt>\\r\\n\\r\\n        <dd>SSL, or Secure Sockets Layer, is the difference between\\r\\n        http and https in front of a website\\u2019s URL. It&#39;s a way\\r\\n        of encrypting websites so that everything sent between a\\r\\n        client and the server your website is hosted on can\\u2019t be\\r\\n        intercepted. If you\\u2019re collecting sensitive information on\\r\\n        your website, like credit card information, you should\\r\\n        invest in SSL.</dd>\\r\\n\\r\\n      <dt>Website forwarding</dt>\\r\\n\\r\\n        <dd>When you search for www.newyorktimes.com, your browser\\r\\n        sends you to the actual domain and website,\\r\\n        www.nytimes.com. This is website forwarding. This is so\\r\\n        that commonly mistaken URLs automatically go to the correct\\r\\n        one rather than giving the user a wrong or nonexistent\\r\\n        page. Website forwarding is a good idea as your brand\\r\\n        expands, especially if you are known by different names\\r\\n        (such as an acronym). Unfortunately, you\\u2019ll have to\\r\\n        purchase those additional domains as well.</dd>\\r\\n\\r\\n      <dt>WhoisGuard</dt>\\r\\n\\r\\n        <dd>When you register a domain, you have to provide certain\\r\\n        details about yourself, like your name and email address.\\r\\n        This information is public and can easily be accessed by\\r\\n        spammers through sites like who.is. WhoisGuard is a company\\r\\n        that masks your personal information with their\\r\\n        information, protecting you from spam.</dd>\\r\\n    </dl>\\r\\n  </lesson-block>\\r\\n\\r\\n<step-block header=\\\"Possibly: Purchase a hosting server\\\">\\r\\n  <h3>What we do</h3>\\r\\n  <p>A server hosts your website so that it is available and\\r\\n  accessible on the Internet. These companies allow you, the\\r\\n  client, to lease out space to publish your site onto the web on a\\r\\n  monthly basis. Servers work by uploading your files using a <glossary-term>File\\r\\n  Transfer Protocol (FTP)</glossary-term> client so that all your code, images, and other\\r\\n  files are readily accessible to each other.</p>\\r\\n\\r\\n  <info-block emoji=\\\"&#x2757;\\\" header=\\\"The host with the most\\\">\\r\\n    <p>Depending on the size of your website, you may have to sort\\r\\n    through which hosting server is the best option for you. Most\\r\\n    free hosting servers have limited services and advertisements\\r\\n    and cannot host complex or large sites.</p>\\r\\n  </info-block>\\r\\n\\r\\n  <p>There are also free solutions to web hosting. One popular\\r\\n  option is GitHub Pages, which is perfect for hosting a one-page,\\r\\n  static website like a personal website or a landing page. While\\r\\n  you won\\u2019t have access to a server and therefore won\\u2019t be able to\\r\\n  run any sort of server-side processes, it should be enough for a\\r\\n  simple website. You can even set up your domain to point to your\\r\\n  GitHub Page and mask the DNS to show your domain name.</p>\\r\\n</step-block>\\r\\n\\r\\n<step-block header='Connect your hosting server to your domain'>\\r\\n  <p>Once you\\u2019ve registered your domain name and purchased a\\r\\n  hosting server, you will need to link the two in order for the\\r\\n  URL to direct to the correct website. Most registrars lay out a\\r\\n  clear process in connecting the domain name with the host, but in\\r\\n  general you\\u2019ll just be pointing your domain name as the address\\r\\n  to the IP address of the server where your files will be\\r\\n  hosted.</p>\\r\\n</step-block>\\r\\n\\r\\n\\r\\n<step-block header='Connect to your host server'>\\r\\n  <p>In these steps, we\\u2019ll be assuming here that you\\u2019ll be logging\\r\\n  into your server using SFTP, but if that\\u2019s not the case, you\\r\\n  should look up a guide for whatever protocol you have on your\\r\\n  server.</p>\\r\\n\\r\\n  <p>In FileZilla, open the Site Manager by going to File &gt; Site\\r\\n  Manager. This should bring up a window with a bunch of fields for\\r\\n  you to fill out. The only things you need to make sure you have\\r\\n  are the host (which is the IP address of the server you\\u2019re\\r\\n  connecting to), the protocol, the logon type (which should be\\r\\n  normal), and the user and password fields to your account. After\\r\\n  filling out those fields, move over to the \\u201cAdvanced\\u201d tab and in\\r\\n  the Default remote directory field enter \\u201c/var/www/html.\\u201d This\\r\\n  will just make it easier for you to get to the directory where\\r\\n  you\\u2019ll be uploading your files. From here, you should be able to\\r\\n  log in.</p>\\r\\n\\r\\n  <media-group class=\\\"layout horizontal around-justified\\\">\\r\\n    <zooming-image ref=\\\"filezilla-login\\\"></zooming-image>\\r\\n  </media-group>\\r\\n\\r\\n  <p>In Cyberduck, when you launch the application for the first\\r\\n  time you should see a set of pre-loaded bookmarks. You can go\\r\\n  ahead and delete those \\u2013 you\\u2019ll be adding your own bookmarks\\r\\n  soon. Right-click on the screen and create a new bookmark, and\\r\\n  you\\u2019ll be prompted to enter the information necessary to connect\\r\\n  with the server. Fill out everything at the top of the screen,\\r\\n  making sure not to check \\u201cAnonymous Login,\\u201d and then click \\u201cMore\\r\\n  Options.\\u201d In the \\u201cPath\\u201d field, enter \\u201c/var/www/html.\\u201d This will\\r\\n  just make it easier for you to get to the directory where you\\u2019ll\\r\\n  be uploading your files. Once you\\u2019ve done that, close out of that\\r\\n  window and double-click on the bookmark you just made. Enter your\\r\\n  password to connect to your server, and you should be in!</p>\\r\\n\\r\\n  <media-group class=\\\"layout horizontal around-justified\\\">\\r\\n    <zooming-image ref=\\\"cyberduck-login\\\"></zooming-image>\\r\\n  </media-group>\\r\\n</step-block>\\r\\n\\r\\n<step-block header='Transfer files to your host server'>\\r\\n  <p>Once logged into FileZilla, you should have six windows: one\\r\\n  on top, four in a two-by-two layout in the middle, and one on the\\r\\n  bottom. The top window (1) is where you\\u2019ll get status reports on\\r\\n  your connections to the server. The middle left windows (2, 4)\\r\\n  are your local directory \\u2013 they\\u2019re the files sitting on your\\r\\n  computer. Then your middle right windows (3, 5) will have the\\r\\n  directory for your server. The bottom window (6) has useful\\r\\n  information about any files you have waiting to be uploaded and\\r\\n  their status. To upload your files, simply locate them on your\\r\\n  computer in the left middle bottom pane and then drag them over\\r\\n  to the right middle bottom pane. Make sure that you upload your\\r\\n  HTML file as well as any important other files (CSS, images,\\r\\n  etc.) into this folder exactly as it appears on your\\r\\n  computer.</p>\\r\\n\\r\\n  <media-group class=\\\"layout horizontal around-justified\\\">\\r\\n    <zooming-image ref=\\\"filezilla-windows\\\"></zooming-image>\\r\\n  </media-group>\\r\\n\\r\\n  <p>In Cyberduck, once you\\u2019ve connected to your host server it\\r\\n  should direct you to a new screen. Make sure that you\\u2019re in the\\r\\n  /var/www/html directory, and from here you can just drag and drop\\r\\n  your files from your computer into Cyberduck. Voila! That\\u2019s\\r\\n  it!</p>\\r\\n\\r\\n  <media-group class=\\\"layout horizontal around-justified\\\">\\r\\n    <zooming-image ref=\\\"cyberduck-windows\\\"></zooming-image>\\r\\n  </media-group>\\r\\n</step-block>\\r\\n\\r\\n<step-block header='Check out your site'>\\r\\n  <p>Now that your website is live, check it out! Make sure to\\r\\n  click on all of the links to make sure that they are directing to\\r\\n  the right places and that all the images are showing. If you have\\r\\n  to fix anything, be sure to re-upload the edited file onto your\\r\\n  hosting server.</p>\\r\\n</step-block>\\r\\n\", \"updated_at\": \"2015-09-24T21:04:38.110Z\", \"slug\": \"intro-web-hosting\"}, \"pk\": 4}]", "format": "json"}, "model": "reversion.version"}, {"pk": 1, "fields": {"content_type": 1, "codename": "add_lesson", "name": "Can add lesson"}, "model": "auth.permission"}, {"pk": 2, "fields": {"content_type": 1, "codename": "change_lesson", "name": "Can change lesson"}, "model": "auth.permission"}, {"pk": 3, "fields": {"content_type": 1, "codename": "delete_lesson", "name": "Can delete lesson"}, "model": "auth.permission"}, {"pk": 4, "fields": {"content_type": 2, "codename": "add_zoomingimage", "name": "Can add zooming image"}, "model": "auth.permission"}, {"pk": 5, "fields": {"content_type": 2, "codename": "change_zoomingimage", "name": "Can change zooming image"}, "model": "auth.permission"}, {"pk": 6, "fields": {"content_type": 2, "codename": "delete_zoomingimage", "name": "Can delete zooming image"}, "model": "auth.permission"}, {"pk": 7, "fields": {"content_type": 3, "codename": "add_capsuleunit", "name": "Can add capsule unit"}, "model": "auth.permission"}, {"pk": 8, "fields": {"content_type": 3, "codename": "change_capsuleunit", "name": "Can change capsule unit"}, "model": "auth.permission"}, {"pk": 9, "fields": {"content_type": 3, "codename": "delete_capsuleunit", "name": "Can delete capsule unit"}, "model": "auth.permission"}, {"pk": 10, "fields": {"content_type": 4, "codename": "add_generalimage", "name": "Can add general image"}, "model": "auth.permission"}, {"pk": 11, "fields": {"content_type": 4, "codename": "change_generalimage", "name": "Can change general image"}, "model": "auth.permission"}, {"pk": 12, "fields": {"content_type": 4, "codename": "delete_generalimage", "name": "Can delete general image"}, "model": "auth.permission"}, {"pk": 13, "fields": {"content_type": 5, "codename": "add_glossaryterm", "name": "Can add glossary term"}, "model": "auth.permission"}, {"pk": 14, "fields": {"content_type": 5, "codename": "change_glossaryterm", "name": "Can change glossary term"}, "model": "auth.permission"}, {"pk": 15, "fields": {"content_type": 5, "codename": "delete_glossaryterm", "name": "Can delete glossary term"}, "model": "auth.permission"}, {"pk": 16, "fields": {"content_type": 6, "codename": "add_logentry", "name": "Can add log entry"}, "model": "auth.permission"}, {"pk": 17, "fields": {"content_type": 6, "codename": "change_logentry", "name": "Can change log entry"}, "model": "auth.permission"}, {"pk": 18, "fields": {"content_type": 6, "codename": "delete_logentry", "name": "Can delete log entry"}, "model": "auth.permission"}, {"pk": 19, "fields": {"content_type": 7, "codename": "add_permission", "name": "Can add permission"}, "model": "auth.permission"}, {"pk": 20, "fields": {"content_type": 7, "codename": "change_permission", "name": "Can change permission"}, "model": "auth.permission"}, {"pk": 21, "fields": {"content_type": 7, "codename": "delete_permission", "name": "Can delete permission"}, "model": "auth.permission"}, {"pk": 22, "fields": {"content_type": 8, "codename": "add_group", "name": "Can add group"}, "model": "auth.permission"}, {"pk": 23, "fields": {"content_type": 8, "codename": "change_group", "name": "Can change group"}, "model": "auth.permission"}, {"pk": 24, "fields": {"content_type": 8, "codename": "delete_group", "name": "Can delete group"}, "model": "auth.permission"}, {"pk": 25, "fields": {"content_type": 9, "codename": "add_user", "name": "Can add user"}, "model": "auth.permission"}, {"pk": 26, "fields": {"content_type": 9, "codename": "change_user", "name": "Can change user"}, "model": "auth.permission"}, {"pk": 27, "fields": {"content_type": 9, "codename": "delete_user", "name": "Can delete user"}, "model": "auth.permission"}, {"pk": 28, "fields": {"content_type": 10, "codename": "add_contenttype", "name": "Can add content type"}, "model": "auth.permission"}, {"pk": 29, "fields": {"content_type": 10, "codename": "change_contenttype", "name": "Can change content type"}, "model": "auth.permission"}, {"pk": 30, "fields": {"content_type": 10, "codename": "delete_contenttype", "name": "Can delete content type"}, "model": "auth.permission"}, {"pk": 31, "fields": {"content_type": 11, "codename": "add_session", "name": "Can add session"}, "model": "auth.permission"}, {"pk": 32, "fields": {"content_type": 11, "codename": "change_session", "name": "Can change session"}, "model": "auth.permission"}, {"pk": 33, "fields": {"content_type": 11, "codename": "delete_session", "name": "Can delete session"}, "model": "auth.permission"}, {"pk": 34, "fields": {"content_type": 12, "codename": "add_revision", "name": "Can add revision"}, "model": "auth.permission"}, {"pk": 35, "fields": {"content_type": 12, "codename": "change_revision", "name": "Can change revision"}, "model": "auth.permission"}, {"pk": 36, "fields": {"content_type": 12, "codename": "delete_revision", "name": "Can delete revision"}, "model": "auth.permission"}, {"pk": 37, "fields": {"content_type": 13, "codename": "add_version", "name": "Can add version"}, "model": "auth.permission"}, {"pk": 38, "fields": {"content_type": 13, "codename": "change_version", "name": "Can change version"}, "model": "auth.permission"}, {"pk": 39, "fields": {"content_type": 13, "codename": "delete_version", "name": "Can delete version"}, "model": "auth.permission"}, {"pk": 1, "fields": {"last_name": "Admin", "is_active": true, "last_login": "2015-09-28T18:48:13Z", "is_superuser": true, "user_permissions": [], "is_staff": true, "first_name": "Test", "email": "", "username": "admin", "password": "pbkdf2_sha256$20000$N3u86FBpMEpU$DujXnbZ4gkEAKJ++bMFTvYrZdvI7os2FfKIVm/N5t20=", "groups": [], "date_joined": "2015-09-24T16:20:22Z"}, "model": "auth.user"}, {"pk": 1, "fields": {"comment": "Initial version.", "date_created": "2015-09-24T20:59:27.139Z", "manager_slug": "default", "user": 1}, "model": "reversion.revision"}, {"pk": 2, "fields": {"comment": "Initial version.", "date_created": "2015-09-24T21:02:16.169Z", "manager_slug": "default", "user": 1}, "model": "reversion.revision"}, {"pk": 3, "fields": {"comment": "Initial version.", "date_created": "2015-09-24T21:03:55.149Z", "manager_slug": "default", "user": 1}, "model": "reversion.revision"}, {"pk": 4, "fields": {"comment": "Initial version.", "date_created": "2015-09-24T21:04:38.113Z", "manager_slug": "default", "user": 1}, "model": "reversion.revision"}, {"pk": 1, "fields": {"action_flag": 1, "change_message": "", "object_id": "1", "action_time": "2015-09-24T20:51:36.678Z", "content_type": 3, "object_repr": "Google Chrome", "user": 1}, "model": "admin.logentry"}, {"pk": 2, "fields": {"action_flag": 2, "change_message": "Changed image.", "object_id": "1", "action_time": "2015-09-24T20:55:33.148Z", "content_type": 3, "object_repr": "Google Chrome", "user": 1}, "model": "admin.logentry"}, {"pk": 3, "fields": {"action_flag": 1, "change_message": "", "object_id": "2", "action_time": "2015-09-24T20:56:00.574Z", "content_type": 3, "object_repr": "Modern Web Browser", "user": 1}, "model": "admin.logentry"}, {"pk": 4, "fields": {"action_flag": 2, "change_message": "Changed image.", "object_id": "2", "action_time": "2015-09-24T20:57:43.912Z", "content_type": 3, "object_repr": "Modern Web Browser", "user": 1}, "model": "admin.logentry"}, {"pk": 5, "fields": {"action_flag": 1, "change_message": "", "object_id": "1", "action_time": "2015-09-24T20:59:27.129Z", "content_type": 1, "object_repr": "Create a Basic Website", "user": 1}, "model": "admin.logentry"}, {"pk": 6, "fields": {"action_flag": 1, "change_message": "", "object_id": "2", "action_time": "2015-09-24T21:02:16.168Z", "content_type": 1, "object_repr": "Write Some CSS", "user": 1}, "model": "admin.logentry"}, {"pk": 7, "fields": {"action_flag": 1, "change_message": "", "object_id": "3", "action_time": "2015-09-24T21:03:55.147Z", "content_type": 1, "object_repr": "Write Some HTML", "user": 1}, "model": "admin.logentry"}, {"pk": 8, "fields": {"action_flag": 1, "change_message": "", "object_id": "4", "action_time": "2015-09-24T21:04:38.112Z", "content_type": 1, "object_repr": "Intro to Web Hosting", "user": 1}, "model": "admin.logentry"}, {"pk": 9, "fields": {"action_flag": 1, "change_message": "", "object_id": "1", "action_time": "2015-09-24T21:05:36.755Z", "content_type": 5, "object_repr": "HTML", "user": 1}, "model": "admin.logentry"}, {"pk": 10, "fields": {"action_flag": 2, "change_message": "Changed username, first_name, last_name and email.", "object_id": "1", "action_time": "2015-09-28T18:48:27.471Z", "content_type": 9, "object_repr": "admin", "user": 1}, "model": "admin.logentry"}, {"pk": 1, "fields": {"status": "published", "updated_by": 1, "title": "Create a Basic Website", "reference_blurb": "Learn the basics of web development, from idea to polished product: how to wrap your content in HTML, to style it with CSS, and publish it online.", "created_at": "2015-09-24T20:59:27.125Z", "version": 1443127420419348, "banner_image": "uploads/learn-illustration-01.png", "content": "<narrative-text>\r\n  <p>This collection pulls together the info you'll need to get a basic website up and running: getting your machine ready, designing an amazing site, easing into a logical workflow, and of course, all the thrills and spills of learning the best of the basic web--HTML and CSS.</p>\r\n\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you should download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref=\"ftp-program\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"Getting organized: Boring but essential logistics\">\r\n  <p>Setting up a work environment might seem like a hassle, but trust us--it will save you headaches down the road. Websites are essentially just a collection of files, so being organized will help prevent errors later on.</p>\r\n\r\n  <h3>What we do</h3>\r\n  <p>We're setting up a dedicated spot on your machine for all the files you'll create: your technical docs, as well as images, videos, or other assets you're going to display.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Putting those files in organized folders\r\n    enables us to give the browser exact directions to the\r\n    locations of those files. So, no search or spotlight\r\n    allowed&#8212;know where your files are so you can send the browser\r\n    down the right path. Broken paths, missing files, or imprecise\r\n    directions are common reasons things break. Ever seen a 404\r\n    message? That\u2019s why!</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Create a new folder somewhere easy, like your desktop.</li>\r\n    <li>Give it a name with no spaces or caps.</li>\r\n    <li>Open up your text editor (probably Sublime if you're following along) and go to file > new.</li>\r\n    <li>Then save it in your new folder as <code>index.html</code>. You <em>must</em> include the file extension! This is our first signal to the browser about what we'll be doing in here.</li>\r\n    <li>Head into your browser of choice (Chrome, cough cough), go to file > open, and select the file we just made.</li>\r\n    <li>Take a look at your beautiful website? ...jk there's nothing there. That's good. Proceed!</li>\r\n  </ol>\r\n\r\n\r\n\r\n\r\n  <info-block header=\"Danger, danger! When moving files...\" emoji=\"&#x1F47F;\">\r\n    <p>If you're ever going to move your files around, make sure to close out of your text editor while you do. Poor Sublime will keep editing the old doc, and will keep saving it in the old place. Once again: close Sublime, move files, reopen to edit in Sublime.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n\r\n<step-block header=\"Write some HTML\">\r\n  <p>Ah, HTML. You've heard so much, and yet, know so little. Let us help. <glossary-term>HTML</glossary-term> is the backbone of the\r\n    web, and the beginning of any website. It's our way of telling the browser what's what--this is a paragraph, this is a list, this is an image of Steve Buscemi. Dive into this standalone lesson on HTML to see how it works and to put together your first page.</p>\r\n\r\n  <lesson-ref ref=\"write-some-html\"></lesson-ref>\r\n\r\n  <info-block header=\"Did you know...\" emoji=\"&#x1F419;\">\r\n    <p>Beginners often think they're stumbling with CSS and JavaScript, but the culprit is actually HTML. Make sure you spend some time really understanding the <glossary-term>DOM</glossary-term> and bulletproofing your HTML before diving too deep elsewhere. (Or at least return to it when you hit problems.)</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<lesson-block>\r\n  <h2>Workflow: We learned it the hard way</h2>\r\n  <h3>Here\u2019s the sad truth: When things go south, it\u2019s always your\r\n  fault.</h3>\r\n  <p>At least when it comes to building websites. We can\u2019t\r\n  vouch for that thing with your ex. More than likely, the page is not\r\n    <em>just acting crazy</em>. It\u2019s acting crazy because you <em>told</em> it to act\r\n  crazy. So here\u2019s a strategy to help you cut down on the amount of\r\n  time you spend troubleshooting.</p>\r\n\r\n  <p><strong>Change, save, refresh, check.</strong></p>\r\n    <p>If you make a lot of changes and then notice things are\r\n    broken, it\u2019s tough to tell what exactly broke, and when. So\r\n      <strong>work in very small bursts</strong>. Check the results frequently. Then,\r\n    when something breaks, you know where things went wrong--it\u2019s what you just did.</p>\r\n\r\n    <ul>\r\n      <li><strong>Change</strong> something in your HTML and/or CSS\r\n      documents.</li>\r\n\r\n      <li><strong>Save</strong> every file you touched.</li>\r\n\r\n      <li><strong>Refresh</strong> in your browser.</li>\r\n\r\n      <li><strong>Check</strong> to make sure you\u2019re seeing what\r\n      you want to.</li>\r\n    </ul>\r\n</lesson-block>\r\n\r\n<step-block header=\"Prepare for CSS\" id=\"prepareCSS\">\r\n  <p>Just like we did with HTML, we've got to get our files hooked up and running before we can start to style our pages in earnest. That's right--we're about to finally take the semantically beautiful but ultimately ugly HTML we've written and apply some style to it. First, though, the prep:</p>\r\n  <h3>What we do</h3>\r\n  <p>We're creating a <glossary-term>stylesheet</glossary-term> for our webiste and linking it to our HTML file. </p>\r\n\r\n  <h3>Why we do</h3>\r\n    <p>CSS is a critical piece of any site--it's the bootiful part. Without this link, our browser would never know that these styles are associated with this site (aka this HTML file). Once we're done, when the browser reads our HTML file, it will see this link, fetch our styles, and apply them to the site. Good browser. Here's a treat.</p>\r\n  <h3>How we do</h3>\r\n  <ul>\r\n    <li>Create a new file in your text editor by going to <code>file > new</code>.</li>\r\n    <li>Save it in your site folder as <code>style.css</code>. Don't forget the extension!</li>\r\n    <li>To tell your site where it can find your stylesheet, link to\r\n      it in your <code>&lt;head&gt;</code>.</li>\r\n  </ul>  \r\n  <code-block>\r\n&lt;head&gt;\r\n    &lt;link rel=&#39;stylesheet&#39; href=&#39;styles.css&#39;&gt;\r\n&lt;/head&gt;\r\n                               \r\n</code-block>\r\n   \r\n</step-block>\r\n\r\n\r\n\r\n<step-block header=\"Write some CSS\">\r\n  <p>It's the moment we've all been waiting for. Time to dress up your HTML and make something people actually want to look at. The enabler here is <glossary-term>CSS</glossary-term>, aka Cascading Style Sheets, the governing documents for the look and feel of your site. It's a good bit bigger and more complicated than HTML, and with great power comes great responsibility, young Peter. Design wisely.</p>\r\n  <lesson-ref ref=\"write-some-css\"></lesson-ref>\r\n\r\n</step-block>\r\n<!--\r\n<lesson-block header=\"Good web design practices\">\r\n  <h3>Because there&#39;s a big difference between writing up some code and actually\r\n  designing a website.</h3>\r\n  <p>CSS is just the language that we use to implement style. If you're left wondering how to <em>choose</em> those styles and make something that looks a little more recent than the web circa 1998, check out our series on Good Web Design Practices. It'll walk you through the basics of design.</p>\r\n\r\n  <lesson-ref ref=\"good-web-design-practices\"></lesson-ref>\r\n</lesson-block>-->\r\n\r\n<step-block header=\"Publishing your site for all to see\">\r\n  <p>Thus far, we've just been building the site on your machine--which nobody can access, with good reason. (Hello, embarrasing search history from that time you got obsessed with you know what.) So to get your site out to the rest of the world, you've got to get a copy of your files onto a server that others can access. This means securing a\r\n  domain name (your URL) and hosting your files somewhere.</p>\r\n\r\n  <lesson-ref ref=\"intro-web-hosting\"></lesson-ref>\r\n\r\n  <info-block header=\"Did you know... you got served?\" emoji=\"&#x1F44A;\">\r\n    <p>A server is a special computer dedicated to holding and serving up web\r\n    files. Every time you type a URL into your browser, it makes a request--several, actually--for your website's files. The server then sends them along and your browser (aka the client) assembles everything into the visual experience you know the web to be.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<lesson-block header=\"That's a wrap\">\r\n  <p>Now that your website is live, check it out! Click on all of\r\n  the links to make sure they\u2019re directing to the right places and\r\n  that all the images are showing. If you have to fix something,\r\n  change in on your computer, save, then re-upload the edited file\r\n  onto your hosting server. Did we say good job yet? No? Good\r\n  job!</p>\r\n</lesson-block>\r\n", "created_by": 1, "updated_at": "2015-09-24T20:59:27.125Z", "slug": "create-basic-website"}, "model": "learncms.lesson"}, {"pk": 2, "fields": {"status": "published", "updated_by": 1, "title": "Write Some CSS", "reference_blurb": "Wondering why your site\u2019s looking so ugly? HTML just says what\u2019s what and gives the page structure. CSS is where the real fun starts\u2013it will fix things faster than Fix-it Felix.", "created_at": "2015-09-24T21:02:16.162Z", "version": 1443127589456180, "banner_image": "uploads/learn-illustration-01.png", "content": "<narrative-text>\r\n  <p>So you\u2019ve built a webpage. Or at least, you think it\u2019s a\r\n  webpage. It looks very different from what you\u2019re used to seeing\r\n  on the Internet\u2014there are no fun, bright colors, no sleek\r\n  interfaces, no gifs of adorable mammals.</p>\r\n\r\n  <p>Let's fix all that. <glossary-term>CSS</glossary-term>, or Cascading Style Sheets, is ready to help. And we're here to help with the CSS.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you'll need to download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"text-editor\"></capsule-unit>\r\n\r\n    <capsule-unit ref='modern-web-browser'></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"What it looks like\">\r\n  <h3>What we do</h3>\r\n  <p>Before we dive into all the cool stuff, it's worth just looking at how to construct a proper CSS <glossary-term>declaration</glossary-term>. Then you can create your own recipes to get things looking like you want them.</p>\r\n  <h3>Why we do</h3>\r\n  <p>If your biggest enemy in HTML is forgetting to close a tag, its CSS counterpart is forgetting that semi-colon at the end of a declaration. This lets the browser know you're done with that instruction so it can move along. If the semi-colon <em>isn't</em> there, the browser thinks you're still working on the same property, and things go beserk.</p>\r\n  <h3>How we do</h3>\r\n  <p>The syntax for CSS is a lot simpler than the syntax for HTML.\r\n  Are you ready for it? Here it is:</p>\r\n  <code-block lang=\"css\">\r\nelement {\r\n  property: value;\r\n  property: value;\r\n}\r\n                       \r\n</code-block>\r\n  <p>The <strong>element</strong> is the HTML element you want to target, like an  <code>h1</code>. But we're referencing it in CSS, so you don't need the angle brackets.</p>\r\n  <p>Think of <strong>properties</strong> as the basic vocabulary set of CSS. It defines what you want to change, then the <code>value</code> specifies exactly how. Common properties\r\n  include <code>background-color</code>, <code>height</code>,\r\n  <code>width</code>, and others. Each property has a set of acceptable values that can go along with it. So you can set <code>color</code> to <code>blue</code>, for example, but you can't set it to \"pig\".</p>\r\n  <p>The key to CSS is digging around for the right property-value one-two punches that will make your page look amazing. Like HTML, you've got to spend some time trying out the vocab to see what makes the most sense.</p>\r\n\r\n</step-block>\r\n\r\n<step-block header=\"Making our first changes: Do something ugly!\">\r\n  <h3>What we do</h3>\r\n  <p>We're going to change the background color of our page to beige.</p>\r\n  <h3>Why we do</h3>\r\n  <p>When you first set things up, it's good to do something obvious and ugly so that you know <a href=\"https://learn.knightlab.com/lesson/create-basic-website/#prepareCSS\">your setup is working</a>.</p>\r\n  <h3>How we do</h3>\r\n\r\n  <ol>\r\n    <li>First up: Deciding what to target. Since we want to change the background color of the whole page, we have to grab a top-level tag. For us, that's <code>&lt;body&gt;</code>.</li>\r\n    <li>From there, we've got to pick a property and value. <a href=\"http://www.w3schools.com/cssref/\">Here's a list</a> of all the properties, but a quick Google search is just as good. We're after <code>background-color</code> and <code>beige</code>.</li>\r\n    <li>Type the following into your CSS file:</li>\r\n  <code-block lang=\"css\">\r\nbody {\r\n  background-color: beige;\r\n}\r\n                               \r\n</code-block>\r\n  </ol>\r\n  <info-block emoji=\"&#x1F64B;\" header=\"Does it recognize the color 'Tango Red?'\">\r\n  \r\n    <p>Nope. (Though we like it too.) Browsers know the basics, like red, blue, and green, but if you want to get sophisticated, you've got to go another route. For a more precise method of identifying color, you'll need to know a little more about how color itself works. Look into <glossary-term>RGB</glossary-term>, <glossary-term>HSB</glossary-term>, and <glossary-term>hex values</glossary-term>. Consider making your own palette or browsing others' at sites like <a href=\"https://color.adobe.com/\">Adobe Color</a>.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Selecting the right content\">\r\n  <p>Our website\u2019s looking better already. By playing with\r\n  elements\u2019 property and value pairs, we can modify just about\r\n  anything, from size to color to position.</p>\r\n\r\n    <p>But there\u2019s still a problem. As of right now, we don\u2019t have\r\n    any way of grouping certain elements together in our HTML.\r\n    Let\u2019s say we wanted to have all of our introductory information\r\n    have the same <code>background-color</code>. We could try\r\n    styling each piece at once, like this:</p>\r\n    <code-block lang=\"css\">\r\nh1 {\r\n  background-color: firebrick;\r\n}\r\n\r\nimg {\r\n  background-color: firebrick;\r\n}\r\n\r\np {\r\n  background-color: firebrick;\r\n}\r\n                       \r\n</code-block>\r\n\r\n    <p>This is pretty laborious, and it doesn\u2019t really give us what we want. Instead of putting everything in one red box, we have\r\n    three separately colored blocks. If only there was some way to\r\n    go in our HTML and put the elements into one larger,\r\n    over-arching element. Oh, wait there is.</p>\r\n\r\n  <h3>Blast from your HTML past</h3>\r\n  \r\n  <p><a href=\"https://learn.knightlab.com/lesson/write-some-html/#divExplainer\">Remember how</a> in the HTML lesson we had you wrap all your\r\n  introductory information in a <code>&lt;div&gt;</code>? Yeah,\r\n  those were good times. And now we get to actually put that\r\n  <code>&lt;div&gt;</code> to use.</p>\r\n\r\n  <p>That <code>&lt;div&gt;</code> gives us a way to target everyhting inside.</p>\r\n  <ol>\r\n    <li>Nix the code we put in before, if you followed along.</li>\r\n    <li>Usig the <code>&lt;div&gt;</code> as our target element, get this going in your CSS file:</li>\r\n  <code-block lang=\"css\">\r\ndiv {\r\n  background-color: firebrick;\r\n}\r\n    </code-block>\r\n\r\n<li>Head over to your browser and refresh--you should see one big chunk of, you guessed it, firebrick red. Who makes up these names, anyway?</li>\r\n    <li>If you're not seeing it, check to make sure that <em>both</em> your HTML and CSS files have been saved, and that your <code>&lt;div&gt;</code> is set up correctly in your HTML file. Then triple check your syntax.</li> \r\n    </ol>\r\n</step-block>\r\n\r\n<lesson-block header=\"Back to HTML for a sec...\">\r\n  <p>So far in our CSS, when we&#39;ve been targeting HTML elements, it's affected <em>all</em> the elements. That's great for making sure your paragraphs all look the same, but what about special-use cases? What if you want to style your bylines differently from your other grafs?</p>\r\n  <p>Part of getting good at CSS is understanding the relationship between HTML and CSS. In order to target specific items or groups of items, we've got to identify what those are in HTML. In other words, we've got to give CSS something to hook onto, other than the element names.</p>\r\n  <p>Enter <glossary-term>classes</glossary-term> and <glossary-term>IDs</glossary-term>.</p>\r\n  <p>These are attributes you attach to HTML elements. A class is typically used to associate multiple things--several bylines, for example. An ID is a unique identifier--so you only use these if there's only one. Here's how it looks:</p>\r\n  <code-block>\r\n    &lt;h1 id='featured-headline'&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\r\n   &lt;p class='byline'&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\r\n   &lt;p&gt;Amazing lede goes here!&lt;/p&gt;\r\n    &lt;p&gt;Followed by an incredible nut graf.&lt;/p&gt;\r\n    &lt;p&gt;Because we're news hounds.&lt;/p&gt;\r\n    &lt;p&gt;By Walter S. Gates III, Esq.&lt;/p&gt;\r\n  </code-block>\r\n  \r\n  </lesson-block>\r\n\r\n<step-block header='Real classy: Getting real specific'>\r\n  \r\n  <h3>What we do</h3>\r\n<p>In our sample code, we're going to change color of our text in a couple of different places.</p>\r\n  <h3>Why we do</h3>\r\n  <p>We need some way of labeling the elements we want to change, and then applying rules to those specific elements. We don't want to change <em>all</em> our text uniformly.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Back in your HTML document, add a class to your header and\r\n  paragraph and call it &quot;white-text,&quot; like this:</li>\r\n  <code-block>\r\n&lt;h1 class=&#39;white-text&#39;&gt;\r\n  // your text\r\n&lt;h1&gt;\r\n\r\n&lt;p class=&#39;white-text&#39;&gt;\r\n  // your text\r\n&lt;p&gt;\r\n                       \r\n</code-block>\r\n\r\n  <ol>Then add an ID to your ordered list and call it\r\n  &quot;gray-text.&quot;</ol>\r\n  <code-block>\r\n&lt;ol id=&#39;gray-text&#39;&gt;\r\n  // list items\r\n&lt;ol&gt;\r\n    \r\n</code-block>\r\n\r\n  <li>Next up: Targeting classes and IDs instead of vanilla HTML elements. To modify an element based\r\n  on its class, you need to add a period before the class name in\r\n  the CSS file.</li>\r\n  <code-block lang=\"css\">\r\n.white-text {\r\n  color: white;\r\n}\r\n                       \r\n</code-block>\r\n\r\n  <li>To target an ID, simply use a pound sign instead of a\r\n  period.</li>\r\n  <code-block lang=\"css\">\r\n#gray-text {\r\n  color: gray;\r\n}\r\n                               \r\n</code-block>\r\n    <li>Remember to save both your HTML and CSS, and head over to the browser to take a look. If things look funky, double check to make sure your spelling is the same in both places. CSS is case sensitive!</li>\r\n  </ol>\r\n\r\n  <info-block emoji=\"&#x2728;\" header=\"Be descriptive when naming names\">\r\n\r\n    <p>Classes and IDs not only make it easier to style your code,\r\n    but also present a good opportunity to help with organization and\r\n    readability. They allow people (including you!)\r\n    to understand the purpose of each HTML element at a glance.\r\n    Give your classes and IDs descriptive names so you can come\r\n    back to them more easily when you need to modify them\r\n    again.</p>\r\n  </info-block>\r\n</step-block>\r\n<!--\r\n<step-block header=\"Positions, everyone!\">\r\n  <p>Play around with the display and positioning of your\r\n  site&#39;s elements. The Box Model is a useful tool in\r\n  visualizing where things go.</p>\r\n\r\n  <lesson-ref ref=\"box-model\"></lesson-ref>\r\n</step-block>\r\n-->\r\n<step-block header=\"Making a nav bar\">\r\n  <p>What we\u2019ve done so far is nice and dandy, but your\r\n    website still doesn\u2019t look like a website. Let\u2019s change that.</p>\r\n  <h3>What we do</h3>\r\n  <p>You\r\n  know what a navigation bar is, right? That thing at the top or\r\n  side of a website that gives you quick links to key pages on a\r\n  website. Let\u2019s make one of those.  Let\u2019s turn our unordered list of social media links into\r\n  a navbar.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Navbars might seem complicated, but they\u2019re really just styled\r\n  lists. If you think about it, this makes sense--a nav bar is really just a bunch of links. Or a <em>list</em> of links.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>First, let\u2019s make this easier on our future selves by applying\r\n  a descriptive ID to our unordered list. Let\u2019s call it\r\n  &quot;navbar.&quot;</li>\r\n  <code-block>\r\n&lt;ul id=&#39;navbar&#39;&gt;\r\n  // list items\r\n&lt;/ul&gt;\r\n                               \r\n</code-block>\r\n\r\n  <li>Now let\u2019s get rid of those ugly little bullets. In your CSS\r\n  document, target the <code>&lt;li&gt;</code>s nested in your\r\n  navbar ID and change the <code>list-style-type</code> to\r\n  none.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li{\r\n  list-style-type: none;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Next, we want our links to all be in a row instead of stacked\r\n  on top of each other. To change that, we\u2019ll affect the\r\n  <code>display</code> property.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li{\r\n  list-style-type: none\r\n  display: inline-block;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>The links seem a little too close to each other, so let\u2019s\r\n  adjust the width of their <code>&lt;a&gt;</code> elements. We\u2019re\r\n  adjusting the <code>&lt;a&gt;</code> tags rather than the\r\n  <code>&lt;li&gt;</code> because we want the user to be able to\r\n  click on the link from anywhere inside the box that holds the\r\n  link. We need the links to have a display value of\r\n  <code>block</code> in order for the width to apply to them,\r\n  however.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li a{\r\n  display: block;\r\n  width: 120px;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Great! Now let\u2019s center the text for the links inside their\r\n  boxes and provide some vertical padding.</li>\r\n  <code-block lang=\"css\">\r\n#navbar li a{\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Something\u2019s still a bit off: the placement of our navbar right\r\n  now just doesn\u2019t make sense. Navbars are supposed to be at the\r\n  top of the page, but right now our <code>&lt;ul&gt;</code> is\r\n  buried. In your HTML file, move the <code>&lt;ul&gt;</code> tag\r\n  and its contents to the top of the body, above the\r\n  <code>&lt;div&gt;</code>.</li>\r\n\r\n  <li>Now when we refresh the page the position of the navbar makes\r\n  sense, although it still doesn\u2019t look quite right visually.\r\n  That\u2019s because of the top margin. The navbar has some top margin\r\n  by default, which is keeping it from going to the top of the\r\n  page. To fix that, change the display of the navbar to be\r\n  <code>inline-block</code> and get rid of the top margin.</li>\r\n  <code-block lang=\"css\">\r\n#navbar {\r\n  display: inline-block;\r\n  margin-top: 0;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>We want our navbar to stretch across the whole screen, so we\r\n  need to set its width to 100%. We also want it to be distinct\r\n  from the rest of the page, so we need to change its background\r\n  color as well. I\u2019ll be changing mine to\r\n  <code>darkslategray</code>, but you can pick whatever value you\r\n  want (try playing around with RGB or even hex values if you\u2019re\r\n  feeling adventurous).</li>\r\n  <code-block lang=\"css\">\r\n#navbar {\r\n  width: 100%;\r\n  background-color: darkslategray;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>At this point you might also want to change the color of the\r\n  links inside your navbar if the default blue is hard to see\r\n  against your background. Experiment with different\r\n  <code>font-family</code>, <code>color</code>, and other values\r\n  and find a combination you like. That\u2019s the fun with styling: you\r\n  can make it anything you want. Like literally almost\r\n  anything.</li>\r\n  \r\n  <li>Wait a minute. Notice how the contents of your website hovers a few pixels away from the top right corner of the screen? That's the online equivalent of \"I'm not touching you!\" Luckily, it's an easy fix&#8212;all you need to do is to tell your browser to not put a margin or any padding on your website, using this code:</li>\r\n\r\n    <code-block lang=\"css\">\r\nbody {\r\n  margin: 0 0 0 0;\r\n  padding: 0 0 0 0;\r\n}\r\n                               \r\n</code-block>\r\n  \r\n  <li>Our navbar is almost complete! But there\u2019s just one more thing\r\n  that would really seal the deal: user feedback. It would be cool\r\n  if we could change something on the screen so that whenever a\r\n  user hovered over a link they could be sure of what they were\r\n  doing.</li>\r\n\r\n  <li>Guess what? You can do that with CSS. We\u2019ve already covered a\r\n  few selectors, but there are so many more useful selectors that\r\n  can be applied in a variety of ways. One kind of selector is the\r\n  a &quot;pseudo-class&quot; which uses a colon (:) to select an\r\n  element which has a certain property. For example, if we wanted\r\n  to change the color of links that had already been visited, we\r\n  would target <code>a:visited</code> in our CSS. For our navbar,\r\n  we can respond to users by changing the background color of the\r\n  links they\u2019re hovering over. We\u2019ll use the <code>a:hover</code>\r\n  selector for that.</li>\r\n  <code-block>\r\n#navbar li a:hover{\r\n  background-color: black;\r\n}\r\n                               \r\n</code-block>\r\n\r\n  <li>Try it out! There are more useful selectors just like\r\n  <code>:hover</code> and <code>:visited</code>, and being familiar\r\n  with them can make your life a whole lot easier and make your\r\n  website that much more versatile.</li>\r\n  </ol>\r\n  </step-block>\r\n  <lesson-block header=\"Useful selectors\">\r\n\r\n    <dl>\r\n      <dt>\r\n        <code>.element {</code>\r\n        </dt>\r\n\r\n        <dd>The period allows you to select classes, which is very\r\n        useful for styling multiple elements at once</dd>\r\n     \r\n\r\n      <dt>\r\n        <code>#element {</code>\r\n        </dt>\r\n\r\n        <dd>Like the class selector, a pound sign allows you to\r\n        select an element based on its unique ID</dd>\r\n\r\n      <dt>\r\n        <code>element:hover {</code>\r\n        </dt>\r\n\r\n        <dd>The hover pseudo-class will apply rules to an element\r\n        once it sees a mouse hovering over it, and is extremely\r\n        useful in a wide range of applications</dd>\r\n\r\n      <dt>\r\n        <code>element[attr=&#39;val&#39;] {</code>\r\n        </dt>\r\n\r\n        <dd>This selector will only select instances of the element\r\n        which have <code>val</code> as the value for a given\r\n        attribute. For example, if you wanted to target all links\r\n        on your page that went to twitter.com, you\u2019d simply type\r\n        <code>a[href=\u2019twitter.com\u2019]</code></dd>\r\n\r\n      <dt>\r\n        <code>* {</code>\r\n        </dt>\r\n\r\n        <dd>The asterisk character by itself will select all\r\n        elements on the page, which can be useful if you want to\r\n        apply some common rules like zeroing margins and paddings.\r\n        The asterisk can also be used to select all children of an\r\n        element like so: <code>div * {...}</code>, but this isn\u2019t\r\n        very commonly used</dd>\r\n\r\n      <dt>\r\n        <code>element-a element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Putting a space between two elements will select all\r\n        instances of element-b on the page that are descendants of\r\n        an element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a, element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Adding a comma to separate elements rather than a space\r\n        applied the same rules to both elements. It\u2019s basically\r\n        just shorthand for <code>element-a { \u2026 } element-b { \u2026\r\n        }</code></dd>\r\n\r\n      <dt>\r\n        <code>element-a &gt; element-b {</code>\r\n        </dt>\r\n\r\n        <dd>Putting a greater-than sign between two elements is\r\n        similar to leaving a space in between, but now will only\r\n        target instances of element-b that are children, or direct\r\n        descendants, of element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a ~ element-b {</code>\r\n        </dt>\r\n\r\n        <dd>This selector will target all instances of element-b\r\n        that are siblings (that is, they share the same parent) of\r\n        an element-a</dd>\r\n\r\n      <dt>\r\n        <code>element-a + element-b {</code>\r\n        </dt>\r\n\r\n        <dd>The plus selector is similar to the tilde in that it\r\n        also selects siblings, but now will only select instances\r\n        of element-b that appear immediately after element-a</dd>\r\n\r\n      <dt>\r\n        <code>element:before { , element:after {</code>\r\n        </dt>\r\n\r\n        <dd>The <code>:before</code> and <code>:after</code> pseudo\r\n        selectors can be used to modify the space immediately\r\n        before or after your element, and have been used in a wide\r\n        variety of applications, most notably the <a href=\r\n        \"http://stackoverflow.com/questions/8554043/what-is-clearfix\">\r\n        clearfix hack</a></dd>\r\n    </dl>\r\n  </lesson-block>\r\n\r\n<step-block header=\"Style Guided\">\r\n  <p>That... was a lot. We hope we\u2019ve demystified the\r\n  process for you. Creating websites isn\u2019t magic&#8212;it\u2019s just\r\n  combining different CSS properties and values with the structure of your\r\n  HTML in a specific way. Once you get the hang of it, you\u2019ll be\r\n  surprised to see the things you can do with pure CSS, like make an\r\n  entire functioning <a href=\r\n  \"http://codepen.io/ziga-miklic/pen/Fagmh\" target=\"_blank\">tic-tac-toe\r\n  game</a>.</p>\r\n  <p>Here's your <strong>code summary</strong>. Enjoy!</p>\r\n\r\n    <code-block lang=\"css\">\r\nbody {\r\n  background-color: beige;\r\n  margin: 0 0 0 0;\r\n  padding: 0 0 0 0;\r\n}\r\n\r\ndiv {\r\n  background-color: firebrick;\r\n}\r\n\r\n.white-text {\r\n  color: white;\r\n}\r\n\r\n#gray-text {\r\n  color: gray;\r\n}\r\n\r\n#navbar {\r\n  margin-top: 0;\r\n  background-color: darkslategray;\r\n  display: inline-block;\r\n  width: 100%;\r\n}\r\n\r\n#navbar li {\r\n  list-style-type: none;\r\n  display: inline-block;\r\n}\r\n\r\n#navbar li a {\r\n  display: block;\r\n  width: 120px;\r\n  text-align: center;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  color: white;\r\n  font-family: sans-serif;\r\n}\r\n\r\n#navbar li a:hover {\r\n  background-color: black;\r\n}\r\n                       \r\n</code-block>\r\n</step-block>\r\n", "created_by": 1, "updated_at": "2015-09-24T21:02:16.162Z", "slug": "write-some-css"}, "model": "learncms.lesson"}, {"pk": 3, "fields": {"status": "published", "updated_by": 1, "title": "Write Some HTML", "reference_blurb": "HTML is the most widely used coding language on the Internet, so you'll need a strong grasp on it before you go any further.", "created_at": "2015-09-24T21:03:55.144Z", "version": 1443127688438403, "banner_image": "uploads/learn-illustration-01.png", "content": "<narrative-text>\r\n  <p>Every page on the Internet starts as a humble HTML file. HTML\r\n  (HyperText Markup Language) is the backbone of the web, and the\r\n  beginning of any website. In this standalone lesson, you&#39;ll\r\n  learn the basics of HTML and be on your way in creating a website.</p>\r\n</narrative-text>\r\n\r\n<lesson-block header=\"Before we begin, you'll need to download:\">\r\n    <unit-group>\r\n    <capsule-unit ref=\"text-editor\">\r\n    </capsule-unit>\r\n    <capsule-unit ref=\"modern-web-browser\"></capsule-unit>\r\n\t</unit-group>\r\n</lesson-block>\r\n\r\n<step-block header=\"The Basics' Basics\">\r\n\r\n  \t<p>In the beginning, there was the word, and the word was !DOCTYPE. Only, it wasn't a word, it was an HTML tag. And it wasn't God, it was the <glossary-term>W3C</glossary-term>. In this section, we're going to look at the stuff that <strong>must be included</strong> in every HTML document. This first part is all about definitions and referrals: it tells the browser what's in the document and links to other crucial info.</p>\r\n  \r\n    \r\n\r\n  <h3>What we do</h3>\r\n  <p>We're inserting the non-negotiable structure for every HTML document you'll ever put together, ever. You might as well save this somewhere easy because you'll need it again and again and again...</p>\r\n  <h3>Why we do</h3>\r\n  <p>Without this first part, the browser has no idea what it's looking at. Many different file types make up a website--HTML, CSS, JS, data, images, etc.--so we have to identify ourselves and give the browser its marching orders.</p>\r\n  <h3>How we do</h3>\r\n  <p>Open your text editor and paste in the following code. We're essentially dividing\r\n  our page into two sections: a browser-related information section\r\n  (the <code>&lt;head&gt;</code>), and our visible content (the\r\n  <code>&lt;body&gt;</code>).</p>\r\n  <code-block>\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n  &lt;head&gt;\r\n    &lt;meta charset=&quot;utf-8&quot;&gt;\r\n    &lt;title&gt;&lt;/title&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n  &lt;/body&gt;\r\n\r\n&lt;/html&gt;\r\n    \r\n</code-block>\r\n\r\n \r\n \r\n</step-block>\r\n\r\n <lesson-block header=\"Break it down: The nitty gritty\">\r\n     <p>That wasn't you blindly cutting and pasting, was it? Please say no. Let&#39;s go over each\r\n  one:</p>\r\n   \r\n\t<dl>\r\n      <dt><code>&lt;!DOCTYPE html&gt;</code></dt>\r\n      <dd>\r\n        <p>Tells the browser that this is an HTML5 document.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;html lang=\"en\"&gt; ... &lt;/html&gt;</code></dt>\r\n      <dd>\r\n        <p>Announces to the browser that anything in between\r\n      them is HTML, and that the webpage is in English.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;head&gt;</code></dt>\r\n      <dd>\r\n        <p>Head elements go in between these tags, including the title\r\n      of the webpage and links to stylesheets or scripts.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></dt>\r\n      <dd>\r\n        <p>A meta tag contains metadata--or, the data about your data. Whoh.</p>\r\n      </dd>\r\n      \r\n      <dt><code>&lt;body&gt;</code></dt>\r\n      <dd>\r\n        <p>The tag we've all been waiting for. This monster contains the content of the document: text, images, etc.</p>\r\n      </dd>\r\n\r\n   </dl>\r\n\r\n</lesson-block>\r\n\r\n<step-block header=\"Turning on the lights: Adding a title and some test content\">\r\n  \r\n  <h3>What we do</h3>\r\n  <p>We're adding our initial content to the page. First up is the <code>title</code>, and we'll throw in a paragraph for kicks.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Before you get carried away, it's good practice to make a couple of small changes to your document just so you know everything's up and running properly--that you're editing the right file, and that you're able to see those changes. If you <em>can't</em> see those changes, you know something is wrong with your workflow.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Edit the title of your web page by naming it inside the\r\n  <code>&lt;title&gt;</code> tags. Titles usually describe the\r\n  purpose of your webpage, and can be anything from your name to \u201cShrine to Steve Buscemi.\u201d</li>\r\n  <code-block>\r\n&lt;title&gt;[Your Name]\u2019s Personal Website&lt;/title&gt;\r\n                       \r\n</code-block>\r\n\r\n    <li>Inside the <code>&lt;body&gt;</code> tag, create a\r\n  <code>&lt;p&gt;</code> tag with your name (from here on,\r\n  we&#39;re going to be putting everything in the body unless we\r\n  specifically state otherwise). If you don\u2019t know your name,\r\n  that\u2019s okay too. A little-known fact is that Steve Buscemi\u2019s\r\n  entity is in the public domain, so anyone can assume his identity\r\n  without fear of copyright infringement.</li>\r\n  <code-block>\r\n&lt;body&gt;\r\n  &lt;p&gt;Your Name&lt;/p&gt;\r\n&lt;/body&gt;\r\n                               \r\n</code-block>\r\n  </ol>\r\n\r\n  <info-block emoji=\"&#x1F633;\" header=\"Check Yourself Before You Wreck Yourself\">\r\n    <h4>Or, Check Yourself Before You Get Super Tangled Up in Your Own Code and No Longer Have a Clear Sense of Which Way is Up and then Spend Five Hours Debugging Only to Discover You Just Forgot to Close a Tag Somewhere.</h4>\r\n    <p>A good practice when building websites is to save and check\r\n    your work often. Take a moment now to save your code and open\r\n    your HTML file in the browser. (Or if it's already open, refresh.) Do this compulsively. If anything looks\r\n    off, look through your code again and make sure it matches the\r\n    examples.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header='Picture perfect: Adding images' id=\"imgExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>The <code>img</code> tag instructs the browser to go fetch an image file--like a <glossary-term>JPG</glossary-term>, <glossary-term>PNG</glossary-term>, or <glossary-term>GIF</glossary-term>.</p>\r\n  <h3>Why we do</h3>\r\n  <p>The image tag is different from what we've seen so far. First, it's \"self-closing,\" meaning it does <strong>not</strong> have a partner closing tag like /img. It's also got a mandatory <glossary-term>attribute</glossary-term> called <code>src</code> that points to where the browser can find the image file.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>Find an image to use. For now, grab something that has a full URL--something on the web, not on your machine.</li>\r\n<info-block header=\"Don't know how to get an image's URL?\" emoji=\"&#x2754;\">\r\n  <p>When you right-click on an image online, you should see a menu pop up. Look for language like \"Copy Image URL\". Select that option, and it should give you the exact web address for that image. If you want to double-check, feel free to paste it into your browser bar like you would any other URL.</p>\r\n    \r\n    </info-block>\r\n    <li>Using the self-closing <code>&lt;img&gt;</code> tag, insert an\r\n  image. Paste the image URL as the source attribute for the\r\n  <code>&lt;img&gt;</code> tag.</li>\r\n  <code-block>\r\n&lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/a/aa/Steve_Buscemi_%281996%29.jpg&#39;&gt;\r\n  </code-block>\r\n  </ol>\r\n \r\n\r\n  <info-block emoji=\"&#x270B;\" header=\"But what if I want to use an image on my computer?\">\r\n    <p>No problem. Simplify the name so it has no caps and spaces, like this: <code>stevie.jpg</code>. Make sure you put the image in the <em>same folder as your <code>index.html</code> file</em>. Then just put the image name instead of the url. So you'd have something like, <code>src=\"stevie.jpg\"</code>.</p>\r\n  </info-block>\r\n</step-block>\r\n\r\n<step-block header=\"Listing things: Order and purpose matters\" id=\"listExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>If HTML is about being as <glossary-term>semantic</glossary-term> as possible, you'll realize that sometimes you want to mark off collections of similar things--a bunch of links that make up your navigation, icons that link to your social media accounts, or a series of definitions.</p>\r\n  <h3>Why we do</h3>\r\n  <p>We group these things together as \"lists.\" There are three major kinds: unordered lists, or <code>&lt;ul&gt;</code>; ordered lists, or <code>&lt;ol&gt;</code>, and definition lists, or <code>&lt;dt&dt;</code>.</p> Unordered means that order or sequence doesn't really matter. Ordered lists you'd notch off with 1, 2, 3... and definition lists pull together terms and definitions. It's kind of a specialized form of unordered lists.\r\n  <h3>How we do</h3>  \r\n  <p>We're about to make an ordered list telling you how to do an unordered list. Whaaaaat.</p>\r\n  <ol>\r\n    <li>Create a list of your social media accounts with\r\n      the <code>&lt;ul&gt;</code> tag</li>.\r\n    <li>Each item is nested inside, and gets its own <code>&lt;li&gt;</code>\r\n    tag, which stands for <em>list item</em>.</li>\r\n  <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;Twitter&lt;/li&gt;\r\n  &lt;li&gt;Facebook&lt;/li&gt;\r\n  &lt;li&gt;LinkedIn&lt;/li&gt;\r\n  &lt;li&gt;Tumblr&lt;/li&gt;\r\n  &lt;li&gt;Email&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    <li>When you refresh your browser, you should see your list with a bunch of bullets setting each of these on a new line.</li>\r\n  </ol>\r\n</step-block>\r\n\r\n<step-block header=\"Link it up\" id=\"linkExplainer\">\r\n  <h3>What we do</h3>\r\n  <p>We're using the <code>&lt;a&gt;</code> tag to establish a link between words (or images) on our site to another URL. Aka, Gawker's bread and butter.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Linking things together is what the internet's all about! It puts the web in world wide web.</p>\r\n  <h3>How we do</h3>\r\n  <p>We're using another attribute here--<code>href</code>. This is for the URL we want to link to. The <code>&lt;a&gt;&lt;/a&gt;</code>tags go around the text or image you want to link up. So, <a href=\"http://www.homestarrunner.com/sbemail.html\" target=\"_blank\">this text</a>, for example, goes somewhere awesome.</p>\r\n  <ol>\r\n    <li>Let\u2019s go one level deeper with nesting. Using\r\n  <code>&lt;a&gt;</code> tags inside your <code>&lt;li&gt;</code>\r\n  tags, add links to send people directly to your social media\r\n  accounts.</li>\r\n  <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    <li>Head into your browser and refresh, then test each one of those links to make sure the page redirects to the right URL.</li>\r\n    <li>For kicks, add an extra attribute to one of these that tells the browser to open the link in a new window. That's the norm these days.</li>\r\n      <code-block>\r\n&lt;ul&gt;\r\n  &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39; target=&#39;_blank&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n                       \r\n</code-block>\r\n    <info-block  emoji=\"&#x270B;\" header=\"What if I want to link to email or jump down the page?\">\r\n      <p>Great question. An email address just gets a URL of \"mailto:youraddress@yo.com\". For linking on the same page, it's a two-part system <a href=\"#\">we'll get into later.</a></p>\r\n</info-block>\r\n  </ol>\r\n</step-block>\r\n\r\n<lesson-block header=\"Tag 'n' Bag: Our Top 20\">\r\n\r\n\r\n\r\n    <p>There are a wide range of tags that serve a multitude of\r\n    purposes. For a complete list, see the list of tags at <a href=\r\n    \"http://www.w3schools.com/tags/\">w3schools</a>. Some useful\r\n    tags in journalistic contexts include\r\n    <code>&lt;article&gt;</code>, <code>&lt;blockquote&gt;</code>,\r\n    and <code>&lt;cite&gt;</code>, among others. Don\u2019t worry about\r\n    memorizing them all&#8212;no one needs to know all the tags, and\r\n    they\u2019re all available for you to look up whenever you need it. You're BFFs with Google, right? That's sad, but we understand.</p>\r\n\r\n\t\t\t\t\t<dl>\r\n\t\t\t\t\t\t<dt><code>&lt;div&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Used for structure, typically as a generic way to identify a section off similar elements. More on that <a href=\"#divExplainer\">here</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;a&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n                      <dd>Adds links to your text. Full explainer <a href=\"#linkExplainer\">here</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Headings! Journalists take note: These puppies are used for headlines, section heads, and the like. It signals content more important than the lowly paragraph, with <code>h1</code> being the most important and <code>h6</code> being the least. You can use them multiple times, with the exception of the superlative <code>h1</code>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;p&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Paragraphs, though people use them for general purpose things like bylines, as well.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;img&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Tells the browser to retrive and display an image. More on that <a href=\"#imgExplainer\">up here</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Create and populate an unordered list, most commonly used for navigation bars. <a href=\"listExplainer\">Review that here</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;form&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>This bad boy creates a submittable form. Submit to me, people of the internet.</dd>\r\n                      <dt><code>&lt;input&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Creates an element on the page for user input, and <a href=\"http://www.w3schools.com/tags/tag_input.asp\">comes with a variety of types</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;button&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>Yes, English speakers. This makes a button on the page. HTML is so hard! <a href=\"http://www.w3schools.com/tags/tag_button.asp\">Details here</a>.</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;span&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to create a button on the page</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;article&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to contain an article</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;figure&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to contain an article</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;blockquote&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to contain a quote from a source</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;cite&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to cite a blockquote</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;code&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to denote a code snippet appearing on the screen\r\n\t\t\t\t\t\t\t</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;section&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to denote a section of the page, such as a chapter\r\n\t\t\t\t\t\t\t</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;title&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to give the webpage a title, which typically appears at the top of the tab or window</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;script&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n                      <dd>used to link client-side scripts to the document</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;link&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used mostly to link stylesheets to the document</dd>\r\n\t\t\t\t\t\t<dt><code>&lt;!--...--&gt;</code></dt>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<dd>used to comment out sections of HTML</dd>\r\n\t\t\t\t\t</dl>\r\n</lesson-block>\r\n<step-block header='The great divide' id=\"divExplainer\">\r\n  \r\n  <h3>What we do</h3>\r\n   <p>HTML deals with two things: content and structure. All the\r\n    tags we\u2019ve seen so far deal with actual content, but there are\r\n    also some very useful tags that are used to structure your\r\n    HTML, like the <code>&lt;div&gt;</code> tag.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Thinking forward to CSS, you might want to group certain items together to make them look alike. In traditional layouts, for example, you might have a sidebar. And you want that sidebar to look different--and to appear in a different place--than your main bar. To be able to \"grab\" all of that content, you'd use a <code>&lt;div&gt;</code> tag and clump it all together. <em>These paragraphs, browser, are part of the sidebar. Treat them as a group, or block.</em></p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n  <li>Use a <code>&lt;div&gt;</code> tag to group all your\r\n  introductory material together. That\u2019ll include your\r\n  <code>&lt;h1&gt;</code>, <code>&lt;img&gt;</code>, and\r\n    <code>&lt;p&gt;</code> tags at the beginning of your body.</li>\r\n    <li>When\r\n  it\u2019s done it should look like this:</li>\r\n  <code-block>\r\n&lt;div&gt;\r\n  &lt;h1&gt;My Personal Website&lt;/h1&gt;\r\n  &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\r\n  &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\r\n&lt;/div&gt;\r\n                       \r\n</code-block>\r\n\r\n  <li>If you refresh your page at this point, you\u2019ll notice that it\r\n  doesn\u2019t look any different than it did without the\r\n  <code>&lt;div&gt;</code> tag. And you\u2019re totally correct! While\r\n    adding <code>&lt;div&gt;</code>s don\u2019t <em>visually</em> affect the page\r\n  when applied (aside from creating a break if you added a\r\n  <code>&lt;div&gt;</code> within an inline element), they will\r\n  become extremely useful when it comes time to organize and style\r\n  your website. If you don\u2019t understand it 100 percent right now,\r\n  that\u2019s fine. Just trust us. We would never steer you wrong.</li>\r\n</step-block>\r\n\r\n<step-block header=\"That&#39;s all, folks\">\r\n  <p>And that&#39;s it! Review the index.html file in your browser\r\n  and make sure that everything is showing up. If something\r\n  isn&#39;t appearing, check your code to see if there are any\r\n  syntax errors or if you forgot to close any tags. Then bask in the glory of your fine work.</p>\r\n  <info-block emoji=\"&#x270B;\" header=\"Excuse me, nice try--but my website is very ugly.\">\r\n    <p>Oh, you noticed that too? Right--because HTML doesn't care about looking good. It's just markup. It says what is what and gets on with its life. You, however, still have work to do. <a href=\"https://learn.knightlab.com/lesson/create-basic-website/#prepareCSS\">Get ready for CSS</a>.</p>\r\n</info-block>\r\n\r\n</step-block>\r\n<lesson-block header=\"Code Summary\">\r\n\r\n    <code-block>\r\n&lt;!DOCTYPE HTML&gt;\r\n&lt;html lang=\"en\"&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=&#39;utf8&#39;&gt;\r\n    &lt;title&gt;My Personal Website&lt;/title&gt;\r\n    &lt;link rel=&#39;stylesheet&#39; href=&#39;styles.css&#39;&gt;\r\n    &lt;script src=&#39;main.js&#39;&gt;&lt;/script&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.twitter.com&#39;&gt;Twitter&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.facebook.com&#39;&gt;Facebook&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.linkedin.com&#39;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;http://www.tumblr.com&#39;&gt;Tumblr&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li&gt;&lt;a href=&#39;mailto:you@you.com&#39;&gt;Email&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    &lt;div&gt;\r\n      &lt;h1&gt;My Personal Website&lt;/h1&gt;\r\n      &lt;img src=&#39;https://upload.wikimedia.org/wikipedia/commons/thumb/9/90/Steve_Buscemi_2009_portrait.jpg/220px-Steve_Buscemi_2009_portrait.jpg&#39;&gt;\r\n      &lt;p&gt;Hi! This is my personal website!&lt;/p&gt;\r\n    &lt;/div&gt;\r\n    &lt;ol&gt;\r\n      &lt;li&gt;Writing HTML&lt;/li&gt;\r\n      &lt;li&gt;Populating Lists&lt;/li&gt;\r\n    &lt;/ol&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n                               \r\n</code-block>\r\n  \r\n</lesson-block>\r\n", "created_by": 1, "updated_at": "2015-09-24T21:03:55.144Z", "slug": "write-some-html"}, "model": "learncms.lesson"}, {"pk": 4, "fields": {"status": "published", "updated_by": 1, "title": "Intro to Web Hosting", "reference_blurb": "When your site is ready, you\u2019ll upload your files to your hosting server using a File Transfer Protocol (FTP) client. (We like Cyberduck and FileZilla.) Make sure that your files appear on your server the same way that they do in the site folder on your computer, or else your site may not work properly.", "created_at": "2015-09-24T21:04:38.110Z", "version": 1443127731404128, "banner_image": "uploads/learn-illustration-01.png", "content": "<narrative-text>\r\n  <p>So you&#39;ve written some code, and after opening those files\r\n  in your browser you are able to confirm that those files do\r\n  indeed make a website. You&#39;re super excited to show all your\r\n  friends and family, but how will other people see it? As of right\r\n  now, those files are just living in a folder on your computer and it&#39;s\r\n  not very practical to send all your website files to every person\r\n  who wants to see it.</p>\r\n\r\n  <p>What you need is a server, a special computer dedicated to\r\n  housing your files and making sure that people can get\r\n  them with a few keystrokes. In this lesson, we'll walk you through getting a URL, finding a hosting server, and publishing your site.</p>\r\n</narrative-text>\r\n\r\n<lesson-block>\r\n  <h2>Before we begin, you'll need to download:</h2>\r\n\r\n  <unit-group>\r\n    <capsule-unit ref=\"ftp-program\"></capsule-unit>\r\n  </unit-group>\r\n</lesson-block>\r\n\r\n\r\n<step-block header=\"Purchase a domain name\">\r\n  <h3>What we do</h3>\r\n  <p>We're getting you the URL of your dreams. Maybe. If it's still available.</p>\r\n  <h3>Why we do</h3>\r\n  <p>Every address on the web needs to be unique--that way users are sure they're getting the bona fide content they're looking for, and not a different site every time they request the same URL.</p>\r\n  <h3>How we do</h3>\r\n  <ol>\r\n    <li>First, search for a domain name to see if it's\r\n  available.</li>\r\n<info-block emoji=\"&#x2757;\" header=\"\">\r\n  <p>Here are five popular services that offer domain\r\n  names:</p>\r\n\r\n  <ul>\r\n    <li>NameCheap</li>\r\n\r\n    <li>Hover</li>\r\n\r\n    <li>Google Domains</li>\r\n\r\n    <li>1&1</li>\r\n\r\n    <li>GoDaddy</li>\r\n  </ul>\r\n</info-block>\r\n<li>Once you've got something good, pay up. You're purchasing ownership on a monthly or yearly basis. You're buying the rights to the name--nothing more.</li>\r\n  \r\n  </ol>\r\n  </step-block>\r\n  <lesson-block header=\"Additional services\">\r\n    <p>These sites offer a lot of additional services that you\r\n    don\u2019t necessarily need. Don\u2019t be tricked into buying anything\r\n    you don\u2019t need just because they sound fancy&#8212;domain\r\n    registrars are businesses after all, and they\u2019re looking to\r\n    make money off of you. Here\u2019s a list of common features that\r\n    registrars often try to bundle with your domain. You can decide\r\n    for yourself whether it sounds like you need it.</p>\r\n\r\n    <dl>\r\n      <dt>Hosting</dt>\r\n\r\n        <dd>For a simple website, like a portfolio site or personal\r\n        webpage, using the domain registrar\u2019s hosting may be the\r\n        simplest option. As you go on to develop bigger, more\r\n        complex projects (especially those that require server-side\r\n        scripts), you\u2019ll probably want to look toward other hosting\r\n        options.</dd>\r\n\r\n      <dt>Local listing</dt>\r\n\r\n        <dd>Listing a site locally makes it easier to find a website\r\n        by putting it on search engines such as Yelp, GoogleMaps\r\n        and FourSquare. If your website is for a business, local\r\n        listing might be a good idea to attract new customers. It\u2019s\r\n        probably not your priority for a portfolio or personal\r\n        site, but that\u2019s up to you.</dd>\r\n\r\n      <dt>Private Email</dt>\r\n\r\n        <dd>Most domain registrars will offer email forwarding for\r\n        free, which allows you to forward all emails sent to a\r\n        specified address on your website to a pre-existing email\r\n        account. This keeps everything centralized, you can\r\n        continue to use whatever email provider you want, and you\r\n        don\u2019t have to pay a penny (or you shouldn\u2019t, at least. If\r\n        your domain registrar tries to make you pay for email\r\n        forwarding, try looking elsewhere).</dd>\r\n\r\n      <dt>Sub-domains</dt>\r\n\r\n        <dd>Sub-domains come before your main domain name, such as\r\n        shop.mydomain.com. These label different areas of your\r\n        website, like an online store or blog. Many domain\r\n        registrars allow you to register subdomains for free, but\r\n        you\u2019ll have to point or forward those domains to different\r\n        websites as well.</dd>\r\n\r\n      <dt>Positive SSL</dt>\r\n\r\n        <dd>SSL, or Secure Sockets Layer, is the difference between\r\n        http and https in front of a website\u2019s URL. It&#39;s a way\r\n        of encrypting websites so that everything sent between a\r\n        client and the server your website is hosted on can\u2019t be\r\n        intercepted. If you\u2019re collecting sensitive information on\r\n        your website, like credit card information, you should\r\n        invest in SSL.</dd>\r\n\r\n      <dt>Website forwarding</dt>\r\n\r\n        <dd>When you search for www.newyorktimes.com, your browser\r\n        sends you to the actual domain and website,\r\n        www.nytimes.com. This is website forwarding. This is so\r\n        that commonly mistaken URLs automatically go to the correct\r\n        one rather than giving the user a wrong or nonexistent\r\n        page. Website forwarding is a good idea as your brand\r\n        expands, especially if you are known by different names\r\n        (such as an acronym). Unfortunately, you\u2019ll have to\r\n        purchase those additional domains as well.</dd>\r\n\r\n      <dt>WhoisGuard</dt>\r\n\r\n        <dd>When you register a domain, you have to provide certain\r\n        details about yourself, like your name and email address.\r\n        This information is public and can easily be accessed by\r\n        spammers through sites like who.is. WhoisGuard is a company\r\n        that masks your personal information with their\r\n        information, protecting you from spam.</dd>\r\n    </dl>\r\n  </lesson-block>\r\n\r\n<step-block header=\"Possibly: Purchase a hosting server\">\r\n  <h3>What we do</h3>\r\n  <p>A server hosts your website so that it is available and\r\n  accessible on the Internet. These companies allow you, the\r\n  client, to lease out space to publish your site onto the web on a\r\n  monthly basis. Servers work by uploading your files using a <glossary-term>File\r\n  Transfer Protocol (FTP)</glossary-term> client so that all your code, images, and other\r\n  files are readily accessible to each other.</p>\r\n\r\n  <info-block emoji=\"&#x2757;\" header=\"The host with the most\">\r\n    <p>Depending on the size of your website, you may have to sort\r\n    through which hosting server is the best option for you. Most\r\n    free hosting servers have limited services and advertisements\r\n    and cannot host complex or large sites.</p>\r\n  </info-block>\r\n\r\n  <p>There are also free solutions to web hosting. One popular\r\n  option is GitHub Pages, which is perfect for hosting a one-page,\r\n  static website like a personal website or a landing page. While\r\n  you won\u2019t have access to a server and therefore won\u2019t be able to\r\n  run any sort of server-side processes, it should be enough for a\r\n  simple website. You can even set up your domain to point to your\r\n  GitHub Page and mask the DNS to show your domain name.</p>\r\n</step-block>\r\n\r\n<step-block header='Connect your hosting server to your domain'>\r\n  <p>Once you\u2019ve registered your domain name and purchased a\r\n  hosting server, you will need to link the two in order for the\r\n  URL to direct to the correct website. Most registrars lay out a\r\n  clear process in connecting the domain name with the host, but in\r\n  general you\u2019ll just be pointing your domain name as the address\r\n  to the IP address of the server where your files will be\r\n  hosted.</p>\r\n</step-block>\r\n\r\n\r\n<step-block header='Connect to your host server'>\r\n  <p>In these steps, we\u2019ll be assuming here that you\u2019ll be logging\r\n  into your server using SFTP, but if that\u2019s not the case, you\r\n  should look up a guide for whatever protocol you have on your\r\n  server.</p>\r\n\r\n  <p>In FileZilla, open the Site Manager by going to File &gt; Site\r\n  Manager. This should bring up a window with a bunch of fields for\r\n  you to fill out. The only things you need to make sure you have\r\n  are the host (which is the IP address of the server you\u2019re\r\n  connecting to), the protocol, the logon type (which should be\r\n  normal), and the user and password fields to your account. After\r\n  filling out those fields, move over to the \u201cAdvanced\u201d tab and in\r\n  the Default remote directory field enter \u201c/var/www/html.\u201d This\r\n  will just make it easier for you to get to the directory where\r\n  you\u2019ll be uploading your files. From here, you should be able to\r\n  log in.</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"filezilla-login\"></zooming-image>\r\n  </media-group>\r\n\r\n  <p>In Cyberduck, when you launch the application for the first\r\n  time you should see a set of pre-loaded bookmarks. You can go\r\n  ahead and delete those \u2013 you\u2019ll be adding your own bookmarks\r\n  soon. Right-click on the screen and create a new bookmark, and\r\n  you\u2019ll be prompted to enter the information necessary to connect\r\n  with the server. Fill out everything at the top of the screen,\r\n  making sure not to check \u201cAnonymous Login,\u201d and then click \u201cMore\r\n  Options.\u201d In the \u201cPath\u201d field, enter \u201c/var/www/html.\u201d This will\r\n  just make it easier for you to get to the directory where you\u2019ll\r\n  be uploading your files. Once you\u2019ve done that, close out of that\r\n  window and double-click on the bookmark you just made. Enter your\r\n  password to connect to your server, and you should be in!</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"cyberduck-login\"></zooming-image>\r\n  </media-group>\r\n</step-block>\r\n\r\n<step-block header='Transfer files to your host server'>\r\n  <p>Once logged into FileZilla, you should have six windows: one\r\n  on top, four in a two-by-two layout in the middle, and one on the\r\n  bottom. The top window (1) is where you\u2019ll get status reports on\r\n  your connections to the server. The middle left windows (2, 4)\r\n  are your local directory \u2013 they\u2019re the files sitting on your\r\n  computer. Then your middle right windows (3, 5) will have the\r\n  directory for your server. The bottom window (6) has useful\r\n  information about any files you have waiting to be uploaded and\r\n  their status. To upload your files, simply locate them on your\r\n  computer in the left middle bottom pane and then drag them over\r\n  to the right middle bottom pane. Make sure that you upload your\r\n  HTML file as well as any important other files (CSS, images,\r\n  etc.) into this folder exactly as it appears on your\r\n  computer.</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"filezilla-windows\"></zooming-image>\r\n  </media-group>\r\n\r\n  <p>In Cyberduck, once you\u2019ve connected to your host server it\r\n  should direct you to a new screen. Make sure that you\u2019re in the\r\n  /var/www/html directory, and from here you can just drag and drop\r\n  your files from your computer into Cyberduck. Voila! That\u2019s\r\n  it!</p>\r\n\r\n  <media-group class=\"layout horizontal around-justified\">\r\n    <zooming-image ref=\"cyberduck-windows\"></zooming-image>\r\n  </media-group>\r\n</step-block>\r\n\r\n<step-block header='Check out your site'>\r\n  <p>Now that your website is live, check it out! Make sure to\r\n  click on all of the links to make sure that they are directing to\r\n  the right places and that all the images are showing. If you have\r\n  to fix anything, be sure to re-upload the edited file onto your\r\n  hosting server.</p>\r\n</step-block>\r\n", "created_by": 1, "updated_at": "2015-09-24T21:04:38.110Z", "slug": "intro-web-hosting"}, "model": "learncms.lesson"}]